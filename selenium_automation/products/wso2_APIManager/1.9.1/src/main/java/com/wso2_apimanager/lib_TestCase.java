package com.wso2_apimanager;

import com.virtusa.isq.vtaf.runtime.SeleniumTestBase;
import org.openqa.selenium.By;

/**
 *  Class lib_TestCase contains reusable business components 
 *  Each method in this class correspond to a reusable business component.
 */
public class lib_TestCase {

    /**
     *  Business component APIM_22.
     */
    public final static void APIM_22(final SeleniumTestBase caller, final String param_verbNamePost, final String param_urlPatterSC, final String param_verbNameDelete, final String param_verbNameGet, final String param_urlPattern, final String param_verbName, final String param_APIName, final String param_publisherURL, final String param_storeURL, final String param_TenanrOrAdmin) throws Exception {
        //APIM-22: Editing an API---------------------
        caller.writeToReport("Start Executing APIM-22");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        String varUpdateAPIsThree = caller.retrieveString("keyUpdateAPIs");
        lib_Common.bc_EditAPI(caller, varUpdateAPIsThree);
        //waiting for content load
        caller.pause("4000");
        caller.type("APIPublisherBrowse.tf_UrlPattern",param_urlPatterSC);
        //waiting for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.chk_verbMethod","verb_PARAM:" + param_verbNamePost);
        //waiting for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.btn_Add");
        //waiting for content load
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVerbMethod","verb_PARAM:" + param_verbNamePost + "_PARAM," + "urlPattern_PARAM:" + param_urlPatterSC,false,"");
        caller.click("APIPublisherBrowse.img_deleteIcon","param_verbmethodPost_PARAM:" + param_verbNamePost + "_PARAM," + "param_UrlPattern_PARAM:" + param_urlPatterSC);
        caller.click("APIPublisherBrowse.btn_Yes");
        //waiting for content load
        caller.pause("5000");
        caller.checkObjectProperty("APIPublisherBrowse.ele_lblVerbMethod","verb_PARAM:" + param_verbNamePost + "_PARAM," + "urlPattern_PARAM:" + param_urlPatterSC,"ELEMENTPRESENT","false",false,"");
        //waiting for content load
        caller.pause("4000");
        caller.type("APIPublisherBrowse.tf_UrlPattern",param_urlPatterSC);
        //waiting for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.chk_verbMethod","verb_PARAM:" + param_verbNameGet);
        caller.click("APIPublisherBrowse.chk_verbMethod","verb_PARAM:" + param_verbNamePost);
        caller.click("APIPublisherBrowse.btn_Add");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVerbMethod","verb_PARAM:" + param_verbNameGet + "_PARAM," + "urlPattern_PARAM:" + param_urlPatterSC,false,"");
        //waiting for content load
        caller.pause("4000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVerbMethod","verb_PARAM:" + param_verbNamePost + "_PARAM," + "urlPattern_PARAM:" + param_urlPatterSC,false,"");
        //waiting for content load
        caller.pause("6000");
        caller.type("APIPublisherBrowse.tf_UrlPattern",param_urlPattern);
        caller.click("APIPublisherBrowse.chk_verbMethod","verb_PARAM:" + param_verbNamePost);
        caller.click("APIPublisherBrowse.chk_verbMethod","verb_PARAM:" + param_verbNameDelete);
        caller.click("APIPublisherBrowse.btn_Add");
        //waiting for content load
        caller.pause("1000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblpopupError",false,"");
        caller.click("APIPublisherBrowse.btn_Ok");
        //waiting for content load
        caller.pause("6000");
        caller.click("APIPublisherBrowse.chk_verbMethod","verb_PARAM:" + param_verbNamePost);
        caller.click("APIPublisherBrowse.btn_Add");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVerbMethod","verb_PARAM:" + param_verbNameDelete + "_PARAM," + "urlPattern_PARAM:" + param_urlPatterSC,false,"");
        caller.click("APIPublisherBrowse.btn_Save");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        lib_Common.bc_PrototypeAPI(caller);
        //Wait for content load
        caller.pause("6000");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenanrOrAdmin);
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_PrototypedAPIs");
        //waiting for content load
        caller.pause("6000");
        String varUpdateAPIsFour = caller.retrieveString("keyUpdateAPIs");
        caller.click("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + varUpdateAPIsFour);
        caller.click("APIStoreAPIs.ele_tabAPIConsole");
        //waiting for content load
        caller.pause("6000");
        caller.checkElementPresent("APIStoreAPIs.lnk_default","param_verb_PARAM:" + param_verbNamePost + "_PARAM," + "param_UrlPattern_PARAM:" + param_urlPattern,false,"");
        caller.writeToReport("End of Executing APIM-22");	
    }
    /**
     *  Business component APIM_21.
     */
    public final static void APIM_21(final SeleniumTestBase caller, final String param_APIName, final String param_APIcontest, final String param_APIVersion, final String param_APIImagePath, final String param_tagName, final String param_URLPattern) throws Exception {
        caller.writeToReport("Start of executing APIM_21");
        //Go for create new API up to create state
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //CreateAPI upto design Stage
        //waiting for content load
        caller.pause("2000");
        //Type API Name
        String varAPIName = param_APIName+caller.generateData("int",5);
        caller.store("keyAPINameOne","String",varAPIName);
        caller.type("APIPublisherAdd.tf_APIName",varAPIName);
        //Type API contest
        String varAPIcontest = param_APIcontest+caller.generateData("int",5);
        caller.type("APIPublisherAdd.tf_APIContext",varAPIcontest);
        caller.type("APIPublisherAdd.tf_APIVersion",param_APIVersion+caller.generateData("int",3));
        caller.type("APIPublisherAdd.tf_Tags",param_tagName);
        caller.fireEvent("KEY%key=\n","2000");
        //waiting for content load
        caller.pause("2000");
        //click save and verify warning
        caller.type("APIPublisherAdd.tf_URLPattern",varAPIName+"/"+varAPIcontest);
        caller.click("APIPublisherAdd.chk_Post");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherAdd.btn_Add");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherAdd.btn_Save");
        //waiting for content load
        caller.pause("8000");
        //Go to implement stage
        caller.checkElementPresent("APIPublisherAdd.lnk_NextImplement",false,"");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //waiting for content load
        caller.pause("4000");
        //waiting for content load
        caller.pause("4000");
        //APIM-21: Try to change the lifecycle of an API in design stge
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",varAPIName);
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPIName);
        //waiting for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //Verify the unavailability of "PROTOTYPED"
        caller.checkObjectProperty("APIPublisherBrowse.ele_ddState","MISSINGOPTION","PROTOTYPED",false,"");
        //Verify the unavailability of "PUBLISHED"
        caller.checkObjectProperty("APIPublisherBrowse.ele_ddState","MISSINGOPTION","PUBLISHED",false,"");
        caller.writeToReport("End of executing APIM_21");	
    }
    /**
     *  Business component APIM_276.
     */
    public final static void APIM_276(final SeleniumTestBase caller, final String param_APIName, final String param_VisibilityPublic, final String param_publisherURL, final String param_storeURL, final String param_TenanrOrAdmin) throws Exception {
        //APIM-276: Change the visibilty levels of the API to public and save it------------
        caller.writeToReport("Start Executing APIM-276");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        String varUpdateAPIsFive = caller.retrieveString("keyUpdateAPIs");
        lib_Common.bc_EditAPI(caller, varUpdateAPIsFive);
        caller.select("APIPublisherBrowse.ele_ddVisibility",param_VisibilityPublic);
        caller.click("APIPublisherBrowse.btn_Save");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_TenanrOrAdmin);
        //waiting for content load
        caller.pause("5000");
        caller.click("APIStoreHome.lnk_PrototypedAPIs");
        String varkeyUpdateAPIs = caller.retrieveString("keyUpdateAPIs");
        caller.checkElementPresent("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + varkeyUpdateAPIs,false,"");
        //log out store
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        caller.click("APIStoreHome.btn_Logout");
        //waiting for content load
        caller.pause("5000");
        caller.click("APIStoreHome.lnk_PrototypedAPIs");
        caller.checkElementPresent("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + varkeyUpdateAPIs,false,"");
        caller.writeToReport("End of Executing APIM-276");	
    }
    /**
     *  Business component APIM_20.
     */
    public final static void APIM_20(final SeleniumTestBase caller, final String param_APIVersion, final String param_nonImagrPath, final String param_APIImagePath, final String param_URLPattern, final String param_APIName, final String param_APIContext, final String param_TagName) throws Exception {
        caller.writeToReport("Srart of executing APIM_20");
        //APIM-20:Create API in design stage - Field validations
        //CreateAPI upto design Stage
        //waiting for content load
        caller.pause("4000");
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Verify design API page apears
        caller.checkElementPresent("APIPublisherAdd.ele_lblDesignAPI",false,"");
        //genarate api name
        String APIName = param_APIName+"_"+caller.generateData("int",3);
        caller.store("var_APIName","String",APIName);
        caller.store("var_APINameOne","String",APIName);
        caller.type("APIPublisherAdd.tf_APIName",APIName);
        //Type API contest
        String APIcontest = param_APIContext+"_"+caller.generateData("int",3);
        caller.type("APIPublisherAdd.tf_APIContext",APIcontest);
        caller.type("APIPublisherAdd.tf_APIVersion",param_APIVersion);
        //waiting for content load
        caller.pause("6000");
        //Type non image path and verify error
        //Type valid image path
         java.io.File fileOne = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator +param_nonImagrPath);
        String entirePathInvalid = fileOne.getAbsolutePath();
        caller.type("APIPublisherAdd.btn_BrowseImage",entirePathInvalid);
        //Waiting for content to load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Save");
        //Waiting for content to load
        caller.pause("6000");
        caller.checkElementPresent("APIPublisherAdd.ele_lblNonImageFileError",false,"");
        //Type valid image path
         java.io.File file = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator +param_APIImagePath);
        String entirePath = file.getAbsolutePath();
        caller.type("APIPublisherAdd.btn_BrowseImage",entirePath);
        for(int i=0;i<15;i++){
        String TagName = param_TagName+"_"+caller.generateData("int",3);
        caller.type("APIPublisherAdd.tf_Tags",TagName);
        caller.fireEvent("KEY%key=\n","2000");
        }
        //waiting for content load
        caller.pause("5000");
        //Type URL pattern and resource and did not choose any Verb
        caller.type("APIPublisherAdd.tf_URLPattern",param_URLPattern);
        caller.click("APIPublisherAdd.btn_Add");
        //waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherAdd.ele_lblErrorMessageURLPattern",false,"");
        caller.click("APIPublisherAdd.btn_OkErrorMessage");
        //remove URL and resource
        caller.type("APIPublisherAdd.tf_URLPattern","");
        //click save and verify warning
        //waiting for content load
        caller.pause("5000");
        caller.click("APIPublisherAdd.btn_Save");
        //waiting for content load
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherBrowse.btn_No",false,"");
        caller.click("APIPublisherBrowse.btn_No");
        //waiting for content load
        caller.pause("6000");
        //Remove API Name
        caller.type("APIPublisherAdd.tf_APIName","");
        //waiting for content load
        caller.pause("4000");
        caller.click("APIPublisherAdd.btn_Save");
        //waiting for content load
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherAdd.ele_lblWarningMessageAPIName",false,"");
        //Type API name
        caller.type("APIPublisherAdd.tf_APIName",APIName);
        //Empty the API context and save
        caller.type("APIPublisherAdd.tf_APIContext","");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherAdd.btn_Save");
        //waiting for content load
        caller.pause("6000");
        caller.checkElementPresent("APIPublisherAdd.ele_lblWarningMessageAPIContest",false,"");
        caller.type("APIPublisherAdd.tf_APIContext",APIcontest);
        //Empty the API Version and verify error
        caller.type("APIPublisherAdd.tf_APIVersion","");
        caller.click("APIPublisherAdd.btn_Save");
        //waiting for content load
        caller.pause("6000");
        caller.checkElementPresent("APIPublisherAdd.ele_lblWarningMessageAPIVersion",false,"");
        caller.type("APIPublisherAdd.tf_APIVersion",param_APIVersion);
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherAdd.btn_Save");
        //waiting for content load
        caller.pause("5000");
        caller.click("APIPublisherAdd.btn_Yes");
        //waiting for content load
        caller.pause("3000");
        //Verify whether goes to  genaral detail page
        caller.checkElementPresent("APIPublisherAdd.lnk_NextImplement",false,"");
        //waiting for content load
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherAdd.img_ThubmnailImage",false,"");
        caller.writeToReport("End of executing APIM_20");	
    }
    /**
     *  Business component APIM_278.
     */
    public final static void APIM_278(final SeleniumTestBase caller, final String param_VisibilityRestrictedToRole, final String param_TenantOrAdmin, final String param_storeURL, final String param_APIVersion, final String param_ProductionEndPont, final String param_SandBoxEndpoint, final String param_Domain) throws Exception {
        caller.writeToReport("Srart of executing APIM_278");
        //APIM-278: Change the visibilty levels of the API to 'reststircted by role' and save it------------
        caller.click("APIPublisherHome.lnk_Browse");
        String APIName = caller.retrieveString("var_APIName");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        //Wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.click("APIPublisherBrowse.lnk_Edit");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblGeneralDetails",false,"");
        caller.select("APIPublisherBrowse.ele_ddVisibility",param_VisibilityRestrictedToRole);
        //Wait for content load
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_Ok");
        caller.checkElementPresent("APIPublisherBrowse.tf_VisibilityToRole",false,"");
        if(param_TenantOrAdmin.equals("Tenant")){
        String var_RoleName = caller.retrieveString("KeyVisibilityRole");
        //Type username
        caller.type("APIPublisherBrowse.tf_VisibilityToRole",var_RoleName);
        } else {
        String var_RoleName = caller.retrieveString("KeyVisibilityRoleAdmin");
        //Type username
        caller.type("APIPublisherBrowse.tf_VisibilityToRole",var_RoleName);
        }
        caller.click("APIPublisherBrowse.btn_Save");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        caller.click("APIPublisherBrowse.ele_lblManagedAPI");
        caller.type("APIPublisherBrowse.tf_ProductionEndPoint",param_ProductionEndPont);
        caller.type("APIPublisherBrowse.tf_SandBoxEndPoint",param_SandBoxEndpoint);
        caller.click("APIPublisherBrowse.btn_SaveManagedAPI");
        //waiting for content load
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_NextManage");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.ele_ddTierAvilability");
        caller.click("APIPublisherBrowse.chk_Gold");
        caller.click("APIPublisherBrowse.chk_Silver");
        caller.click("APIPublisherBrowse.btn_Save1");
        caller.click("APIPublisherBrowse.btn_SaveAndPublish");
        //Wait for content load
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_Close");
        //Wait for content load
        caller.pause("3000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        lib_Common.bc_StoreLogin(caller, param_Domain);
        //Wait for content load
        caller.pause("3000");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        //Wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //Wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersion);
        //Wait for content load
        caller.pause("3000");
        lib_Common.bc_NavigateToPrototypedAPI(caller);
        caller.checkElementPresent("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.writeToReport("End of executing APIM_278");	
    }
    /**
     *  Business component APIM_280.
     */
    public final static void APIM_280(final SeleniumTestBase caller, final String param_VisibilityRestrictByRole) throws Exception {
        caller.writeToReport("Srart of executing APIM_280");
        //Test case name-------APIM-280: Try to save without adding any resource------------
        caller.click("APIPublisherHome.lnk_Browse");
        String APIName = caller.retrieveString("var_APIName");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        //Wait for load content
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.click("APIPublisherBrowse.lnk_Edit");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblGeneralDetails",false,"");
        caller.select("APIPublisherBrowse.ele_ddVisibility",param_VisibilityRestrictByRole);
        //Wait for load content
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_Ok");
        caller.checkElementPresent("APIPublisherBrowse.tf_VisibilityToRole",false,"");
        caller.click("APIPublisherBrowse.btn_Save");
        caller.writeToReport("End of executing APIM_280");	
    }
    /**
     *  Business component APIM_23.
     */
    public final static void APIM_23(final SeleniumTestBase caller, final String param_APIVersion, final String param_URLPattern, final String param_APIName, final String param_tagName, final String param_storeURL, final String param_TenantOrAdmin) throws Exception {
        caller.writeToReport("Start of TC APIM-23");
        //Test case name------APIM-23: Create API from scratch and give necessary details and deploy as prototype------------
        //CreateAPI upto design Stage
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Type API Name
        String varAPINamePrototype = param_APIName+caller.generateData("int",2);
        caller.type("APIPublisherAdd.tf_APIName",varAPINamePrototype);
        //Store API name for furthur use
        caller.store("keyAPINamePrototype","String",varAPINamePrototype);
        //Type API contest
        String APIcontest = "api"+caller.generateData("int",3);
        caller.type("APIPublisherAdd.tf_APIContext",APIcontest);
        caller.type("APIPublisherAdd.tf_APIVersion",param_APIVersion);
        caller.type("APIPublisherAdd.tf_Tags",param_tagName);
        caller.fireEvent("KEY%key=\n","2000");
        //waiting for content load
        caller.pause("6000");
        //click save and verify warning
        caller.click("APIPublisherAdd.btn_Save");
        //waiting for content load
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherAdd.ele_lblDefaultResourceMessage",false,"");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherAdd.btn_Yes");
        //waiting for content load
        caller.pause("7000");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //waiting for content load
        caller.pause("4000");
        lib_Common.bc_DeployAsPrototype(caller, varAPINamePrototype);
        caller.pause("4000");
        //Navigate to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        lib_Common.bc_NavigateToPrototypedAPI(caller);
        caller.pause("5000");
        caller.checkElementPresent("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + varAPINamePrototype,false,"");
        caller.pause("5000");
        caller.writeToReport("End of TC APIM-23");	
    }
    /**
     *  Business component APIM_24.
     */
    public final static void APIM_24(final SeleniumTestBase caller, final String param_EndpointType, final String param_EndpointUrl, final String param_Domain, final String param_publisherURL, final String param_storeURL) throws Exception {
        caller.writeToReport("End of executing APIM_24");
        //Test case name------APIM-24: Open an saved API in design stage and give the necessary details and deploy it as prototype------------
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        //Wait for content load
        caller.pause("3000");
        String APINameTwo = caller.retrieveString("var_APIName");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",APINameTwo);
        caller.click("APIPublisherHome.btn_Search");
        //Wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APINameTwo);
        caller.click("APIPublisherBrowse.lnk_Edit");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblGeneralDetails",false,"");
        caller.click("APIPublisherBrowse.btn_NextImplement");
        //Wait for content load
        caller.pause("5000");
        if(!caller.checkElementPresent("APIPublisherBrowse.tf_productionEndpoint")){
        caller.click("APIPublisherBrowse.ele_lblManagedAPI");
        //Wait for content load
        caller.pause("3000");
        } else if(caller.checkElementPresent("APIPublisherBrowse.tf_productionEndpoint")){
        caller.type("APIPublisherBrowse.tf_productionEndpoint",param_EndpointUrl);
        //Wait for content load
        caller.pause("3000");
        }
        //Wait for content load
        caller.pause("3000");
        lib_Common.bc_PrototypeAPI(caller);
        //Wait for content load
        caller.pause("3000");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        caller.pause("3000");
        lib_Common.bc_NavigateToPrototypedAPI(caller);
        caller.checkElementPresent("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + APINameTwo,false,"");
        caller.writeToReport("End of executing APIM_24");	
    }
    /**
     *  Business component APIM_27.
     */
    public final static void APIM_27(final SeleniumTestBase caller, final String param_tagName, final String param_storeURL, final String param_TenantOrAdmin) throws Exception {
        caller.writeToReport("Start of TC APIM-27");
        //APIM-27: Tags of Prototype APIs should not be visible in the tags list
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"5000");
        caller.pause("3000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        caller.pause("4000");
        caller.checkObjectProperty("APIStoreAPIs.lnk_tagProtoType","param_tagName_PARAM:" + param_tagName,"ELEMENTPRESENT","false",false,"");
        caller.writeToReport("End of TC APIM-27");	
    }
    /**
     *  Business component APIM_25.
     */
    public final static void APIM_25(final SeleniumTestBase caller, final String param_APIName, final String param_storeURL, final String param_TenantOrAdmin) throws Exception {
        caller.writeToReport("Start of TC APIM-25");
        //APIM-25: Prototype APIs should not be visible in general store
        //Navigate to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        caller.pause("3000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_TenantOrAdmin);
        caller.checkObjectProperty("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + param_APIName,"ELEMENTPRESENT","false",false,"");
        caller.pause("5000");
        caller.writeToReport("End of TC APIM-25");	
    }
    /**
     *  Business component APIM_26.
     */
    public final static void APIM_26(final SeleniumTestBase caller, final String param_TenantOrAdmin, final String param_APIName, final String param_storeURL) throws Exception {
        caller.writeToReport("Start of TC APIM-26");
        //APIM-26: Prototype APIs should not be visible in the recently added list
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        caller.pause("3000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        if(!caller.checkElementPresent("APIStoreHome.lnk_login")){
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        caller.pause("3000");
        caller.click("APIStoreHome.btn_Logout");
        }
        lib_Common.bc_StoreLogin(caller, param_TenantOrAdmin);
        caller.checkObjectProperty("APIStoreAPIs.lnk_RecentlyViewedAPUI","param_APIName_PARAM:" + param_APIName,"ELEMENTPRESENT","false",false,"");
        caller.pause("5000");
        caller.writeToReport("End of TC APIM-26");	
    }
    /**
     *  Business component APIM_29.
     */
    public final static void APIM_29(final SeleniumTestBase caller, final String param_ValidUrl, final String param_InvalidUrl, final String param_APIPublisherUrl, final String param_ValidUrlSandBox, final String param_InvalidUrlSandBox) throws Exception {
        caller.writeToReport("Start of executing APIM_29");
        //APIM-29: Check the functionality of endpont "Test" button
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_APIPublisherUrl,"3000");
        String APINameTwo = caller.retrieveString("var_APIName");
        caller.type("APIPublisherHome.tf_APISearch",APINameTwo);
        caller.click("APIPublisherHome.btn_Search");
        //Wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APINameTwo);
        caller.click("APIPublisherBrowse.lnk_Edit");
        caller.click("APIPublisherBrowse.btn_NextImplement");
        caller.click("APIPublisherBrowse.ele_lblPrototype");
        caller.type("APIPublisherBrowse.tf_prototypeEndpoint",param_ValidUrl);
        caller.click("APIPublisherBrowse.btn_test");
        //Wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblValid",false,"");
        caller.type("APIPublisherBrowse.tf_prototypeEndpoint",param_InvalidUrl);
        caller.click("APIPublisherBrowse.btn_test");
        //Wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblInvalid",false,"");
        //Wait for content load
        caller.pause("5000");
        caller.type("APIPublisherBrowse.tf_SandBoxEndPoint",param_ValidUrlSandBox);
        caller.doubleClick("APIPublisherBrowse.btn_testSandBoxEndPoint");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblSandboxEndpointValid",false,"");
        caller.type("APIPublisherBrowse.tf_SandBoxEndPoint",param_InvalidUrlSandBox);
        caller.click("APIPublisherBrowse.btn_testSandBoxEndPoint");
        //Wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblInvalid",false,"");
        //Wait for content load
        caller.pause("4000");
        caller.writeToReport("End of executing APIM_29");	
    }
    /**
     *  Business component APIM_33.
     */
    public final static void APIM_33(final SeleniumTestBase caller, final String param_validEndpointUrl, final String param_Domain, final String param_storeURL) throws Exception {
        caller.writeToReport("Start of executing APIM_33");
        //APIM-33: Give a valid Production endpoint URL and publish the API and invoke it
        caller.type("APIPublisherBrowse.tf_productionEndpoint",param_validEndpointUrl);
        caller.click("APIPublisherBrowse.btn_Save");
        //Wait for content load
        caller.pause("3000");
        caller.doubleClick("APIPublisherBrowse.btn_NextManage");
        //Wait for content load
        caller.pause("6000");
        caller.click("APIPublisherBrowse.btn_SaveAndPublish");
        //Wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Close");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        //Wait for content load
        caller.pause("3000");
        String APINameTwo = caller.retrieveString("var_APIName");
        //Wait for content load
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",APINameTwo);
        //Wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //Wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + APINameTwo,false,"");
        caller.writeToReport("End of executing APIM_33");	
    }
    /**
     *  Business component APIM_34.
     */
    public final static void APIM_34(final SeleniumTestBase caller, final String param_APIVersion, final String param_APIImagePath, final String param_APIName, final String param_tagName, final String param_APIContext, final String param_storeURL, final String param_TenantOrAdmin) throws Exception {
        caller.writeToReport("Start of executing APIM_34");
        //Go for create new API up to create state
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        //start design stage
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Type API Name
        String varAPIName = param_APIName+caller.generateData("int",5);
        caller.store("keyAPIName","String",varAPIName);
        caller.type("APIPublisherAdd.tf_APIName",varAPIName);
        //Type API contest
        String varAPIContext = param_APIContext+caller.generateData("int",3);
        caller.type("APIPublisherAdd.tf_APIContext",varAPIContext);
        String varAPIVersion = param_APIVersion+caller.generateData("int",2);
        caller.type("APIPublisherAdd.tf_APIVersion",varAPIVersion);
        //Type valid image path
        //Type
        //object=APIPublisherAdd.btn_BrowseImage
        //text=@param_APIImagePath
        caller.type("APIPublisherAdd.tf_Tags",param_tagName);
        caller.fireEvent("KEY%key=\n","2000");
        //waiting for content load
        caller.pause("3000");
        //click save and verify warning
        caller.type("APIPublisherAdd.tf_URLPattern",varAPIName+"/"+varAPIContext);
        caller.click("APIPublisherAdd.chk_Post");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherAdd.btn_Add");
        caller.checkElementPresent("APIPublisherAdd.btn_Save",false,"");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherAdd.btn_Save");
        //waiting for content load
        caller.pause("3000");
        //Go to implement stage
        caller.checkElementPresent("APIPublisherAdd.lnk_NextImplement",false,"");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //waiting for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.ele_lblPrototype");
        caller.click("APIPublisherBrowse.btn_SavePrototype");
        //Waiting for content load
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_DeployAsPrototype");
        //Waiting for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.btn_Close");
        //waiting for content load
        caller.pause("3000");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //waiting for content load
        caller.pause("5000");
        caller.click("APIStoreHome.lnk_PrototypedAPIs");
        //waiting for content load
        caller.pause("4000");
        caller.checkElementPresent("APIStorePrototypedAPIs.lnk_APIName","param_APIName_PARAM:" + varAPIName,false,"");
        caller.writeToReport("End of executing APIM_34");	
    }
    /**
     *  Business component APIM_32.
     */
    public final static void APIM_32(final SeleniumTestBase caller, final String param_SecuritySchemeSecured, final String param_endpointUsername, final String param_endpointPassword) throws Exception {
        caller.writeToReport("Start of executing APIM_32");
        //APIM-32: Apply Endpoint Security configuration to the API
        caller.click("APIPublisherBrowse.lnk_ShowmoreOption");
        caller.select("APIPublisherBrowse.ele_ddEndpointSecurityScheme",param_SecuritySchemeSecured);
        caller.type("APIPublisherBrowse.tf_endpointUserName","");
        caller.type("APIPublisherBrowse.tf_endPointPassword","");
        caller.click("APIPublisherBrowse.btn_Save");
        caller.checkElementPresent("APIPublisherBrowse.ele_lbl_credentialErrorMessege",false,"");
        //Wait for content load
        caller.pause("3000");
        caller.type("APIPublisherBrowse.tf_endpointUserName",param_endpointUsername);
        caller.type("APIPublisherBrowse.tf_endPointPassword",param_endpointPassword);
        caller.click("APIPublisherBrowse.btn_Save");
        //Wait for content load
        caller.pause("3000");
        caller.writeToReport("End of executing APIM_32");	
    }
    /**
     *  Business component APIM_39.
     */
    public final static void APIM_39(final SeleniumTestBase caller, final String param_APIName, final String param_ValidSandboxEndpoint, final String param_ValidProductionEndPoint, final String param_PublisherURL, final String param_APIContext, final String param_APIVersion, final String param_APIImagePath, final String param_tagName) throws Exception {
        caller.writeToReport("Start of executing APIM_39");
        //APIM-39: Set valid SOAP service endpoints for Production and Sandbox and check the "Test" button
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_PublisherURL,"3000");
        //waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        String varAPINameOne = caller.retrieveString("keyAPIName");
        caller.type("APIPublisherHome.tf_APISearch",varAPINameOne);
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameOne,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameOne);
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_Edit",false,"");
        caller.click("APIPublisherBrowse.lnk_Edit");
        //waiting for content load
        caller.pause("2000");
        //Go to implement stage
        caller.checkElementPresent("APIPublisherAdd.lnk_NextImplement",false,"");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //waiting for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.ele_lblManagedAPI");
        caller.type("APIPublisherBrowse.tf_ProductionEndPoint",param_ValidProductionEndPoint);
        caller.click("APIPublisherBrowse.btn_testProductionEndpoint");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblValid",false,"");
        caller.type("APIPublisherBrowse.tf_SandBoxEndPoint",param_ValidSandboxEndpoint);
        caller.click("APIPublisherBrowse.btn_testSandBoxEndPoint");
        //waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblValid",false,"");
        caller.writeToReport("End of executing APIM_39");	
    }
    /**
     *  Business component APIM_52.
     */
    /**
     *  Business component APIM_52.
     */
    public final static void APIM_52(final SeleniumTestBase caller) throws Exception {
    	
    }
    /**
     *  Business component APIM_281.
     */
    /**
     *  Business component APIM_281.
     */
    public final static void APIM_281(final SeleniumTestBase caller) throws Exception {
    	
    }
    /**
     *  Business component APIM_70.
     */
    /**
     *  Business component APIM_70.
     */
    public final static void APIM_70(final SeleniumTestBase caller) throws Exception {
    	
    }
    /**
     *  Business component APIM_53.
     */
    public final static void APIM_53(final SeleniumTestBase caller, final String param_APIName) throws Exception {
        //APIM-53:Add throttling tires and other details to a prototyped API and save
        lib_Common.bc_DeployAsPrototype(caller, param_APIName);
        lib_Common.bc_EditAPI(caller, param_APIName);
        caller.click("APIPublisherBrowse.btn_NextImplement");
        caller.click("APIPublisherBrowse.btn_NextManage");
        lib_Common.bc_SelectTiers(caller);
        caller.click("APIPublisherBrowse.btn_Save1");
        caller.pause("3000");	
    }
    /**
     *  Business component APIM_55.
     */
    public final static void APIM_55(final SeleniumTestBase caller, final String param_APIName, final String param_ProductionEndpointUrl, final String param_APIContext, final String param_APIVersion, final String param_APIImagePath, final String param_APITagName, final String param_APIPublisherUrl, final String param_Domain, final String param_storeURL) throws Exception {
        caller.writeToReport("Start of executing APIM_55");
        //APIM-55: Save an API in manage stage.
        //CreateAPI upto design Stage
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_APIPublisherUrl,"3000");
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Type API Name
        String APINameTwo = param_APIName+"_"+caller.generateData("int",3);
        caller.store("var_APIName","String",APINameTwo);
        caller.store("var_APINameTwo","String",APINameTwo);
        caller.type("APIPublisherAdd.tf_APIName",APINameTwo);
        //Type API contest
        String APIContextTwo = param_APIContext+"_"+caller.generateData("int",3);
        caller.type("APIPublisherAdd.tf_APIContext",APIContextTwo);
        caller.type("APIPublisherAdd.tf_APIVersion",param_APIVersion);
        //Type valid image path
         java.io.File file = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator +param_APIImagePath);
        String entirePath = file.getAbsolutePath();
        caller.type("APIPublisherAdd.btn_BrowseImage",entirePath);
        String APITagNameTwo = param_APITagName+"_"+caller.generateData("int",3);
        caller.type("APIPublisherAdd.tf_Tags",APITagNameTwo);
        caller.fireEvent("KEY%key=\n","2000");
        //waiting for content load
        caller.pause("6000");
        //click save and verify warning
        caller.doubleClick("APIPublisherAdd.btn_Save");
        //waiting for content load
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherAdd.ele_lblDefaultResourceMessage",false,"");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherAdd.btn_Yes");
        //waiting for content load
        caller.pause("7000");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //waiting for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.ele_lblManagedAPI");
        caller.type("APIPublisherBrowse.tf_ProductionEndPoint",param_ProductionEndpointUrl);
        caller.click("APIPublisherBrowse.btn_NextManage");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Save1");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblThisFieldisRequired",false,"");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.ele_ddTierAvilability");
        //waiting for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.chk_Gold");
        caller.click("APIPublisherBrowse.chk_Silver");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Save1");
        //waiting for content load
        caller.pause("4000");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        //waiting for content load
        caller.pause("3000");
        caller.type("APIStoreHome.tf_APISearchStore",APINameTwo);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("2000");
        if(!caller.checkElementPresent("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APINameTwo + "_PARAM," + "param_version_PARAM:" + param_APIVersion)){
        caller.writeToReport("API not in Store");
        }
        caller.writeToReport("End of executing APIM_55");	
    }
    /**
     *  Business component APIM_217.
     */
    public final static void APIM_217(final SeleniumTestBase caller, final String param_APIName, final String param_ImagePath, final String param_txtPath, final String param_storeURL, final String param_APIContext, final String param_APIVersion, final String param_TenantOrAdmin) throws Exception {
        //APIM-217: Check whether user can successfully edit icon.
        caller.writeToReport("Start Executing APIM-217");
        //CreateAPI upto design Stage
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Take API name as a parameter
        String varUpdateAPIs = param_APIName+caller.generateData("int",3);
        //storing API name
        caller.store("keyUpdateAPIs","String",varUpdateAPIs);
        caller.type("APIPublisherAdd.tf_APIName",varUpdateAPIs);
        //Take API context as a variable and Type
        String varAPIContext = param_APIContext+caller.generateData("int",3);
        caller.type("APIPublisherAdd.tf_APIContext",varAPIContext);
        caller.type("APIPublisherAdd.tf_APIVersion",param_APIVersion);
        //Auto genarate tag
        String varAPITag = "@param_APITag"+caller.generateData("int",3);
        caller.type("APIPublisherAdd.tf_Tags",varAPITag);
        caller.fireEvent("KEY%key=\n","2000");
        //waiting for content load
        caller.pause("6000");
        //click save and verify warning
        caller.doubleClick("APIPublisherAdd.btn_Save");
        //waiting for content load
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherAdd.ele_lblDefaultResourceMessage",false,"");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherAdd.btn_Yes");
        //waiting for content load
        caller.pause("7000");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //waiting for content load
        caller.pause("4000");
        caller.click("APIPublisherHome.lnk_Browse");
        String varUpdateAPIsOne = caller.retrieveString("keyUpdateAPIs");
        caller.type("APIPublisherHome.tf_APISearch",varUpdateAPIsOne);
        //waiting for content load
        caller.pause("3000");
        lib_Common.bc_EditAPI(caller, varUpdateAPIsOne);
        caller.click("APIPublisherBrowse.lnk_ChangeIcon");
        //Type invalid image path
         java.io.File file = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator +param_txtPath);
        String entirePathInvalidOne = file.getAbsolutePath();
        caller.type("APIPublisherAdd.btn_BrowseImage",entirePathInvalidOne);
        //Waiting for content to load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_Save");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblInvalidImageError",false,"");
        caller.click("APIPublisherHome.lnk_Browse");
        lib_Common.bc_EditAPI(caller, varUpdateAPIs);
        caller.click("APIPublisherBrowse.lnk_ChangeIcon");
        //waiting for content load
        caller.pause("2000");
        //Type invalid image path
         java.io.File fileOne = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator +param_ImagePath);
        String entirePathInvalid = fileOne.getAbsolutePath();
        caller.type("APIPublisherAdd.btn_BrowseImage",entirePathInvalid);
        caller.click("APIPublisherBrowse.btn_Save");
        caller.click("APIPublisherBrowse.btn_NextImplement");
        lib_Common.bc_PrototypeAPI(caller);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("3000");
        caller.type("APIPublisherHome.tf_APISearch",varUpdateAPIs);
        caller.click("APIPublisherHome.btn_Search");
        //wait till api display
        caller.pause("3000");
        caller.checkImagePresent("APIStoreAPIs.img_Uploaded",false,false,"");
        caller.pause("4000");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_TenantOrAdmin);
        //waiting for content load
        caller.pause("4000");
        caller.click("APIStoreHome.lnk_PrototypedAPIs");
        //waiting for content load
        caller.pause("1000");
        caller.checkImagePresent("APIStoreAPIs.img_verificationStore",false,false,"");
        caller.writeToReport("End of  Executing APIM-217");	
    }
    /**
     *  Business component APIM_2A.
     */
    public final static void APIM_2A(final SeleniumTestBase caller, final String param_APIName, final String param_APIImagePath, final String param_APIVersion, final String param_tagName, final String param_storeURL, final String param_publisherURL, final String param_APIContext, final String param_productionEndPoint, final String param_sandBoxEndPoint, final String param_appName, final String param_TenanrOrAdmin, final String param_ThrottlingTier) throws Exception {
        caller.writeToReport("Start of executing APIM_2A");
        //Go for create new API up to create state
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        //start design stage
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Type API Name
        String varAPIName = param_APIName+caller.generateData("int",3);
        caller.store("keyAPIName","String","varAPIName");
        caller.type("APIPublisherAdd.tf_APIName",varAPIName);
        //Type API contest
        String varAPIContext = param_APIContext+caller.generateData("int",4);
        caller.type("APIPublisherAdd.tf_APIContext",varAPIContext);
        String varAPIVersion = param_APIVersion+caller.generateData("int",2);
        caller.type("APIPublisherAdd.tf_APIVersion",varAPIVersion);
        //Type valid image path
        //Type
        //object=APIPublisherAdd.btn_BrowseImage
        //text=@param_APIImagePath
        caller.type("APIPublisherAdd.tf_Tags",param_tagName);
        caller.fireEvent("KEY%key=\n","2000");
        //waiting for content load
        caller.pause("6000");
        //click save and verify warning
        caller.type("APIPublisherAdd.tf_URLPattern",varAPIName+"/"+varAPIContext);
        caller.click("APIPublisherAdd.chk_Post");
        caller.pause("3000");
        caller.click("APIPublisherAdd.btn_Add");
        caller.checkElementPresent("APIPublisherAdd.btn_Save",false,"");
        caller.pause("2000");
        caller.click("APIPublisherAdd.btn_Save");
        caller.pause("4000");
        //Go to implement stage
        caller.checkElementPresent("APIPublisherAdd.lnk_NextImplement",false,"");
        //waiting for content load
        caller.pause("4000");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //waiting for content load
        caller.pause("6000");
        caller.click("APIPublisherBrowse.ele_lblManagedAPI");
        //waiting for content load
        caller.pause("3000");
        caller.type("APIPublisherBrowse.tf_ProductionEndPoint",param_productionEndPoint);
        caller.type("APIPublisherBrowse.tf_SandBoxEndPoint",param_sandBoxEndPoint);
        caller.click("APIPublisherBrowse.btn_SaveManagedAPI");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_NextManage");
        //waiting for content load
        caller.pause("4000");
        //Start manage stage
        caller.click("APIPublisherAdd.dd_tireAvailabilityConfig");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherAdd.chk_tireSelectionUnlimited");
        caller.click("APIPublisherAdd.btn_SavePublish");
        //waiting for content load
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherAdd.ele_lblFinalClose",false,"");
        caller.click("APIPublisherAdd.ele_lblFinalClose");
        //APIM-(2):publish  API with subscribers  and  check whether user can delete
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //waiting for content load
        caller.pause("3000");
        lib_Common.bc_SelectServer(caller, param_TenanrOrAdmin);
        //Login to API Store
        lib_Common.bc_StoreLogin(caller, param_TenanrOrAdmin);
        //Create new Application
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_MyApplication");
        String varAppName = param_appName+caller.generateData("int",3);
        caller.type("APIStoreMyApllication.tf_ApplicationName",varAppName);
        caller.select("APIStoreMyApllication.ele_ddThrottlingTier",param_ThrottlingTier);
        caller.type("APIStoreMyApllication.tf_CallBackURL","application/x-www-form-urlencoded");
        caller.type("APIStoreMyApllication.tf_Discription","test_dec");
        caller.click("APIStoreMyApllication.btn_AddApplication");
        //waiting for content load
        caller.pause("8000");
        //Go to API window to Subscribe API to an application
        caller.click("APIStoreHome.lnk_APIs");
        //waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + varAPIName,false,"");
        caller.click("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + varAPIName);
        //waiting for content load
        caller.pause("3000");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",varAppName);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_StayOnThisPage");
        caller.checkElementPresent("APIStoreAPIs.btn_Subscribe",false,"");
        //Again navigate to store and try to delete the creted API
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"4000");
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",varAPIName);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("2000");
        //Verify API is searched successfully
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPIName,false,"");
        //waiting for content load
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_deleteAPI","APIName_PARAM:" + varAPIName);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_Yes");
        //waiting for content load
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblAPIdeleteError",false,"");
        //Go to API Store to relese the bind API from the APP
        //APIM-(3):publish API without  subscribers  and  check whether user can delete
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenanrOrAdmin);
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_MySubcription");
        //waiting for content load
        caller.pause("4000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",varAppName);
        //waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.btn_deleteAPI","param_APIName_PARAM:" + varAPIName + "_PARAM," + "Param_APIVersion_PARAM:" + varAPIVersion,false,"");
        caller.click("APIStoreMySubcription.btn_deleteAPI","param_APIName_PARAM:" + varAPIName + "_PARAM," + "Param_APIVersion_PARAM:" + varAPIVersion);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreMySubcription.btn_Yes");
        //waiting for content load
        caller.pause("2000");
        //Navigate to API Publisher to delete the API
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"4000");
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",varAPIName);
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("2000");
        //Verify API is searched successfully
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPIName,false,"");
        //waiting for content load
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_deleteAPI","APIName_PARAM:" + varAPIName);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_Yes");
        //waiting for content load
        caller.pause("5000");
        caller.checkObjectProperty("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPIName,"ELEMENTPRESENT","false",false,"");
        caller.writeToReport("End of executing APIM_2A");	
    }
    /**
     *  Business component APIM_4A.
     */
    public final static void APIM_4A(final SeleniumTestBase caller, final String param_APIName, final String param_NewVersion, final String param_publisherURL) throws Exception {
        caller.writeToReport("Start of TC APIM-4A");
        //APIM-(4):Create New Version of already exsist API
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"4000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + param_APIName);
        //create a new version
        caller.click("Browse_Overview.btn_CreateNewVersion");
        //insert a new version
        caller.type("Browse_Overview.tf_ToVersion",param_NewVersion);
        caller.click("Browse_Overview.btn_Done");
        caller.pause("2000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.checkElementPresent("APIPublisherBrowse.lnk_DuplicateAPI","param_APIName_PARAM:" + param_APIName,false,"");
        caller.writeToReport("End of TC APIM-4A");	
    }
    /**
     *  Business component APIM_5A.
     */
    public final static void APIM_5A(final SeleniumTestBase caller, final String param_APIName, final String param_alreadyExistingVersion) throws Exception {
        caller.writeToReport("Start of TC APIM-5A");
        //APIM-(5):Create Same Version of already exsist API
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + param_APIName);
        caller.click("Browse_Overview.btn_CreateNewVersion");
        caller.type("Browse_Overview.tf_ToVersion",param_alreadyExistingVersion);
        caller.click("Browse_Overview.btn_Done");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblPopupPublisherError",false,"");
        caller.click("APIPublisherBrowse.btn_Ok");
        caller.writeToReport("End of TC APIM-5A");	
    }
    /**
     *  Business component APIM_363.
     */
    /**
     *  Business component APIM_363.
     */
    public final static void APIM_363(final SeleniumTestBase caller) throws Exception {
    	
    }
    /**
     *  Business component APIM_3A.
     */
    public final static void APIM_3A(final SeleniumTestBase caller, final String param_UserName, final String param_newPassword, final String param_APIName, final String param_serverName, final String param_Version, final String param_storeURL) throws Exception {
        //APIM-(3):publish API without  subscribers  and  check whether user can delete
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + param_serverName);
        caller.pause("3000");
        if(!caller.checkElementPresent("APIStoreHome.lnk_login")){
        lib_Common.bc_LogOut_APIStore(caller, param_UserName);
        }
        lib_Common.bc_APIStoreLogin(caller, param_UserName,param_newPassword);
        caller.click("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + param_APIName);
        caller.click("APIStoreHome.lnk_MySubcription");
        lib_Common.bc_DeleteSubcription(caller, param_APIName,param_Version);	
    }
    /**
     *  Business component APIM_127.
     */
    public final static void APIM_127(final SeleniumTestBase caller, final String param_APIImagePath, final String param_APIVersion, final String param_tagName, final String param_APIName, final String param_State, final String param_NewVersion, final String param_creater, final String param_users, final String param_status, final String param_ProductionEndPont, final String param_SandBoxEndpoint) throws Exception {
        caller.writeToReport("Start of TC APIM-127");
        //APIM-127: Check whether system allows to get a copy of an api which is in blocked state
        //Create API In Prtotype
        //CreateAPI upto design Stage
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Type API Name
        String varAPINameVersioning = param_APIName+caller.generateData("int",2);
        //Store in to variable
        caller.store("keyAPINameVersioning","String",varAPINameVersioning);
        caller.type("APIPublisherAdd.tf_APIName",varAPINameVersioning);
        //Type API contest
        String APIcontest = "api"+caller.generateData("int",3);
        caller.type("APIPublisherAdd.tf_APIContext",APIcontest);
        caller.type("APIPublisherAdd.tf_APIVersion",param_APIVersion);
        //Type valid image path
        /*
        Type
         object=APIPublisherAdd.btn_BrowseImage
         text=@param_APIImagePath
        */
        //Type API tag
        String varAPITag = param_tagName+caller.generateData("int",2);
        caller.type("APIPublisherAdd.tf_Tags",varAPITag);
        caller.fireEvent("KEY%key=\n","2000");
        //waiting for content load
        caller.pause("6000");
        //click save and verify warning
        caller.doubleClick("APIPublisherAdd.btn_Save");
        //waiting for content load
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherAdd.ele_lblDefaultResourceMessage",false,"");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherAdd.btn_Yes");
        //waiting for content load
        caller.pause("7000");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //waiting for content load
        caller.pause("4000");
        lib_Common.bc_PrototypeAPI(caller);
        caller.click("APIPublisherBrowse.ele_lblManagedAPI");
        caller.type("APIPublisherBrowse.tf_ProductionEndPoint",param_ProductionEndPont);
        caller.type("APIPublisherBrowse.tf_SandBoxEndPoint",param_SandBoxEndpoint);
        caller.click("APIPublisherBrowse.btn_Save1");
        //waiting for content load
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_NextManage");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.ele_ddTierAvilability");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.chk_Gold");
        caller.click("APIPublisherBrowse.chk_Silver");
        //Wait for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.btn_SaveAndPublish");
        //Wait for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.btn_Close");
        //Wait for content load
        caller.pause("4000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + param_APIName);
        //Wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //Wait for content load
        caller.pause("2000");
        caller.checkObjectProperty("APIPublisherBrowse.ele_ddState","SELECTEDOPTION","PUBLISHED",false,"");
        //Wait for content load
        caller.pause("2000");
        caller.select("APIPublisherBrowse.ele_ddState",param_State);
        //Wait for content load
        caller.pause("2000");
        caller.click("browseLifecycle.btn_Update");
        //Wait for content load
        caller.pause("1000");
        caller.checkElementPresent("browseLifecycle.ele_lblUpdateSuccessMessage",false,"");
        caller.click("APIPublisherBrowse.lnk_Overview");
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Overview.btn_CreateNewVersion");
        //Verify Field will Expan
        caller.checkElementPresent("Browse_Overview.tf_ToVersion",false,"");
        //Wait for content load
        caller.pause("2000");
        //Type new version
        caller.type("Browse_Overview.tf_ToVersion",param_NewVersion);
        caller.click("Browse_Overview.btn_Done");
        //Wait for content load
        caller.pause("2000");
        //Verify redirected to browse page
        caller.checkElementPresent("APIPublisherHome.lnk_Browse",false,"");
        //Verify API  name with new version and creator
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + varAPINameVersioning + "_PARAM," + "param_version_PARAM:" + param_NewVersion + "_PARAM," + "param_creater_PARAM:" + param_creater,false,"");
        //Verify subscriber numbers
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_NewVersion + "_PARAM," + "param_users_PARAM:" + param_users,false,"");
        //Verify status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblAPIStatus","param_status_PARAM:" + param_status,false,"");
        //Wait for content load
        caller.pause("5000");
        caller.writeToReport("End of TC APIM-127");	
    }
    /**
     *  Business component APIM_122.
     */
    public final static void APIM_122(final SeleniumTestBase caller, final String param_stage, final String param_newVersion, final String param_creater, final String param_status, final String param_users, final String param_APIName) throws Exception {
        caller.writeToReport("Start of TC APIM-122");
        //APIM-122: Check whether system allows to get a copy of an api which is in created state
        //Retriew API Name
        lib_Common.bc_Select_LifeCycleState(caller, param_stage,param_APIName);
        lib_Common.bc_CreateNewVersion_VerifyDetails(caller, param_newVersion,param_creater,param_APIName,param_status,param_users);
        caller.writeToReport("End of TC APIM-122");	
    }
    /**
     *  Business component APIM_123.
     */
    public final static void APIM_123(final SeleniumTestBase caller, final String param_stage, final String param_newVersion, final String param_creater, final String param_APIName, final String param_status, final String param_users) throws Exception {
        caller.writeToReport("Start of TC APIM-123");
        //APIM-123: Check whether system allows to get a copy of an api which is in published state.
        lib_Common.bc_Select_LifeCycleState(caller, param_stage,param_APIName);
        lib_Common.bc_CreateNewVersion_VerifyDetails(caller, param_newVersion,param_creater,param_APIName,param_status,param_users);
        caller.writeToReport("End of TC APIM-123");	
    }
    /**
     *  Business component APIM_124.
     */
    public final static void APIM_124(final SeleniumTestBase caller, final String param_stage, final String param_newVersion, final String param_creater, final String param_APIName, final String param_status, final String param_users) throws Exception {
        caller.writeToReport("Start of TC APIM-124");
        //APIM-124: Check whether system allows to get a copy of an api which is in prototyped state
        lib_Common.bc_Select_LifeCycleState(caller, param_stage,param_APIName);
        lib_Common.bc_CreateNewVersion_VerifyDetails(caller, param_newVersion,param_creater,param_APIName,param_status,param_users);
        caller.writeToReport("End of TC APIM-124");	
    }
    /**
     *  Business component APIM_125.
     */
    public final static void APIM_125(final SeleniumTestBase caller, final String param_stage, final String param_newVersion, final String param_creater, final String param_APIName, final String param_status, final String param_users) throws Exception {
        caller.writeToReport("Start of TC APIM-125");
        //APIM-125: Check whether system allows to get a copy of an api which is in deprecated state
        lib_Common.bc_Select_LifeCycleState(caller, param_stage,param_APIName);
        lib_Common.bc_CreateNewVersion_VerifyDetails(caller, param_newVersion,param_creater,param_APIName,param_status,param_users);
        caller.writeToReport("End of TC APIM-125");	
    }
    /**
     *  Business component APIM_126.
     */
    public final static void APIM_126(final SeleniumTestBase caller, final String param_stage, final String param_newVersion, final String param_creater, final String param_APIName, final String param_status, final String param_users) throws Exception {
        caller.writeToReport("Start of TC APIM-126");
        //APIM-126: Check whether system allows to get a copy of an api which is in retired state
        lib_Common.bc_Select_LifeCycleState(caller, param_stage,param_APIName);
        lib_Common.bc_CreateNewVersion_VerifyDetails(caller, param_newVersion,param_creater,param_APIName,param_status,param_users);
        caller.writeToReport("End of TC APIM-126");	
    }
    /**
     *  Business component APIM_419.
     */
    public final static void APIM_419(final SeleniumTestBase caller, final String param_APIName, final String param_docNameOne, final String param_uploadDocLocation, final String param_summary, final String param_updateSummary, final String param_URLLink, final String param_newVersion, final String param_otherName, final String param_docNameTwo, final String param_storeURL, final String param_state, final String param_publisherURL, final String param_DownloadFilePath, final String param_APIImagePath, final String param_oldVersion, final String param_createrDomain, final String param_productionEndpoint, final String param_sandboxEndpoint, final String param_TenantOrAdmin, final String param_downImagePopup) throws Exception {
        caller.writeToReport("Start of TC APIM_419");
        //APIM-419: Check whether user can edit and change content type of an existing hot to type document.
        //-------------------------------------------------------------- Start of precondition
        //CreateAPI upto design Stage
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Type API Name
        String varAPINameEditChange = param_APIName+caller.generateData("int",3);
        caller.type("APIPublisherAdd.tf_APIName",varAPINameEditChange);
        //Store API name for furthur use
        caller.store("keyAPINameEditChange","String",varAPINameEditChange);
        //Type API contest
        String APIcontest = "api"+caller.generateData("int",3);
        caller.type("APIPublisherAdd.tf_APIContext",APIcontest);
        caller.type("APIPublisherAdd.tf_APIVersion",param_oldVersion);
        //Type valid image path
        String TagName = "tag"+caller.generateData("int",3);
        caller.type("APIPublisherAdd.tf_Tags",TagName);
        caller.pause("2000");
        caller.fireEvent("KEY%key=\n","2000");
        //waiting for content load
        caller.pause("4000");
        //click save and verify warning
        caller.click("APIPublisherAdd.btn_Save");
        //waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherAdd.ele_lblDefaultResourceMessage",false,"");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherAdd.btn_Yes");
        //waiting for content load
        caller.pause("7000");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //waiting for content load
        caller.pause("4000");
        //To Navigate to publisher homepage to change API version
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("2000");
        caller.click("APIPublisherHome.tf_APISearch");
        caller.type("APIPublisherHome.tf_APISearch",varAPINameEditChange);
        caller.pause("2000");
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //select the created old version api
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + varAPINameEditChange + "_PARAM," + "param_version_PARAM:" + param_oldVersion + "_PARAM," + "param_creater_PARAM:" + param_createrDomain);
        caller.pause("2000");
        //Upgrade API version no.
        caller.click("Browse_Overview.btn_CreateNewVersion");
        caller.click("Browse_Overview.tf_ToVersion");
        caller.type("Browse_Overview.tf_ToVersion",param_newVersion);
        caller.click("Browse_Overview.btn_Done");
        caller.pause("3000");
        caller.click("APIPublisherHome.tf_APISearch");
        caller.type("APIPublisherHome.tf_APISearch",varAPINameEditChange);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //select the created old version api
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + varAPINameEditChange + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + param_createrDomain);
        caller.pause("3000");
        //Deploy the API
        caller.click("APIPublisherBrowse.lnk_Edit");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_NextImplement");
        caller.pause("2000");
        lib_Common.bc_ImplementStage(caller, param_productionEndpoint,param_sandboxEndpoint);
        caller.click("APIPublisherBrowse.ele_ddTierAvilability");
        caller.click("APIPublisherBrowse.chk_Unlimited");
        caller.click("APIPublisherBrowse.chk_Gold");
        caller.click("APIPublisherBrowse.btn_SaveAndPublish");
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblAPIManagePopupSuccess",false,"");
        caller.click("APIPublisherBrowse.btn_Close");
        caller.pause("2000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("4000");
        //---------- End of precondition
        caller.click("APIPublisherHome.tf_APISearch");
        caller.type("APIPublisherHome.tf_APISearch",varAPINameEditChange);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + varAPINameEditChange + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIName_PARAM:" + varAPINameEditChange);
        //Wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //Wait for content load
        caller.pause("2000");
        caller.select("APIPublisherBrowse.ele_ddState",param_state);
        //Wait for content load
        caller.pause("4000");
        caller.click("browseLifecycle.btn_Update");
        //Wait for content load
        caller.pause("4000");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //genarate docName
        String varDocNameOne = param_docNameOne+"_"+caller.generateData("int",4);
        caller.pause("2000");
        //Store the Document name one
        caller.store("keyDocNameOne","String",varDocNameOne);
        caller.type("Browse_Doc.tf_DocName",varDocNameOne);
        caller.type("Browse_Doc.tf_Summary",param_summary);
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_HowTo");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_File");
        //Wait for content load
        caller.pause("2000");
        //upload document  doc name
         java.io.File fileOne = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator +param_uploadDocLocation);
        String entirePathOne = fileOne.getAbsolutePath();
        //type doc name
        caller.type("Browse_Doc.tf_BrowseFile",entirePathOne);
        caller.pause("5000");
        caller.click("Browse_Doc.btn_AddDocument");
        //Wait for content load
        caller.pause("5000");
        caller.checkElementPresent("Browse_Doc.ele_lblCreatedDocName","param_DocName_PARAM:" + varDocNameOne,false,"");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + varDocNameOne);
        //Wait for content load
        caller.pause("2000");
        //Verify summary field is editable
        caller.checkElementPresent("Browse_Doc.tf_Summary",false,"");
        //Verify source field is editable
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        //Verify source field is editable
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        //Edit summaty
        caller.type("Browse_Doc.tf_Summary",param_updateSummary);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_URL");
        //Wait for content load
        caller.pause("2000");
        caller.type("Browse_Doc.tf_URL",param_URLLink);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        //Verify whether the edited doc is still listed under the 'Docs' tab of the API
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + varDocNameOne,false,"");
        //Wait for content load
        caller.pause("3000");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_TenantOrAdmin);
        //Wait for content load
        caller.pause("5000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + varAPINameEditChange + "_PARAM," + "param_version_PARAM:" + param_newVersion);
        //Wait for content load
        caller.pause("4000");
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.checkElementPresent("APIStoreDocumentation.lnk_HowTo",false,"");
        //Wait for content load
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_HowTo");
        //Wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + varDocNameOne,false,"");
        //Wait for content load
        caller.pause("4000");
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentSummary","param_docSummery_PARAM:" + param_updateSummary,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + varDocNameOne + "_PARAM," + "param_URLLink_PARAM:" + param_URLLink,false,"");
        //Wait for content load
        caller.pause("5000");
        //Navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"4000");
        //Wait for content load
        caller.pause("5000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + varAPINameEditChange + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIName_PARAM:" + varAPINameEditChange);
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + varDocNameOne);
        //Wait for content load
        caller.pause("5000");
        caller.click("Browse_Doc.rdo_Inline");
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + varDocNameOne,false,"");
        //Wait for content load
        caller.pause("3000");
        //navigate to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //Wait for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + varAPINameEditChange + "_PARAM," + "param_version_PARAM:" + param_newVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        //Wait for content load
        caller.pause("2000");
        caller.click("APIStoreDocumentation.lnk_HowTo");
        caller.checkElementPresent("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + varDocNameOne,false,"");
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentSummary","param_docSummery_PARAM:" + param_updateSummary,false,"");
        //navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"4000");
        //Wait for content load
        caller.pause("5000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + varAPINameEditChange + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIName_PARAM:" + varAPINameEditChange);
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + varDocNameOne);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_SampleAndSDK");
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_File");
        //upload document  doc name
         java.io.File fileTwo = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator +param_uploadDocLocation);
        String entirePathTwo = fileTwo.getAbsolutePath();
        //type doc name
        caller.type("Browse_Doc.tf_BrowseFile",entirePathTwo);
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        //Wait for content load
        caller.pause("6000");
        caller.checkElementPresent("Browse_Doc.ele_lblSamples","param_docName_PARAM:" + varDocNameOne,false,"");
        //Wait for content load
        caller.pause("3000");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //Wait for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + varAPINameEditChange + "_PARAM," + "param_version_PARAM:" + param_newVersion);
        //Wait for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_Documentations");
        //Wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreDocumentation.lnk_Samples",false,"");
        caller.click("APIStoreDocumentation.lnk_Samples");
        //Wait for content load
        caller.pause("2000");
        caller.pause("2000");
        caller.checkElementPresent("APIStoreDocumentation.lnk_Download","param_docName_PARAM:" + varDocNameOne,false,"");
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentSummary","param_docSummery_PARAM:" + param_updateSummary,false,"");
        caller.click("APIStoreDocumentation.lnk_Download","param_docName_PARAM:" + varDocNameOne);
        //wait for download the file
        caller.pause("3000");
        caller.pause("2000");
        //Download image verification for firefox browser
        String downImagePopup1 = param_downImagePopup;
        if(caller.checkImagePresent(downImagePopup1,false)){
        caller.fireEvent("KEY%key=alt+s","2000");
        caller.fireEvent("KEY%key=alt+a","2000");
        caller.fireEvent("KEY%key=\n","1000");
        }
        //Wait for content load
        caller.pause("8000");
        caller.checkFileInfo(param_DownloadFilePath,"EXIST",false,"");
        //Wait for content load
        caller.pause("5000");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"4000");
        //Wait for content load
        caller.pause("5000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + varAPINameEditChange + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIName_PARAM:" + varAPINameEditChange);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + varDocNameOne);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_PublicForum");
        //Wait for content load
        caller.pause("2000");
        /*
        Click
         object=Browse_Doc.rdo_URL
        */
        caller.type("Browse_Doc.tf_URL",param_URLLink);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        caller.checkElementPresent("Browse_Doc.ele_lblPublicForum","param_docName_PARAM:" + varDocNameOne,false,"");
        //Wait for content load
        caller.pause("3000");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //Wait for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + varAPINameEditChange + "_PARAM," + "param_version_PARAM:" + param_newVersion);
        //Wait for content load
        caller.pause("5000");
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.click("APIStoreDocumentation.lnk_PublicForum");
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentSummary","param_docSummery_PARAM:" + param_updateSummary,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + varDocNameOne + "_PARAM," + "param_URLLink_PARAM:" + param_URLLink,false,"");
        //Wait for content load
        caller.pause("2000");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"4000");
        //Wait for content load
        caller.pause("5000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + varAPINameEditChange + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIName_PARAM:" + varAPINameEditChange);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + varDocNameOne);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_Other");
        //Wait for content load
        caller.pause("2000");
        caller.type("Browse_Doc.tf_Other",param_otherName);
        caller.click("Browse_Doc.rdo_Inline");
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        //Wait for content load
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lblOther","param_docName_PARAM:" + varDocNameOne,false,"");
        //Wait for content load
        caller.pause("3000");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //Wait for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + varAPINameEditChange + "_PARAM," + "param_version_PARAM:" + param_newVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        //Wait for content load
        caller.pause("2000");
        caller.click("APIStoreDocumentation.lnk_Other");
        //Wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentSummary","param_docSummery_PARAM:" + param_updateSummary,false,"");
        //Wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + varDocNameOne,false,"");
        //Wait for content load
        caller.pause("2000");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"4000");
        //Wait for content load
        caller.pause("5000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + varAPINameEditChange + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIName_PARAM:" + varAPINameEditChange);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_AddNewDocument");
        //Wait for content load
        caller.pause("2000");
        //genarate docName
        String varDocNameTwo = param_docNameTwo+"_"+caller.generateData("int",4);
        //Store doc name two
        caller.store("keyDocNameTwo","String",varDocNameTwo);
        caller.type("Browse_Doc.tf_DocName",varDocNameTwo);
        //Wait for content load
        caller.pause("2000");
        caller.type("Browse_Doc.tf_Summary",param_summary);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_HowTo");
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_File");
        //Wait for content load
        caller.pause("2000");
        //upload document  doc name
         java.io.File fileThree = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator +param_uploadDocLocation);
        String entirePathThree = fileThree.getAbsolutePath();
        //type doc name
        caller.type("Browse_Doc.tf_BrowseFile",entirePathThree);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.checkElementPresent("Browse_Doc.ele_lblCreatedDocName","param_DocName_PARAM:" + varDocNameTwo,false,"");
        //Wait for content load
        caller.pause("3000");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //Wait for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + varAPINameEditChange + "_PARAM," + "param_version_PARAM:" + param_newVersion);
        //Wait for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_Documentations");
        //Wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreDocumentation.lnk_HowTo",false,"");
        //Wait for content load
        caller.pause("2000");
        caller.click("APIStoreDocumentation.lnk_HowTo");
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + varDocNameTwo,false,"");
        //Wait for content load
        caller.pause("2000");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"4000");
        //Wait for content load
        caller.pause("5000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + varAPINameEditChange + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIName_PARAM:" + varAPINameEditChange);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_Delete","param_DocName_PARAM:" + varDocNameTwo);
        //Waiting for content to load
        caller.pause("2000");
        caller.click("APIPublisherAdd.btn_Yes");
        //Waiting for content to load
        caller.pause("5000");
        //verify doc is deleted
        if(!caller.checkElementPresent("Browse_Doc.ele_lblCreatedDocName","param_DocName_PARAM:" + varDocNameTwo)){
        caller.writeToReport("Doc is deleted");
        } else {
        caller.writeToReport("Doc is  not deleted");
        }
        //Wait for content load
        caller.pause("3000");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //Wait for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + varAPINameEditChange + "_PARAM," + "param_version_PARAM:" + param_newVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        //Verify doc is deleted
        if(!caller.checkElementPresent("APIStoreDocumentation.lnk_HowTo")){
        caller.writeToReport("Doc is deleted");
        } else {
        caller.writeToReport("Doc is  not deleted");
        }
        caller.writeToReport("End of TC APIM_419");	
    }
    /**
     *  Business component APIM_418.
     */
    public final static void APIM_418(final SeleniumTestBase caller, final String param_DocNameOne, final String param_summaryNew, final String param_NewURL, final String param_APIName, final String param_Other_Name, final String param_newVersion, final String param_storeURL, final String param_publisherURL, final String param_TenantOrAdmin) throws Exception {
        caller.writeToReport("Start of TC APIM_418");
        //APIM-418: Check whether user can edit existing 'other' type docs which has URL content type.
        //navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"4000");
        //Wait for content load
        caller.pause("5000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIName_PARAM:" + param_APIName);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + param_DocNameOne);
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_URL");
        //Wait for content load
        caller.pause("2000");
        caller.type("Browse_Doc.tf_URL",param_NewURL);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        //Wait for content load
        caller.pause("5000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + param_DocNameOne);
        //verify summery,type,source
        caller.checkElementPresent("Browse_Doc.tf_Summary",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        caller.type("Browse_Doc.tf_Summary",param_summaryNew);
        //Wait for content load
        caller.pause("2000");
        caller.type("Browse_Doc.tf_URL",param_NewURL);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        caller.checkElementPresent("Browse_Doc.ele_lblOther","param_docName_PARAM:" + param_DocNameOne,false,"");
        caller.pause("5000");
        //Wait for content load
        caller.pause("3000");
        //navigate to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //Wait for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion);
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_Documentations");
        //Wait for content load
        caller.pause("2000");
        caller.click("APIStoreDocumentation.lnk_Other");
        //Wait for content load
        caller.pause("2000");
        //verify the new summery and new url
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentSummary","param_docSummery_PARAM:" + param_summaryNew,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + param_DocNameOne + "_PARAM," + "param_URLLink_PARAM:" + param_NewURL,false,"");
        caller.writeToReport("End of TC APIM_418");	
    }
    /**
     *  Business component APIM_417.
     */
    public final static void APIM_417(final SeleniumTestBase caller, final String param_publisherURL, final String param_DocNameOne, final String param_URL, final String param_summaryNew, final String param_NewURL, final String param_APIName, final String param_newVersion, final String param_storeURL, final String param_TenantOrAdmin) throws Exception {
        caller.writeToReport("Start of TC APIM_417");
        //APIM-417: Check whether user can edit existing 'Support forum' type docs which has URL content type.
        //navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"4000");
        //Wait for content load
        caller.pause("5000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIName_PARAM:" + param_APIName);
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + param_DocNameOne);
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_SupportForum");
        //Wait for content load
        caller.pause("4000");
        caller.type("Browse_Doc.tf_URL",param_URL);
        //Wait for content load
        caller.pause("4000");
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        caller.pause("2000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + param_DocNameOne);
        //Wait for content load
        caller.pause("2000");
        //verify summery,type,source
        caller.checkElementPresent("Browse_Doc.tf_Summary",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        caller.type("Browse_Doc.tf_Summary",param_summaryNew);
        //Wait for content load
        caller.pause("2000");
        caller.type("Browse_Doc.tf_URL",param_NewURL);
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        //Wait for content load
        caller.pause("2000");
        //verify support forum
        caller.checkElementPresent("Browse_Doc.ele_SupportForum","param_docName_PARAM:" + param_DocNameOne,false,"");
        //Wait for content load
        caller.pause("3000");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //Wait for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion);
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.pause("2000");
        caller.click("APIStoreDocumentation.lnk_SupportForum");
        //Wait for content load
        caller.pause("2000");
        //verify  url link and document summery
        caller.checkElementPresent("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + param_DocNameOne + "_PARAM," + "param_URLLink_PARAM:" + param_NewURL,false,"");
        caller.checkElementPresent("APIStoreDocumentation.ele_lblDocumentSummary","param_docSummery_PARAM:" + param_summaryNew,false,"");
        caller.writeToReport("End of TC APIM_417");	
    }
    /**
     *  Business component APIM_416.
     */
    public final static void APIM_416(final SeleniumTestBase caller, final String param_DocNameOne, final String param_URL, final String param_APIName, final String param_newVersion, final String param_summaryNew, final String param_NewURL, final String param_publisherURL, final String param_storeURL, final String param_TenantOrAdmin) throws Exception {
        caller.writeToReport("Start of TC APIM_416");
        //APIM-416: Check whether user can edit existing 'Public forum' type docs which has URL content type.
        //navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"4000");
        //Wait for content load
        caller.pause("5000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIName_PARAM:" + param_APIName);
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + param_DocNameOne);
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_PublicForum");
        //Wait for content load
        caller.pause("4000");
        caller.type("Browse_Doc.tf_URL",param_URL);
        //Wait for content load
        caller.pause("4000");
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + param_DocNameOne);
        //verify summery,type,source
        caller.checkElementPresent("Browse_Doc.tf_Summary",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        caller.type("Browse_Doc.tf_Summary",param_summaryNew);
        caller.type("Browse_Doc.tf_URL",param_NewURL);
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        //Wait for content load
        caller.pause("2000");
        //verify public forum
        caller.checkElementPresent("Browse_Doc.ele_lblPublicForum","param_docName_PARAM:" + param_DocNameOne,false,"");
        //Wait for content load
        caller.pause("3000");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //Wait for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion);
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.pause("2000");
        caller.click("APIStoreDocumentation.lnk_PublicForum");
        //verify url link and document summery
        caller.checkElementPresent("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + param_DocNameOne + "_PARAM," + "param_URLLink_PARAM:" + param_NewURL,false,"");
        caller.checkElementPresent("APIStoreDocumentation.ele_lblDocumentSummary","param_docSummery_PARAM:" + param_summaryNew,false,"");
        caller.writeToReport("End of TC APIM_416");	
    }
    /**
     *  Business component APIM_415.
     */
    public final static void APIM_415(final SeleniumTestBase caller, final String param_DocNameOne, final String param_URL, final String param_summaryNew, final String param_NewURL, final String param_newVersion, final String param_APIName, final String param_publisherURL, final String param_storeURL, final String param_TenantOrAdmin) throws Exception {
        caller.writeToReport("Start of TC APIM_415");
        //APIM-415: Check whether user can edit existing 'Samples & SDK' type docs which has URL content type.
        //navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"4000");
        //Wait for content load
        caller.pause("5000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIName_PARAM:" + param_APIName);
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + param_DocNameOne);
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_SampleAndSDK");
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_URL");
        //Wait for content load
        caller.pause("2000");
        caller.type("Browse_Doc.tf_URL",param_URL);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + param_DocNameOne);
        //Wait for content load
        caller.pause("2000");
        //verify summery,type and source
        caller.checkElementPresent("Browse_Doc.tf_Summary",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        caller.type("Browse_Doc.tf_Summary",param_summaryNew);
        //Wait for content load
        caller.pause("2000");
        caller.type("Browse_Doc.tf_URL",param_NewURL);
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        //Wait for content load
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lblSamples","param_docName_PARAM:" + param_DocNameOne,false,"");
        //Wait for content load
        caller.pause("3000");
        //navigate to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //Wait for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion);
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.pause("2000");
        caller.click("APIStoreDocumentation.lnk_Samples");
        //verify document summery and url link
        caller.checkElementPresent("APIStoreDocumentation.ele_lblDocumentSummary","param_docSummery_PARAM:" + param_summaryNew,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + param_DocNameOne + "_PARAM," + "param_URLLink_PARAM:" + param_NewURL,false,"");
        caller.writeToReport("End of TC APIM_415");	
    }
    /**
     *  Business component APIM_413.
     */
    public final static void APIM_413(final SeleniumTestBase caller, final String param_other_Name, final String param_DocNameOne, final String param_summaryNew, final String param_editContent, final String param_APIName, final String param_newVersion, final String param_storeURL, final String param_publisherURL, final String param_TenantOrAdmin) throws Exception {
        caller.writeToReport("Start of TC APIM_413");
        //APIM-413: Check whether user can edit existing 'other' type docs which has in-line content type.
        //navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"4000");
        //Wait for content load
        caller.pause("5000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIName_PARAM:" + param_APIName);
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + param_DocNameOne);
        caller.click("Browse_Doc.rdo_Other");
        //Wait for content load
        caller.pause("5000");
        caller.type("Browse_Doc.tf_Other",param_other_Name);
        //Wait for content load
        caller.pause("3000");
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        //Wait for content load
        caller.pause("3000");
        //verify lable other
        caller.checkElementPresent("Browse_Doc.ele_lblOther","param_docName_PARAM:" + param_DocNameOne,false,"");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + param_DocNameOne);
        caller.selectWindow("Browse_Doc.newWindow1");
        caller.pause("4000");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + param_newVersion,false,"");
        caller.selectFrame("Browse_Doc.frame1");
        caller.pause("4000");
        caller.click("Browse_Doc.tf_EditContent1");
        caller.pause("500");
        caller.type("Browse_Doc.tf_EditContent1",param_editContent);
        caller.pause("4000");
        caller.fireEvent("KEY%key=\t|key=\t|key=\n","5000");
        caller.switchUser("default");
        //navigate to default window
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("5000");
        //verify lable other
        caller.checkElementPresent("Browse_Doc.ele_lblOther","param_docName_PARAM:" + param_DocNameOne,false,"");
        //Wait for content load
        caller.pause("3000");
        //navigate to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //Wait for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion);
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.pause("2000");
        caller.click("APIStoreDocumentation.lnk_Other");
        //Wait for content load
        caller.pause("1000");
        //verify document name, view content and document summery
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + param_DocNameOne,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + param_DocNameOne,false,"");
        //Verify summary
        caller.checkElementPresent("APIStoreDocumentation.ele_lblDocumentSummary","param_docSummery_PARAM:" + param_summaryNew,false,"");
        caller.writeToReport("End of TC APIM_413");	
    }
    /**
     *  Business component APIM_412.
     */
    public final static void APIM_412(final SeleniumTestBase caller, final String param_DocNameOne, final String param_editContent, final String param_APIName, final String param_newVersion, final String param_publisherURL, final String param_storeURL, final String param_summaryNew, final String param_TenantOrAdmin) throws Exception {
        caller.writeToReport("Start of TC APIM_412");
        //APIM-412: Check whether user can edit existing 'samples & SDK' type docs which has in-line content type.
        //navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"4000");
        //Wait for content load
        caller.pause("5000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIName_PARAM:" + param_APIName);
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + param_DocNameOne);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_SampleAndSDK");
        //Wait for content load
        caller.pause("2000");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        //Wait for content load
        caller.pause("2000");
        //verify lable samples
        caller.checkElementPresent("Browse_Doc.ele_lblSamples","param_docName_PARAM:" + param_DocNameOne,false,"");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + param_DocNameOne);
        caller.selectWindow("Browse_Doc.newWindow1");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + param_newVersion,false,"");
        caller.selectFrame("Browse_Doc.frame1");
        caller.pause("4000");
        caller.click("Browse_Doc.tf_EditContent1");
        caller.pause("500");
        caller.type("Browse_Doc.tf_EditContent1",param_editContent);
        caller.pause("4000");
        caller.fireEvent("KEY%key=\t|key=\t|key=\n","5000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("2000");
        //verify lable samples
        caller.checkElementPresent("Browse_Doc.ele_lblSamples","param_docName_PARAM:" + param_DocNameOne,false,"");
        //Wait for content load
        caller.pause("3000");
        //navigate to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //Wait for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.checkElementPresent("APIStoreDocumentation.lnk_Samples",false,"");
        caller.click("APIStoreDocumentation.lnk_Samples");
        caller.pause("2000");
        //verify document name, view content and socument summery
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + param_DocNameOne,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + param_DocNameOne,false,"");
        //Verify summary
        caller.checkElementPresent("APIStoreDocumentation.ele_lblDocumentSummary","param_docSummery_PARAM:" + param_summaryNew,false,"");
        caller.writeToReport("End of TC APIM_412");	
    }
    /**
     *  Business component APIM_411.
     */
    public final static void APIM_411(final SeleniumTestBase caller, final String param_DocNameOne, final String param_editContent, final String param_APIName, final String param_newVersion, final String param_publisherURL, final String param_storeURL, final String param_summaryNew, final String param_TenantOrAdmin) throws Exception {
        caller.writeToReport("Start of TC APIM_411");
        //APIM-411: Check whether user can edit existing how to type docs which has in-line content type.
        //navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"4000");
        //Wait for content load
        caller.pause("5000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIName_PARAM:" + param_APIName);
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + param_DocNameOne);
        caller.click("Browse_Doc.rdo_HowTo");
        //Wait for content load
        caller.pause("2000");
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        //verify lable howto
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + param_DocNameOne,false,"");
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + param_DocNameOne);
        //Wait for content load
        caller.pause("2000");
        caller.selectWindow("Browse_Doc.newWindow1");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + param_newVersion,false,"");
        caller.selectFrame("Browse_Doc.frame1");
        caller.pause("4000");
        caller.click("Browse_Doc.tf_EditContent1");
        caller.pause("500");
        caller.type("Browse_Doc.tf_EditContent1",param_editContent);
        caller.pause("4000");
        caller.fireEvent("KEY%key=\t|key=\t|key=\n","5000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("2000");
        //Verify doc is under doc tab and doc name and type
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + param_DocNameOne,false,"");
        //Wait for content load
        caller.pause("3000");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //Wait for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        //verify link how to
        caller.checkElementPresent("APIStoreDocumentation.lnk_HowTo",false,"");
        caller.click("APIStoreDocumentation.lnk_HowTo");
        //Wait for content load
        caller.pause("1000");
        //verify document name, document summery and view content
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + param_DocNameOne,false,"");
        //Verify summary
        caller.checkElementPresent("APIStoreDocumentation.ele_lblDocumentSummary","param_docSummery_PARAM:" + param_summaryNew,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + param_DocNameOne,false,"");
        caller.writeToReport("End of TC APIM_411");	
    }
    /**
     *  Business component APIM_414.
     */
    public final static void APIM_414(final SeleniumTestBase caller, final String param_URL, final String param_DocNameOne, final String param_summaryNew, final String param_NewURL, final String param_APIName, final String param_newVersion, final String param_publisherURL, final String param_storeURL, final String param_TenantOrAdmin) throws Exception {
        caller.writeToReport("Start of TC APIM_414");
        //APIM-414: Check whether user can edit existing 'how to' type docs which has URL content type.
        //navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"4000");
        //Wait for content load
        caller.pause("5000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIName_PARAM:" + param_APIName);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + param_DocNameOne);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_HowTo");
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_URL");
        caller.pause("1000");
        caller.type("Browse_Doc.tf_URL",param_URL);
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        //Wait for content load
        caller.pause("2000");
        //verify lable how to
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + param_DocNameOne,false,"");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + param_DocNameOne);
        //Wait for content load
        caller.pause("2000");
        caller.type("Browse_Doc.tf_Summary",param_summaryNew);
        //Wait for content load
        caller.pause("2000");
        caller.type("Browse_Doc.tf_URL",param_NewURL);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        //Wait for content load
        caller.pause("3000");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //Wait for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion);
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.pause("2000");
        caller.click("APIStoreDocumentation.lnk_HowTo");
        //verify link url and document summery
        caller.checkElementPresent("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + param_DocNameOne + "_PARAM," + "param_URLLink_PARAM:" + param_NewURL,false,"");
        caller.checkElementPresent("APIStoreDocumentation.ele_lblDocumentSummary","param_docSummery_PARAM:" + param_summaryNew,false,"");
        caller.writeToReport("End of TC APIM_414");	
    }
    /**
     *  Business component APIM_159.
     */
    /**
     *  Business component APIM_159.
     */
    public final static void APIM_159(final SeleniumTestBase caller) throws Exception {
    	
    }
    /**
     *  Business component APIM_128.
     */
    public final static void APIM_128(final SeleniumTestBase caller, final String param_APIName, final String param_APIVersion, final String param_publisherURL) throws Exception {
        caller.writeToReport("Start of APIM_128");
        //APIM-128: Check whether system validate for existing versions of the same api
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"4000");
        //Wait for content load
        caller.pause("5000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + param_APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Overview.btn_CreateNewVersion");
        caller.checkElementPresent("Browse_Overview.tf_ToVersion",false,"");
        caller.type("Browse_Overview.tf_ToVersion",param_APIVersion);
        caller.click("Browse_Overview.btn_Done");
        caller.checkElementPresent("Browse_Overview.ele_lblDuplicateVersionErrorMessage","param_APIVersion_PARAM:" + param_APIVersion,false,"");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Overview.btn_Ok");
        //Wait for content load
        caller.pause("3000");
        caller.writeToReport("End of APIM_128");	
    }
    /**
     *  Business component APIM_138.
     */
    /**
     *  Business component APIM_138.
     */
    public final static void APIM_138(final SeleniumTestBase caller) throws Exception {
    	
    }
    /**
     *  Business component APIM_131.
     */
    public final static void APIM_131(final SeleniumTestBase caller, final String param_APIName) throws Exception {
        caller.writeToReport("Start of TC APIM-131");
        //APIM-131: Check whether cancel button on add new version section is working.
        caller.click("APIPublisherHome.lnk_Browse");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + param_APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Overview.btn_CreateNewVersion");
        caller.checkElementPresent("Browse_Overview.tf_ToVersion",false,"");
        caller.click("Browse_Overview.btn_CancelNewVersion");
        caller.checkElementPresent("Browse_Overview.btn_CreateNewVersion",false,"");
        caller.writeToReport("End of TC APIM-131");	
    }
    /**
     *  Business component APIM_137.
     */
    /**
     *  Business component APIM_137.
     */
    public final static void APIM_137(final SeleniumTestBase caller) throws Exception {
    	
    }
    /**
     *  Business component APIM_175.
     */
    public final static void APIM_175(final SeleniumTestBase caller, final String param_ProductionEndPontJaxRS, final String param_URLPattern, final String param_verbMethodGET, final String param_verbMethodPOST, final String param_verbMethodPUT, final String param_verbMethodDELETE, final String param_User, final String param_publisherURL, final String param_AdminUserAdmin, final String param_AdminPassword, final String param_scopeKeyOne, final String param_tag, final String param_scopeNameOne, final String param_scopeKeyTwo, final String param_scopeNameTwo, final String param_scopeKeyThree, final String param_scopeNameThree, final String param_scopeKeyFour, final String param_scopeNameFour, final String param_APIName, final String paramAPIContest, final String param_TenantOrAdmin) throws Exception {
        //APIM-175: Check whether user can add different scopes for different resources.
        caller.writeToReport("Start of executing APIM_175");
        //CreateAPI up to design Stage
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Type API Name
        String varAPIName = param_APIName+caller.generateData("int",2);
        caller.type("APIPublisherAdd.tf_APIName",varAPIName);
        caller.store("keyAPIName","String",varAPIName);
        //Type API contest
        String APIcontest = paramAPIContest+caller.generateData("int",2);
        caller.type("APIPublisherAdd.tf_APIContext",APIcontest);
        String APIversion = "v1.0."+caller.generateData("int",1);
        caller.type("APIPublisherAdd.tf_APIVersion",APIversion);
        //Type valid image path
        String APItag = param_tag+caller.generateData("int",3);
        caller.type("APIPublisherAdd.tf_Tags",APItag);
        //waiting for content load
        caller.pause("2000");
        caller.fireEvent("KEY%key=\n","2000");
        caller.type("APIPublisherAdd.tf_URLPattern",param_URLPattern);
        caller.click("APIPublisherBrowse.chk_verbMethod","verb_PARAM:" + param_verbMethodGET);
        caller.click("APIPublisherBrowse.chk_verbMethod","verb_PARAM:" + param_verbMethodPOST);
        caller.click("APIPublisherBrowse.chk_verbMethod","verb_PARAM:" + param_verbMethodPUT);
        caller.click("APIPublisherBrowse.chk_verbMethod","verb_PARAM:" + param_verbMethodDELETE);
        caller.click("APIPublisherAdd.btn_Save");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Yes");
        //waiting for content load
        caller.pause("5000");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //API Manage Section
        lib_Common.bc_ManagedAPI(caller, varAPIName,param_ProductionEndPontJaxRS,"");
        lib_Common.bc_SelectTiers(caller);
        //waiting for content load
        caller.pause("500");
        String varScopeKeyOne = param_scopeKeyOne+caller.generateData("int",3);
        String varScopeNameOne = param_scopeNameOne+caller.generateData("int",3);
        caller.store("keyScopeKeyOne","String",varScopeKeyOne);
        caller.store("keyScopeOne","String",varScopeNameOne);
        //Add Scope Section
        lib_Common.bc_AddScopes(caller, varScopeKeyOne,varScopeNameOne);
        //waiting for content load
        caller.pause("2000");
        String varScopeKeyTwo = param_scopeKeyTwo+caller.generateData("int",3);
        String varScopeNameTwo = param_scopeNameTwo+caller.generateData("int",3);
        caller.store("keyScopeKeyTwo","String",varScopeKeyTwo);
        caller.store("keyScopeTwo","String",varScopeNameTwo);
        lib_Common.bc_AddScopes(caller, varScopeKeyTwo,varScopeNameTwo);
        //waiting for content load
        caller.pause("2000");
        String varScopeKeyThree = param_scopeKeyThree+caller.generateData("int",3);
        String varScopeNameThree = param_scopeNameThree+caller.generateData("int",3);
        caller.store("keyScopeThree","String",varScopeNameThree);
        lib_Common.bc_AddScopes(caller, varScopeKeyThree,varScopeNameThree);
        caller.pause("2000");
        String varScopeKeyFour = param_scopeKeyFour+caller.generateData("int",3);
        String varScopeNameFour = param_scopeNameFour+caller.generateData("int",3);
        caller.store("keyScopeFour","String",varScopeNameFour);
        lib_Common.bc_AddScopes(caller, varScopeKeyFour,varScopeNameFour);
        //waiting for content load
        caller.pause("2000");
        //Selecting already added Scope
        lib_Common.bc_SelectScope(caller, param_verbMethodGET,varScopeNameOne);
        //waiting for content load
        caller.pause("500");
        lib_Common.bc_SelectScope(caller, param_verbMethodPOST,varScopeNameTwo);
        //waiting for content load
        caller.pause("500");
        lib_Common.bc_SelectScope(caller, param_verbMethodPUT,varScopeNameThree);
        caller.pause("500");
        lib_Common.bc_SelectScope(caller, param_verbMethodDELETE,varScopeNameFour);
        //waiting for content load
        caller.pause("500");
        caller.click("APIPublisherBrowse.btn_SaveAndPublish");
        //waiting for content load
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_Close");
        //waiting for content load
        caller.pause("4000");
        //Log out from current user
        caller.click("APIPublisherLogOut.btn_SignOut");
        caller.click("APIPublisherLogOut.btn_LogOut");
        if(param_TenantOrAdmin.equals("Tenant")){
        String varPublisherUserName = caller.retrieveString("keyTenantOneAdminUser");
        //Type username
        caller.type("APIPublisherLogin.tf_UserName",varPublisherUserName);
        } else {
        //Type username
        caller.type("APIPublisherLogin.tf_UserName",param_AdminUserAdmin);
        }
        caller.pause("2000");
        if(param_TenantOrAdmin.equals("Tenant")){
        String varPublisherPassword = caller.retrieveString("keyTenantOneAdminUserPassword");
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",varPublisherPassword);
        } else {
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",param_AdminPassword);
        }
        //clock login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",varAPIName);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("1000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPIName);
        caller.pause("1000");
        caller.click("APIPublisherBrowse.lnk_Edit");
        caller.pause("1000");
        caller.click("APIPublisherBrowse.btn_Manage");
        caller.pause("1000");
        //Verify Added Scopes
        caller.checkElementPresent("Scopes.ele_lblAddedScopes","param_ScopeKey_PARAM:" + varScopeKeyOne,false,"");
        caller.pause("1000");
        //Verify Added Scopes
        caller.checkElementPresent("Scopes.ele_lblAddedScopes","param_ScopeKey_PARAM:" + varScopeKeyTwo,false,"");
        caller.pause("1000");
        //Verify Added Scopes
        caller.checkElementPresent("Scopes.ele_lblAddedScopes","param_ScopeKey_PARAM:" + varScopeKeyThree,false,"");
        caller.pause("1000");
        //Verify Added Scopes
        caller.checkElementPresent("Scopes.ele_lblAddedScopes","param_ScopeKey_PARAM:" + varScopeKeyFour,false,"");
        caller.writeToReport("End of Execution APIM_175");	
    }
    /**
     *  Business component APIM_170.
     */
    public final static void APIM_170(final SeleniumTestBase caller, final String param_InvalidKey, final String param_ScopeDescription, final String param_publisherURL, final String param_TenantOrAdmin) throws Exception {
        //APIM-170: User should get validation message for special characters.
        caller.writeToReport("Start of executing APIM_170");
        //Log out from user
        caller.click("APIPublisherLogOut.btn_SignOut");
        caller.click("APIPublisherLogOut.btn_LogOut");
        //Login to publisher
        lib_Common.bc_PublisherLogin(caller, param_publisherURL,param_TenantOrAdmin);
        caller.click("APIPublisherHome.lnk_Browse");
        String varAPINameOne = caller.retrieveString("keyAPIName");
        //Navigate to an existing API
        caller.type("APIPublisherHome.tf_APISearch",varAPINameOne);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("1000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameOne);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("APIPublisherBrowse.lnk_Edit");
        caller.click("APIPublisherBrowse.btn_Manage");
        caller.click("Scopes.btn_AddScope");
        caller.checkElementPresent("Scopes.tf_ScopeKey",false,"");
        caller.pause("2000");
        String varScopeKeyOne2 = caller.retrieveString("keyScopeKeyOne");
        //Add Different Scope keys and Names
        caller.type("Scopes.tf_ScopeKey",varScopeKeyOne2);
        caller.pause("2000");
        String varScopeNameOne3 = caller.retrieveString("keyScopeOne");
        caller.type("Scopes.tf_ScopeName",varScopeNameOne3);
        caller.type("Scopes.tf_Description",param_ScopeDescription);
        caller.pause("4000");
        caller.click("Scopes.btn_SubmitScope");
        caller.pause("2000");
        //Verify Already Exist Error
        caller.checkElementPresent("Scopes.ele_lblAlreadyExistError","scopeKey_PARAM:" + varScopeKeyOne2,false,"");
        caller.pause("4000");
        caller.click("Scopes.btn_OK");
        caller.pause("2000");
        caller.pause("4000");
        caller.click("Scopes.btn_Close");
        caller.pause("4000");
        caller.writeToReport("End of Execution APIM_170");	
    }
    /**
     *  Business component APIM_171.
     */
    public final static void APIM_171(final SeleniumTestBase caller, final String param_ScopeKeySix, final String param_ScopeNameSix) throws Exception {
        //APIM-171: Check whether user gets an validation message when trying to add scopes with duplicate key.
        caller.writeToReport("Start of executing APIM_171");
        caller.pause("3000");
        caller.click("APIPublisherHome.lnk_Browse");
        String varAPINameOne = caller.retrieveString("keyAPIName");
        //Navigate to API edit Section
        lib_Common.bc_EditAPI(caller, varAPINameOne);
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_NextImplement");
        caller.pause("3000");
        caller.click("APIPublisherBrowse.ele_lblManagedAPI");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_NextManage");
        caller.pause("2000");
        String varScopeKeySix = param_ScopeKeySix+caller.generateData("int",3);
        String varScopeNameSix = param_ScopeNameSix+caller.generateData("int",3);
        caller.pause("1000");
        //Adding a Same Scope Key and Name to Verify Already Exist Error
        caller.click("Scopes.btn_AddScope");
        caller.pause("4000");
        caller.type("Scopes.tf_ScopeKey",varScopeKeySix);
        caller.type("Scopes.tf_ScopeName",varScopeNameSix);
        caller.pause("2000");
        caller.click("Scopes.btn_SubmitScope");
        caller.pause("1000");
        caller.click("Scopes.btn_AddScope");
        caller.pause("4000");
        caller.type("Scopes.tf_ScopeKey",varScopeKeySix);
        caller.type("Scopes.tf_ScopeName",varScopeNameSix);
        caller.pause("2000");
        caller.click("Scopes.btn_SubmitScope");
        caller.pause("1000");
        caller.checkElementPresent("Scopes.ele_lblAlreadyExistError","scopeKey_PARAM:" + varScopeKeySix,false,"");
        caller.pause("4000");
        caller.click("Scopes.btn_OK");
        caller.pause("3000");
        caller.writeToReport("endTestCase");
        caller.writeToReport("End of Execution APIM_171");	
    }
    /**
     *  Business component APIM_349.
     */
    /**
     *  Business component APIM_349.
     */
    public final static void APIM_349(final SeleniumTestBase caller) throws Exception {
        //APIM-349: User should not be create to add a document without document name
        caller.writeToReport("Start of APIM_349");
        caller.click("APIPublisherHome.lnk_Browse");
        //Retrieve the  stored API name
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Click on add new document
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.checkElementPresent("Browse_Doc.tf_DocName",false,"");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.checkElementPresent("Browse_Doc.ele_lblNameRequiredWarningMessage",false,"");
        caller.writeToReport("End of APIM_349");	
    }
    /**
     *  Business component APIM_173.
     */
    /**
     *  Business component APIM_173.
     */
    public final static void APIM_173(final SeleniumTestBase caller) throws Exception {
        //APIM-173: Check whether user can exit from the define scope window by clicking on the 'x' sign on the window
        caller.writeToReport("Start of executing APIM_173");
        caller.pause("3000");
        caller.click("Scopes.btn_topXClose");
        caller.pause("6000");
        caller.checkElementPresent("Scopes.ele_lblResources",false,"");
        caller.pause("1000");
        caller.writeToReport("End of Execution APIM_173");	
    }
    /**
     *  Business component APIM_168.
     */
    /**
     *  Business component APIM_168.
     */
    public final static void APIM_168(final SeleniumTestBase caller) throws Exception {
        //APIM-168: Check whether compulsory fields are marked with a red star.
        caller.writeToReport("Start of executing APIM_168");
        caller.pause("4000");
        caller.click("Scopes.btn_AddScope");
        caller.pause("4000");
        caller.checkElementPresent("Scopes.ele_lblscopeKeyRequiredAstrix",false,"");
        caller.checkElementPresent("Scopes.ele_lblScopeNameRequiredAstrix",false,"");
        caller.pause("4000");
        caller.click("Scopes.btn_Close");
        caller.pause("3000");
        caller.writeToReport("End of Execution APIM_168");	
    }
    /**
     *  Business component APIM_166.
     */
    public final static void APIM_166(final SeleniumTestBase caller, final String param_ScopeKeyFive, final String param_ScopeNameFive) throws Exception {
        //APIM-166: User should be able to add scopes in the manage stage when creating an API
        caller.writeToReport("Start of executing APIM_166");
        String varScopeKeyFive = param_ScopeKeyFive+caller.generateData("int",3);
        caller.store("keyScopeKeyFive","String",varScopeKeyFive);
        caller.pause("2000");
        String varScopeNameFive = param_ScopeNameFive+caller.generateData("int",3);
        caller.store("keyScopeFive","String",varScopeNameFive);
        caller.pause("2000");
        caller.click("Scopes.btn_AddScope");
        caller.pause("4000");
        caller.type("Scopes.tf_ScopeKey",varScopeKeyFive);
        caller.type("Scopes.tf_ScopeName",varScopeNameFive);
        caller.pause("3000");
        caller.click("Scopes.btn_SubmitScope");
        caller.pause("2000");
        caller.checkElementPresent("Scopes.ele_lblAddedScopes","param_ScopeKey_PARAM:" + varScopeKeyFive,false,"");
        caller.pause("3000");
        caller.writeToReport("End of Execution APIM_166");	
    }
    /**
     *  Business component APIM_176.
     */
    /**
     *  Business component APIM_176.
     */
    public final static void APIM_176(final SeleniumTestBase caller) throws Exception {
        //APIM-176: Check whether scopes get loaded successfully into the scope selection drop down in front of resource
        caller.writeToReport("Start of executing APIM_176");
        String varScopeKeyOne = caller.retrieveString("keyScopeKeyOne");
        String varScopeNameOne = caller.retrieveString("keyScopeOne");
        String varScopeNameTwo = caller.retrieveString("keyScopeTwo");
        String varScopeNameThree = caller.retrieveString("keyScopeThree");
        String varScopeNameFour = caller.retrieveString("keyScopeFour");
        String varScopeNameFive = caller.retrieveString("keyScopeFive");
        String varScopeNameSix = caller.retrieveString("keyScopeName");
        caller.click("Scopes.btn_ScopeParam","Scope_PARAM:" + varScopeKeyOne);
        caller.click("Scopes.ele_ddScope");
        //Verify already added Scope names
        caller.checkElementPresent("Scopes.ele_ddOptions","scopeName_PARAM:" + varScopeNameOne,false,"");
        caller.pause("500");
        caller.checkElementPresent("Scopes.ele_ddOptions","scopeName_PARAM:" + varScopeNameTwo,false,"");
        caller.pause("1000");
        caller.checkElementPresent("Scopes.ele_ddOptions","scopeName_PARAM:" + varScopeNameThree,false,"");
        caller.pause("1000");
        caller.checkElementPresent("Scopes.ele_ddOptions","scopeName_PARAM:" + varScopeNameFour,false,"");
        caller.pause("1000");
        caller.checkElementPresent("Scopes.ele_ddOptions","scopeName_PARAM:" + varScopeNameFive,false,"");
        caller.pause("1000");
        caller.checkElementPresent("Scopes.ele_ddOptions","scopeName_PARAM:" + varScopeNameSix,false,"");
        caller.pause("500");
        caller.pause("2000");
        caller.writeToReport("End of Execution APIM_176");	
    }
    /**
     *  Business component APIM_167.
     */
    public final static void APIM_167(final SeleniumTestBase caller, final String param_ScopeKeySix, final String param_ScopeNameSix) throws Exception {
        //APIM-167: Check whether user can add scope to a created API using edit view
        caller.writeToReport("Start of executing APIM_167");
        String varScopeKeySix = param_ScopeKeySix+caller.generateData("int",3);
        String varScopeNameSix = param_ScopeNameSix+caller.generateData("int",3);
        caller.store("keyScopeName","String",varScopeNameSix);
        caller.pause("1000");
        //Adding Scope Key and Name
        caller.click("Scopes.btn_AddScope");
        caller.pause("4000");
        caller.type("Scopes.tf_ScopeKey",varScopeKeySix);
        caller.type("Scopes.tf_ScopeName",varScopeNameSix);
        caller.pause("4000");
        caller.click("Scopes.btn_SubmitScope");
        caller.pause("3000");
        caller.checkElementPresent("Scopes.ele_lblAddedScopes","param_ScopeKey_PARAM:" + varScopeKeySix,false,"");
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Save1");
        caller.pause("4000");
        caller.click("APIPublisherHome.lnk_Browse");
        String varAPINameOne = caller.retrieveString("keyAPIName");
        //Navigate to API Edit Section
        lib_Common.bc_EditAPI(caller, varAPINameOne);
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_NextImplement");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.ele_lblManagedAPI");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_NextManage");
        //Verify Already added Scopes
        caller.checkElementPresent("Scopes.ele_lblAddedScopes","param_ScopeKey_PARAM:" + varScopeKeySix,false,"");
        caller.writeToReport("End of Execution APIM_167");	
    }
    /**
     *  Business component APIM_174.
     */
    /**
     *  Business component APIM_174.
     */
    public final static void APIM_174(final SeleniumTestBase caller) throws Exception {
        //APIM-174: Check whether user can exit from the define scope window by clicking
        caller.writeToReport("Start of executing APIM_174");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        String varAPINameOne = caller.retrieveString("keyAPIName");
        //Navigate to Api Edit Section
        lib_Common.bc_EditAPI(caller, varAPINameOne);
        caller.pause("1000");
        caller.click("APIPublisherBrowse.btn_NextImplement");
        caller.pause("1000");
        caller.click("APIPublisherBrowse.ele_lblManagedAPI");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_NextManage");
        caller.click("Scopes.btn_AddScope");
        caller.checkElementPresent("Scopes.tf_ScopeKey",false,"");
        caller.pause("3000");
        caller.click("Scopes.btn_Close");
        caller.pause("2000");
        caller.writeToReport("End of Execution APIM_174");	
    }
    /**
     *  Business component APIM_169.
     */
    public final static void APIM_169(final SeleniumTestBase caller, final String param_scopeKeySeven, final String param_scopeNameSeven) throws Exception {
        //APIM-169: Check whether user gets a validation message for empty compulsory fields.
        caller.writeToReport("Start of executing APIM_169");
        caller.click("Scopes.btn_AddScope");
        caller.pause("3000");
        caller.click("Scopes.btn_SubmitScope");
        //Verify the Field Errors
        caller.checkElementPresent("Scopes.ele_lblRequiredFieldError",false,"");
        caller.pause("3000");
        caller.checkElementPresent("Scopes.ele_lblRequiredFieldError2",false,"");
        caller.pause("3000");
        String varScopeKeySeven = param_scopeKeySeven+caller.generateData("int",2);
        caller.type("Scopes.tf_ScopeKey",varScopeKeySeven);
        caller.pause("4000");
        caller.click("Scopes.btn_SubmitScope");
        caller.checkElementPresent("Scopes.ele_lblRequiredFieldError2",false,"");
        caller.pause("3000");
        caller.type("Scopes.tf_ScopeKey",varScopeKeySeven);
        caller.pause("3000");
        String varScopeNameSeven = param_scopeNameSeven+caller.generateData("int",2);
        caller.type("Scopes.tf_ScopeName",varScopeNameSeven);
        caller.pause("4000");
        caller.click("Scopes.btn_SubmitScope");
        //Verify Submitted Scopes
        caller.checkElementPresent("Scopes.ele_lblAddedScopes","param_ScopeKey_PARAM:" + varScopeKeySeven,false,"");
        caller.pause("4000");
        caller.click("Scopes.btn_Close");
        caller.pause("2000");
        caller.writeToReport("End of Execution APIM_169");	
    }
    /**
     *  Business component APIM_177.
     */
    /**
     *  Business component APIM_177.
     */
    public final static void APIM_177(final SeleniumTestBase caller) throws Exception {
        //APIM-177: Check whether user can edit and change scope already assigned to the resource into a different scope
        caller.writeToReport("Start of executing APIM_177");
        caller.click("APIPublisherHome.lnk_Browse");
        String varAPINameOne = caller.retrieveString("keyAPIName");
        //Navigate to Edit API section
        lib_Common.bc_EditAPI(caller, varAPINameOne);
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_NextImplement");
        caller.pause("1000");
        caller.click("APIPublisherBrowse.ele_lblManagedAPI");
        caller.pause("1000");
        caller.click("APIPublisherBrowse.btn_NextManage");
        caller.pause("2000");
        String varScopeKeyOne3 = caller.retrieveString("keyScopeKeyOne");
        caller.click("Scopes.btn_ScopeParam","Scope_PARAM:" + varScopeKeyOne3);
        String varScopeNameFive4 = caller.retrieveString("keyScopeFive");
        caller.select("Scopes.ele_ddScope",varScopeNameFive4);
        caller.pause("3000");
        caller.click("Scopes.btn_Right");
        String varScopeKeyTwo8 = caller.retrieveString("keyScopeKeyTwo");
        caller.click("Scopes.btn_ScopeParam","Scope_PARAM:" + varScopeKeyTwo8);
        String varScopeNameSix2 = caller.retrieveString("keyScopeName");
        caller.select("Scopes.ele_ddScope",varScopeNameSix2);
        caller.pause("3000");
        caller.click("Scopes.btn_Right");
        caller.pause("3000");
        caller.writeToReport("End of Execution APIM_177");	
    }
    /**
     *  Business component APIM_73.
     */
    public final static void APIM_73(final SeleniumTestBase caller, final String param_APIName, final String param_urlPatternSC, final String param_verbGet, final String param_verbPost, final String param_APIContext, final String param_APITag, final String param_URLPatternSandbox, final String param_APIVersion) throws Exception {
        //APIM-73: Ability to define the templates in publisher
        caller.writeToReport("Start Executing APIM-73");
        //CreateAPI upto design Stage
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Take API name as a parameter
        String varAPINameURITemplate = param_APIName+caller.generateData("int",3);
        //storing API name
        caller.store("keyAPINameURITemplate","String",varAPINameURITemplate);
        caller.type("APIPublisherAdd.tf_APIName",varAPINameURITemplate);
        //Take API context as a variable and Type
        String varAPIContext = param_APIContext+caller.generateData("int",3);
        caller.type("APIPublisherAdd.tf_APIContext",varAPIContext);
        caller.type("APIPublisherAdd.tf_APIVersion",param_APIVersion);
        String varAPITag = param_APITag+caller.generateData("int",3);
        caller.type("APIPublisherAdd.tf_Tags",varAPITag);
        caller.fireEvent("KEY%key=\n","2000");
        //waiting for content load
        caller.pause("6000");
        //click save and verify warning
        caller.doubleClick("APIPublisherAdd.btn_Save");
        //waiting for content load
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherAdd.ele_lblDefaultResourceMessage",false,"");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherAdd.btn_Yes");
        //waiting for content load
        caller.pause("7000");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //waiting for content load
        caller.pause("4000");
        //browse for the API
        caller.click("APIPublisherHome.lnk_Browse");
        //starting to edit the API
        caller.type("APIPublisherHome.tf_APISearch",param_APIName);
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("4000");
        lib_Common.bc_EditAPI(caller, param_APIName);
        caller.type("APIPublisherBrowse.tf_UrlPattern",param_urlPatternSC);
        caller.click("APIPublisherBrowse.chk_verbMethod","verb_PARAM:" + param_verbGet);
        //waiting for content load
        caller.pause("500");
        caller.click("APIPublisherBrowse.chk_verbMethod","verb_PARAM:" + param_verbPost);
        //waiting for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.btn_Add");
        //waiting for content load
        caller.pause("1000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVerbMethod","verb_PARAM:" + param_verbGet + "_PARAM," + "urlPattern_PARAM:" + param_urlPatternSC,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVerbMethod","verb_PARAM:" + param_verbPost + "_PARAM," + "urlPattern_PARAM:" + param_urlPatternSC,false,"");
        caller.writeToReport("End of  Executing APIM-73");	
    }
    /**
     *  Business component APIM_74.
     */
    public final static void APIM_74(final SeleniumTestBase caller, final String param_urlPatternUriTemplate, final String param_verbGet, final String param_verbPost) throws Exception {
        //APIM-74: user should be able to define complex uri - templates having many parameters
        caller.writeToReport("Start Executing APIM-74");
        caller.click("APIPublisherHome.lnk_Browse");
        //Retrieving the created API name
        String varAPINameOneURITemplateOne = caller.retrieveString("keyAPINameURITemplate");
        caller.type("APIPublisherHome.tf_APISearch",varAPINameOneURITemplateOne);
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("4000");
        //Editing the API
        lib_Common.bc_EditAPI(caller, varAPINameOneURITemplateOne);
        caller.type("APIPublisherBrowse.tf_UrlPattern",param_urlPatternUriTemplate);
        caller.click("APIPublisherBrowse.chk_verbMethod","verb_PARAM:" + param_verbGet);
        //waiting for content load
        caller.pause("500");
        caller.click("APIPublisherBrowse.chk_verbMethod","verb_PARAM:" + param_verbPost);
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Add");
        //waiting for content load
        caller.pause("1000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVerbMethod","verb_PARAM:" + param_verbGet + "_PARAM," + "urlPattern_PARAM:" + param_urlPatternUriTemplate,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVerbMethod","verb_PARAM:" + param_verbPost + "_PARAM," + "urlPattern_PARAM:" + param_urlPatternUriTemplate,false,"");
        //waiting for content load
        caller.pause("3000");
        caller.writeToReport("End of  Executing APIM-74");	
    }
    /**
     *  Business component APIM_75.
     */
    public final static void APIM_75(final SeleniumTestBase caller, final String param_urlPatternUriTemplate, final String param_verbGet, final String param_verbPost, final String param_verbPut, final String param_verbDelete) throws Exception {
        //APIM-75: User should be able to define complex uri-templates with each HTTP verb
        caller.writeToReport("Start Executing APIM-75");
        caller.click("APIPublisherHome.lnk_Browse");
        String varAPINameOneURITemplate = caller.retrieveString("keyAPINameURITemplate");
        caller.type("APIPublisherHome.tf_APISearch",varAPINameOneURITemplate);
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("4000");
        lib_Common.bc_EditAPI(caller, varAPINameOneURITemplate);
        caller.pause("2000");
        //Add uri for GET
        caller.type("APIPublisherBrowse.tf_UrlPattern",param_urlPatternUriTemplate);
        caller.click("APIPublisherBrowse.chk_verbMethod","verb_PARAM:" + param_verbGet);
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Add");
        //waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVerbMethod","verb_PARAM:" + param_verbGet + "_PARAM," + "urlPattern_PARAM:" + param_urlPatternUriTemplate,false,"");
        //waiting for content load
        caller.pause("1000");
        //Add uri for POST
        caller.type("APIPublisherBrowse.tf_UrlPattern",param_urlPatternUriTemplate);
        caller.click("APIPublisherBrowse.chk_verbMethod","verb_PARAM:" + param_verbPost);
        //waiting for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.btn_Add");
        //waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVerbMethod","verb_PARAM:" + param_verbPost + "_PARAM," + "urlPattern_PARAM:" + param_urlPatternUriTemplate,false,"");
        //waiting for content load
        caller.pause("1000");
        //Add uri for PUT
        caller.type("APIPublisherBrowse.tf_UrlPattern",param_urlPatternUriTemplate);
        caller.click("APIPublisherBrowse.chk_verbMethod","verb_PARAM:" + param_verbPut);
        //waiting for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.btn_Add");
        //waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVerbMethod","verb_PARAM:" + param_verbPut + "_PARAM," + "urlPattern_PARAM:" + param_urlPatternUriTemplate,false,"");
        //waiting for content load
        caller.pause("1000");
        //Add uri for DELETE
        caller.type("APIPublisherBrowse.tf_UrlPattern",param_urlPatternUriTemplate);
        caller.click("APIPublisherBrowse.chk_verbMethod","verb_PARAM:" + param_verbDelete);
        //waiting for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.btn_Add");
        //waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVerbMethod","verb_PARAM:" + param_verbDelete + "_PARAM," + "urlPattern_PARAM:" + param_urlPatternUriTemplate,false,"");
        //waiting for content load
        caller.pause("1000");
        caller.writeToReport("End of  Executing APIM-75");	
    }
    /**
     *  Business component APIM_78.
     */
    public final static void APIM_78(final SeleniumTestBase caller, final String param_urlPatternComplex, final String param_verbGet, final String param_verbPost) throws Exception {
        //APIM-78: Test with lengthy URL parameters
        caller.writeToReport("Start Executing APIM-78");
        caller.click("APIPublisherHome.lnk_Browse");
        //Retrieving created API name
        String varAPINameOneURITemplate = caller.retrieveString("keyAPINameURITemplate");
        caller.type("APIPublisherHome.tf_APISearch",varAPINameOneURITemplate);
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("4000");
        lib_Common.bc_EditAPI(caller, varAPINameOneURITemplate);
        caller.type("APIPublisherBrowse.tf_UrlPattern",param_urlPatternComplex);
        caller.click("APIPublisherBrowse.chk_verbMethod","verb_PARAM:" + param_verbGet);
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.chk_verbMethod","verb_PARAM:" + param_verbPost);
        //waiting for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.btn_Add");
        //waiting for content load
        caller.pause("1000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVerbMethod","verb_PARAM:" + param_verbGet + "_PARAM," + "urlPattern_PARAM:" + param_urlPatternComplex,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVerbMethod","verb_PARAM:" + param_verbPost + "_PARAM," + "urlPattern_PARAM:" + param_urlPatternComplex,false,"");
        //waiting for content load
        caller.pause("3000");
        caller.writeToReport("End of  Executing APIM-78");	
    }
    /**
     *  Business component APIM_6A.
     */
    public final static void APIM_6A(final SeleniumTestBase caller, final String param_publisherURL) throws Exception {
        //APIM-6A: check whether Visibility Dropdown is there
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        //Retrieve API name and the version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("500");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("500");
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("4000");
        //Checking drop down selections availability
        caller.checkElementPresent("Browse_Doc.ele_ddVisibility",false,"");
        caller.checkElementPresent("Browse_Doc.ele_ddOption1",false,"");
        caller.checkElementPresent("Browse_Doc.ele_ddOption2",false,"");
        caller.checkElementPresent("Browse_Doc.ele_ddOption3",false,"");
        caller.pause("2000");
        caller.writeToReport("APIM_6A Successfully Passed");	
    }
    /**
     *  Business component APIM_116.
     */
    public final static void APIM_116(final SeleniumTestBase caller, final String param_otherSpecify, final String param_Url, final String param_publisherURL, final String param_rdoOtherOne, final String param_rdoSupportForumOne, final String param_rdoPublicForumOne, final String param_rdoSampleSDKOne, final String param_rdoHowToOne, final String param_docName) throws Exception {
        //Navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.click("APIPublisherHome.lnk_Browse");
        //genarate docName & Summery
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("5000");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        //Search for the API name
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("500");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("500");
        //1st doc How To
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("1000");
        String DocNameOne = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameOne);
        caller.click("Browse_Doc.rdo_HowTo");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lbltableName","docName_PARAM:" + DocNameOne + "_PARAM," + "docType_PARAM:" + param_rdoHowToOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableType","docName_PARAM:" + DocNameOne + "_PARAM," + "docType_PARAM:" + param_rdoHowToOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableModifiedOn","docName_PARAM:" + DocNameOne + "_PARAM," + "docType_PARAM:" + param_rdoHowToOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableAction","docName_PARAM:" + DocNameOne + "_PARAM," + "docType_PARAM:" + param_rdoHowToOne,false,"");
        //2nd doc Sample & SDK
        caller.pause("500");
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("1000");
        String DocNametwo = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNametwo);
        caller.click("Browse_Doc.rdo_SampleAndSDK");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lbltableName","docName_PARAM:" + DocNametwo + "_PARAM," + "docType_PARAM:" + param_rdoSampleSDKOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableType","docName_PARAM:" + DocNametwo + "_PARAM," + "docType_PARAM:" + param_rdoSampleSDKOne,false,"");
        caller.pause("1000");
        caller.checkElementPresent("Browse_Doc.ele_lbltableModifiedOn","docName_PARAM:" + DocNametwo + "_PARAM," + "docType_PARAM:" + param_rdoSampleSDKOne,false,"");
        caller.pause("1000");
        caller.checkElementPresent("Browse_Doc.ele_lbltableAction","docName_PARAM:" + DocNametwo + "_PARAM," + "docType_PARAM:" + param_rdoSampleSDKOne,false,"");
        //3nd doc Public Forum
        caller.pause("500");
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("1000");
        //genarate docName
        String DocNameThree = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameThree);
        caller.click("Browse_Doc.rdo_PublicForum");
        if(caller.checkElementPresent("Browse_Doc.tf_URL")){
        caller.type("Browse_Doc.tf_URL",param_Url);
        }
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lbltableName","docName_PARAM:" + DocNameThree + "_PARAM," + "docType_PARAM:" + param_rdoPublicForumOne,false,"");
        caller.pause("1000");
        caller.checkElementPresent("Browse_Doc.ele_lbltableType","docName_PARAM:" + DocNameThree + "_PARAM," + "docType_PARAM:" + param_rdoPublicForumOne,false,"");
        caller.pause("1000");
        caller.checkElementPresent("Browse_Doc.ele_lbltableModifiedOn","docName_PARAM:" + DocNameThree + "_PARAM," + "docType_PARAM:" + param_rdoPublicForumOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableAction","docName_PARAM:" + DocNameThree + "_PARAM," + "docType_PARAM:" + param_rdoPublicForumOne,false,"");
        //4thd doc Support Forum
        caller.pause("500");
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("1000");
        //genarate docName
        String DocNameFour = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameFour);
        caller.click("Browse_Doc.rdo_SupportForum");
        if(caller.checkElementPresent("Browse_Doc.tf_URL")){
        caller.type("Browse_Doc.tf_URL",param_Url);
        }
        caller.click("Browse_Doc.rdo_URL");
        caller.type("Browse_Doc.tf_URL",param_Url);
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lbltableName","docName_PARAM:" + DocNameFour + "_PARAM," + "docType_PARAM:" + param_rdoSupportForumOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableType","docName_PARAM:" + DocNameFour + "_PARAM," + "docType_PARAM:" + param_rdoSupportForumOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableModifiedOn","docName_PARAM:" + DocNameFour + "_PARAM," + "docType_PARAM:" + param_rdoSupportForumOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableAction","docName_PARAM:" + DocNameFour + "_PARAM," + "docType_PARAM:" + param_rdoSupportForumOne,false,"");
        //5th doc Other Type
        caller.pause("500");
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("1000");
        //genarate docName
        String DocNameFive = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameFive);
        caller.click("Browse_Doc.rdo_Other");
        if(caller.checkElementPresent("Browse_Doc.tf_Other")){
        caller.type("Browse_Doc.tf_Other",param_otherSpecify);
        }
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lbltableName","docName_PARAM:" + DocNameFive + "_PARAM," + "docType_PARAM:" + param_rdoOtherOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableType","docName_PARAM:" + DocNameFive + "_PARAM," + "docType_PARAM:" + param_rdoOtherOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableModifiedOn","docName_PARAM:" + DocNameFive + "_PARAM," + "docType_PARAM:" + param_rdoOtherOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableAction","docName_PARAM:" + DocNameFive + "_PARAM," + "docType_PARAM:" + param_rdoOtherOne,false,"");
        caller.pause("2000");
        caller.writeToReport("APIM_116 Successfully Passed");	
    }
    /**
     *  Business component APIM_113.
     */
    public final static void APIM_113(final SeleniumTestBase caller, final String param_docName, final String param_URL) throws Exception {
        //APIM-113: Check whether system doesn't allow user to change source as 'in-line' for forum type documents.
        caller.writeToReport("Start  Executing APIM-113");
        caller.click("APIPublisherHome.lnk_Browse");
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("3000");
        //Search for the API name
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("1000");
        String DocName = caller.retrieveString("var_DocName");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocName);
        //check edit document page visibility
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        //change type to public forum(pre condition)
        caller.pause("4000");
        caller.click("Browse_Doc.rdo_PublicForum");
        caller.pause("2000");
        caller.type("Browse_Doc.tf_URL",param_URL);
        caller.pause("1000");
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lblPublicForum","param_docName_PARAM:" + DocName,false,"");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocName);
        caller.pause("3000");
        //check the Document name should be visible in a non-editabe field
        caller.checkObjectProperty("Browse_Doc.tf_DocName","PROPERTYPRESENT","disabled|true",false,"");
        //check for non-selectable in-line radio button
        caller.checkObjectProperty("Browse_Doc.rdo_Inline","PROPERTYPRESENT","disabled|true",false,"");
        //change type to support forum
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_SupportForum");
        caller.pause("1000");
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        caller.pause("5000");
        caller.checkElementPresent("Browse_Doc.ele_SupportForum","param_docName_PARAM:" + DocName,false,"");
        //check
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocName);
        //check the Document name should be visible in a non-editabe field
        caller.pause("3000");
        caller.checkObjectProperty("Browse_Doc.tf_DocName","PROPERTYPRESENT","disabled|true",false,"");
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        //check for non-selectable in-line radio button
        caller.checkObjectProperty("Browse_Doc.rdo_Inline","PROPERTYPRESENT","disabled|true",false,"");
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        caller.pause("3000");
        caller.writeToReport("End of  Executing APIM-113");	
    }
    /**
     *  Business component APIM_105.
     */
    public final static void APIM_105(final SeleniumTestBase caller, final String param_docName, final String param_docSummery, final String param_other, final String param_fileToUpload, final String param_fileName, final String param_storeURL, final String param_publisherURL, final String param_rdoOtherOne, final String downImage, final String param_Domain) throws Exception {
        //APIM-105: Create a document given 'other' as the type and 'file' as the source.
        //Navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        //Retrieve API name and the version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        //Search for the API
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("3000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("5000");
        //Adding new Doc
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("500");
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("1000");
        //genarate docName & Summery
        String DocName = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocName);
        String DocSummery = param_docSummery+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_Summary",DocSummery);
        caller.click("Browse_Doc.rdo_Other");
        caller.pause("2000");
        if(caller.checkElementPresent("Browse_Doc.tf_Other")){
        caller.type("Browse_Doc.tf_Other",param_other);
        } else {
        caller.click("Browse_Doc.rdo_Other");
        caller.type("Browse_Doc.tf_Other",param_other);
        }
        caller.click("Browse_Doc.rdo_File");
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("500");
        //Check for the validation error
        caller.checkElementPresent("Browse_Doc.ele_lblThisFieldisRequired",false,"");
        caller.type("Browse_Doc.tf_DocName",DocName);
        caller.type("Browse_Doc.tf_Summary",DocSummery);
        caller.pause("6000");
        caller.checkElementPresent("Browse_Doc.tf_BrowseFile",false,"");
        caller.pause("2000");
        //Addign file to the sourse
        //Type docname
         java.io.File file = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator +param_fileToUpload);
        String entirePath = file.getAbsolutePath();
        caller.type("Browse_Doc.tf_BrowseFile",entirePath);
        caller.pause("6000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("2000");
        //Checking the table column names
        caller.checkElementPresent("Browse_Doc.ele_lbltableName","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + param_rdoOtherOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableType","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + param_rdoOtherOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableModifiedOn","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + param_rdoOtherOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableAction","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + param_rdoOtherOne,false,"");
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_open","param_docName_PARAM:" + DocName);
        caller.pause("2000");
        //Handle save popup
        String downImagePopup = downImage;
        if(caller.checkImagePresent(downImagePopup,false)){
        caller.fireEvent("KEY%key=alt+s","2000");
        caller.fireEvent("KEY%key=alt+a","2000");
        caller.fireEvent("KEY%key=\n","1000");
        }
        caller.checkFileInfo(param_fileName,"EXIST",false,"");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        caller.pause("3000");
        caller.pause("3000");
        //Search for the API name
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("3000");
        caller.click("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + APIName);
        //Ckeck the added document
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.checkElementPresent("APIStoreDocumentation.lnk_Other",false,"");
        caller.click("APIStoreDocumentation.lnk_Other");
        if(caller.checkElementPresent("APIStoreDocumentation.lnk_Download","param_fileName_PARAM:" + param_fileName)){
        caller.click("APIStoreDocumentation.lnk_Download","param_docName_PARAM:" + param_fileName);
        }
        //Checking download path
        caller.checkFileInfo(param_fileName,"EXIST",false,"");
        caller.pause("2000");
        caller.writeToReport("APIM_105 Successfully Passed");	
    }
    /**
     *  Business component APIM_104.
     */
    public final static void APIM_104(final SeleniumTestBase caller, final String param_docName, final String param_docSummery, final String param_other, final String param_url, final String param_publisherURL, final String param_rdoOtherOne) throws Exception {
        //APIM-104: Create a document given 'other' as the type and 'URL' as the source
        //Navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        //Retrieve API name and the version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.click("APIPublisherHome.lnk_Browse");
        //Check for the API
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("500");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("500");
        //1st doc How To
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("1000");
        //genarate docNameInvalid
        String DocNameInvalid = param_docName+"_"+"@!123"+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameInvalid);
        caller.click("Browse_Doc.rdo_Other");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.checkElementPresent("Browse_Doc.ele_lblInvalidDocName",false,"");
        //genarate docNameInvalid
        String DocNameInvalidTwo = param_docName+"_"+"DocDifferent@!123"+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameInvalidTwo);
        caller.click("Browse_Doc.rdo_Other");
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.checkElementPresent("Browse_Doc.ele_lblInvalidDocName",false,"");
        //genarate docName & Summery
        String DocName = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocName);
        String DocSummery = param_docSummery+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_Summary",DocSummery);
        caller.click("Browse_Doc.rdo_HowTo");
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_URL");
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.checkElementPresent("Browse_Doc.ele_lblThisFieldisRequired",false,"");
        caller.type("Browse_Doc.tf_DocName",DocName);
        caller.type("Browse_Doc.tf_Summary",DocSummery);
        caller.pause("500");
        caller.click("Browse_Doc.rdo_Other");
        caller.type("Browse_Doc.tf_Other",param_other);
        caller.click("Browse_Doc.rdo_URL");
        caller.type("Browse_Doc.tf_URL",param_url);
        caller.pause("1000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lbltableName","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + param_rdoOtherOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableType","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + param_rdoOtherOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableModifiedOn","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + param_rdoOtherOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableAction","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + param_rdoOtherOne,false,"");
        caller.click("Browse_Doc.lnk_view","param_docName_PARAM:" + DocName);
        caller.pause("2000");
        caller.selectWindow("Browse_Doc.newWindow1");
        caller.fireEvent("KEY%key=ctrl+2","2000");
        caller.pause("4000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("2000");
        caller.writeToReport("APIM_104 Successfully Passed");	
    }
    /**
     *  Business component APIM_112.
     */
    public final static void APIM_112(final SeleniumTestBase caller, final String param_editContent, final String param_publisherURL, final String param_Domain, final String param_storeURL, final String TableColumnType) throws Exception {
        //APIM-112: Check whether system allows user to edit content of already created in-line documents.
        caller.writeToReport("Start  Executing APIM-112");
        caller.click("APIPublisherHome.lnk_Browse");
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("3000");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        //Search for the API name
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("1000");
        String DocName = caller.retrieveString("var_DocName");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocName);
        //check edit document page visibility
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        //change type to public forum(pre condition)
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_HowTo");
        caller.pause("1000");
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        caller.pause("500");
        //Check whether document details are listed on the docs page of the API.
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocName,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableName","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + TableColumnType,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableType","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + TableColumnType,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableModifiedOn","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + TableColumnType,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableAction","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + TableColumnType,false,"");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocName);
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.newWindow1");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + APIVersion,false,"");
        caller.selectFrame("Browse_Doc.frame1");
        caller.pause("4000");
        caller.click("Browse_Doc.tf_EditContent1");
        caller.pause("500");
        caller.type("Browse_Doc.tf_EditContent1",param_editContent);
        caller.pause("4000");
        caller.fireEvent("KEY%key=\t|key=\n","10");
        caller.pause("4000");
        caller.click("Browse_Doc.tf_EditContent1");
        caller.pause("500");
        caller.type("Browse_Doc.tf_EditContent1",param_editContent);
        caller.pause("4000");
        caller.fireEvent("KEY%key=\t|key=\t|key=\n","5000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("2000");
        //Verify doc is under doc tab and doc name and type
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocName,false,"");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        caller.pause("3000");
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.checkElementPresent("APIStoreDocumentation.lnk_HowTo",false,"");
        caller.click("APIStoreDocumentation.lnk_HowTo");
        //Wait for content load
        caller.pause("1000");
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + DocName,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + DocName,false,"");
        caller.click("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + DocName);
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("5000");
        caller.checkElementPresent("APIStoreDocumentation.ele_txtContent","param_docName_PARAM:" + DocName,false,"");
        caller.pause("5000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        //Navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.writeToReport("End of  Executing APIM-112");	
    }
    /**
     *  Business component APIM_103.
     */
    public final static void APIM_103(final SeleniumTestBase caller, final String param_docName, final String param_docSummery, final String param_other, final String param_editContent, final String param_storeURL, final String param_publisherURL, final String param_rdoOtherOne, final String param_Domain) throws Exception {
        //APIM-103: Create a document given 'other' as the type and in-line as the source.
        //Navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        //Retrieve API name and the version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("500");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("500");
        caller.click("Browse_Doc.btn_AddNewDocument");
        //genarate docName & Summery
        String DocNameWithSpace = param_docName+" "+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameWithSpace);
        String DocSummery = param_docSummery+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_Summary",DocSummery);
        caller.pause("500");
        caller.click("Browse_Doc.rdo_Other");
        caller.type("Browse_Doc.tf_Other",param_other);
        caller.click("Browse_Doc.rdo_Inline");
        caller.pause("1000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lbltableName","docName_PARAM:" + DocNameWithSpace + "_PARAM," + "docType_PARAM:" + param_rdoOtherOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableType","docName_PARAM:" + DocNameWithSpace + "_PARAM," + "docType_PARAM:" + param_rdoOtherOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableModifiedOn","docName_PARAM:" + DocNameWithSpace + "_PARAM," + "docType_PARAM:" + param_rdoOtherOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableAction","docName_PARAM:" + DocNameWithSpace + "_PARAM," + "docType_PARAM:" + param_rdoOtherOne,false,"");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocNameWithSpace);
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.newWindow1");
        caller.pause("1000");
        caller.checkElementPresent("Browse_Doc.ele_lblDocNameEditContent","param_docName_PARAM:" + DocNameWithSpace,false,"");
        caller.pause("1000");
        caller.checkElementPresent("Browse_Doc.ele_lblVersion","param_APIversion_PARAM:" + APIVersion,false,"");
        caller.pause("1000");
        caller.click("Browse_Doc.btn_EditContenetCancel");
        caller.pause("1000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocNameWithSpace);
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.newWindow1");
        caller.selectFrame("Browse_Doc.frame1");
        caller.pause("4000");
        caller.click("Browse_Doc.tf_EditContent1");
        caller.pause("500");
        caller.type("Browse_Doc.tf_EditContent1",param_editContent);
        caller.pause("4000");
        caller.fireEvent("KEY%key=\t|key=\t|key=\n","5000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("5000");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        caller.pause("3000");
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.click("APIStoreDocumentation.lnk_Other");
        caller.pause("2000");
        caller.click("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + DocNameWithSpace);
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.newWindow1");
        caller.checkElementPresent("Browse_Doc.ele_lblContentDocViewer","param_content_PARAM:" + param_editContent,false,"");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("2000");
        caller.writeToReport("APIM_103 Successfully Passed");	
    }
    /**
     *  Business component APIM_114.
     */
    public final static void APIM_114(final SeleniumTestBase caller, final String param_summery, final String param_URL, final String param_visibilityValue, final String param_docName, final String param_APIName, final String param_serverName, final String param_visibilityValue2, final String param_summery2, final String param_visibilityValue3, final String param_uploadDocLocation2, final String param_storeURL, final String param_usernameStore, final String param_passwordStore, final String param_APIVersion, final String param_publisherURL, final String param_uploadDocLocation, final String param_DownloadFilePath2, final String param_DownloadFilePath) throws Exception {
        caller.pause("2000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",param_APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + param_APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("1000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + param_docName);
        //check edit document page visibility
        caller.pause("3000");
        caller.checkObjectProperty("Browse_Doc.tf_DocName","PROPERTYPRESENT","disabled",false,"");
        caller.checkElementPresent("Browse_Doc.tf_Summary",false,"");
        caller.type("Browse_Doc.tf_Summary",param_summery2);
        caller.click("Browse_Doc.rdo_SampleAndSDK");
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_URL");
        caller.type("Browse_Doc.tf_URL",param_URL);
        caller.select("Browse_Doc.ele_ddVisibility",param_visibilityValue);
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        caller.pause("5000");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + param_serverName);
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_version_PARAM:" + param_APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.checkElementPresent("APIStoreDocumentation.lnk_Samples",false,"");
        caller.click("APIStoreDocumentation.lnk_Samples");
        //Wait for content load
        caller.pause("1000");
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + param_docName,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + param_docName + "_PARAM," + "param_URLLink_PARAM:" + param_URL,false,"");
        caller.checkElementPresent("APIStoreDocumentation.ele_lblDocumentSummary","param_docSummery_PARAM:" + param_summery2,false,"");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.pause("2000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",param_APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + param_APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("1000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + param_docName);
        caller.click("Browse_Doc.rdo_SampleAndSDK");
        caller.click("Browse_Doc.rdo_Inline");
        caller.pause("1000");
        caller.select("Browse_Doc.ele_ddVisibility",param_visibilityValue2);
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        caller.pause("5000");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + param_serverName);
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_version_PARAM:" + param_APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.checkElementPresent("APIStoreDocumentation.lnk_Samples",false,"");
        caller.click("APIStoreDocumentation.lnk_Samples");
        //Wait for content load
        caller.pause("1000");
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + param_docName,false,"");
        caller.checkElementPresent("APIStoreDocumentation.ele_lblDocumentSummary","param_docSummery_PARAM:" + param_summery2,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + param_docName,false,"");
        caller.pause("3000");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.pause("2000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",param_APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + param_APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("1000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + param_docName);
        caller.select("Browse_Doc.ele_ddVisibility",param_visibilityValue3);
        caller.click("Browse_Doc.rdo_File");
        caller.type("Browse_Doc.tf_BrowseFile",param_uploadDocLocation);
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + param_serverName);
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_version_PARAM:" + param_APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        //wait till page load
        caller.click("APIStoreDocumentation.lnk_Samples");
        //Wait for content load
        caller.pause("1000");
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + param_docName,false,"");
        caller.checkElementPresent("APIStoreDocumentation.ele_lblDocumentSummary","param_docSummery_PARAM:" + param_summery2,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_Download","param_docName_PARAM:" + param_docName,false,"");
        caller.click("APIStoreDocumentation.lnk_Download","param_docName_PARAM:" + param_docName);
        caller.checkFileInfo(param_DownloadFilePath2,"EXIST",false,"");
        caller.pause("3000");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.pause("2000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",param_APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + param_APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("1000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + param_docName);
        caller.select("Browse_Doc.ele_ddVisibility",param_visibilityValue);
        caller.click("Browse_Doc.rdo_PublicForum");
        caller.click("Browse_Doc.rdo_File");
        caller.type("Browse_Doc.tf_BrowseFile",param_uploadDocLocation2);
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + param_serverName);
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_version_PARAM:" + param_APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.click("APIStoreDocumentation.lnk_PublicForum");
        //Wait for content load
        caller.pause("1000");
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + param_docName,false,"");
        caller.checkElementPresent("APIStoreDocumentation.ele_lblDocumentSummary","param_docSummery_PARAM:" + param_summery2,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_Download","param_docName_PARAM:" + param_docName,false,"");
        caller.click("APIStoreDocumentation.lnk_Download","param_docName_PARAM:" + param_docName);
        caller.checkFileInfo(param_DownloadFilePath,"EXIST",false,"");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.pause("2000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",param_APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + param_APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("1000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + param_docName);
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_SupportForum");
        caller.click("Browse_Doc.rdo_URL");
        caller.type("Browse_Doc.tf_URL",param_URL);
        caller.select("Browse_Doc.ele_ddVisibility",param_visibilityValue);
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        caller.pause("5000");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + param_serverName);
        lib_Common.bc_APIStoreLogin(caller, param_usernameStore,param_passwordStore);
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_version_PARAM:" + param_APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + param_serverName);
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_version_PARAM:" + param_APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.click("APIStoreDocumentation.lnk_SupportForum");
        //Wait for content load
        caller.pause("1000");
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + param_docName,false,"");
        caller.checkElementPresent("APIStoreDocumentation.ele_lblDocumentSummary","param_docSummery_PARAM:" + param_summery2,false,"");
        caller.click("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + param_docName + "_PARAM," + "param_URLLink_PARAM:" + param_URL);
        caller.pause("6000");
        caller.selectWindow("Browse_Doc.window");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");	
    }
    /**
     *  Business component APIM_102.
     */
    public final static void APIM_102(final SeleniumTestBase caller, final String param_docName, final String param_docSummery, final String param_fileToUpload, final String param_downloadedFile, final String param_storeURL, final String param_publisherURL, final String param_rdoSupportForumOne, final String param_Domain) throws Exception {
        //APIM-102: Create a document given 'support forum' as the type and 'file' as the source.
        //Navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.click("APIPublisherHome.lnk_Browse");
        //Search for the API name
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("500");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("500");
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("3000");
        //genarate docName & Summery
        String DocName = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocName);
        String DocSummery = param_docSummery+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_Summary",DocSummery);
        caller.pause("1000");
        caller.click("Browse_Doc.rdo_SupportForum");
        caller.pause("1000");
        caller.click("Browse_Doc.rdo_File");
        caller.pause("500");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("1000");
        caller.checkElementPresent("Browse_Doc.ele_lblThisFieldisRequired",false,"");
        caller.pause("500");
        //Type docname
         java.io.File file = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator +param_fileToUpload);
        String entirePath = file.getAbsolutePath();
        caller.type("Browse_Doc.tf_BrowseFile",entirePath);
        caller.pause("500");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("4000");
        caller.checkElementPresent("Browse_Doc.ele_lbltableName","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + param_rdoSupportForumOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableType","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + param_rdoSupportForumOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableModifiedOn","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + param_rdoSupportForumOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableAction","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + param_rdoSupportForumOne,false,"");
        caller.click("Browse_Doc.lnk_open","param_docName_PARAM:" + DocName);
        //Check for downloaded file
        caller.checkFileInfo(param_downloadedFile,"EXIST",false,"");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        caller.pause("3000");
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("1000");
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.click("APIStoreDocumentation.lnk_SupportForum");
        caller.click("APIStoreDocumentation.lnk_Download","param_docName_PARAM:" + DocName);
        //Check for downloaded file
        caller.checkFileInfo(param_downloadedFile,"EXIST",false,"");
        caller.pause("2000");
        caller.writeToReport("APIM_102 Successfully Passed");	
    }
    /**
     *  Business component APIM_101.
     */
    public final static void APIM_101(final SeleniumTestBase caller, final String param_docName, final String param_docSummery, final String param_url, final String param_publisherURL, final String param_storeURL, final String param_rdoSupportForumOne, final String param_Domain) throws Exception {
        //APIM-101: Create a document given 'support forums' as the type and 'URL' as the source
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("500");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("500");
        caller.click("Browse_Doc.btn_AddNewDocument");
        //genarate docName & Summery
        String DocName = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocName);
        String DocSummery = param_docSummery+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_Summary",DocSummery);
        caller.pause("500");
        caller.click("Browse_Doc.rdo_SupportForum");
        caller.type("Browse_Doc.tf_URL",param_url);
        caller.pause("500");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lbltableName","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + param_rdoSupportForumOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableType","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + param_rdoSupportForumOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableModifiedOn","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + param_rdoSupportForumOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableAction","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + param_rdoSupportForumOne,false,"");
        caller.click("Browse_Doc.btn_View","param_docName_PARAM:" + DocName);
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.newWindow1");
        //verify the Site
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("1000");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        caller.pause("3000");
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("1000");
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.click("APIStoreDocumentation.lnk_SupportForum");
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.lnk_link","param_docName_PARAM:" + DocName,false,"");
        caller.pause("2000");
        caller.writeToReport("APIM_101 Successfully Passed");	
    }
    /**
     *  Business component APIM_100.
     */
    public final static void APIM_100(final SeleniumTestBase caller, final String param_publisherURL, final String param_docName, final String param_docSummery) throws Exception {
        //APIM-100: System should not allow to select 'in-line' source type given 'support forum' as the type
        //Navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        //Retrieve API name and the version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("500");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("500");
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //genarate docName & Summery
        String DocName = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocName);
        String DocSummery = param_docSummery+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_Summary",DocSummery);
        caller.click("Browse_Doc.rdo_PublicForum");
        //Check the disabled radio button
        caller.checkObjectProperty("Browse_Doc.rdo_Inline","PROPERTYPRESENT","disabled|true",false,"");
        caller.pause("2000");
        caller.writeToReport("APIM_100 Successfully Passed");	
    }
    /**
     *  Business component APIM_99.
     */
    public final static void APIM_99(final SeleniumTestBase caller, final String param_docSummery, final String param_docName, final String param_File, final String param_downloadedFile, final String param_publisherURL, final String param_storeURL, final String param_rdoPublicForumOne, final String param_Domain) throws Exception {
        //APIM-99: Create a document given 'public forum' as the type and 'file' as the source.
        //Navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        //Search for the API name
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("500");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("500");
        caller.click("Browse_Doc.btn_AddNewDocument");
        //genarate docName & Summery
        String DocName = param_docName+"_"+caller.generateData("int",3);
        caller.type("Browse_Doc.tf_DocName",DocName);
        String DocSummery = param_docSummery+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_Summary",DocSummery);
        caller.pause("1000");
        caller.click("Browse_Doc.rdo_PublicForum");
        caller.pause("500");
        caller.click("Browse_Doc.rdo_File");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.checkElementPresent("Browse_Doc.ele_lblThisFieldisRequired",false,"");
        //Upload the file
        //Type docname
         java.io.File file = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator +param_File);
        String entirePath = file.getAbsolutePath();
        caller.type("Browse_Doc.tf_BrowseFile",entirePath);
        caller.doubleClick("Browse_Doc.btn_AddDocument");
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lbltableName","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + param_rdoPublicForumOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableType","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + param_rdoPublicForumOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableModifiedOn","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + param_rdoPublicForumOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableAction","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + param_rdoPublicForumOne,false,"");
        caller.click("Browse_Doc.lnk_open","param_docName_PARAM:" + DocName);
        caller.checkFileInfo(param_downloadedFile,"EXIST",false,"");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        caller.pause("3000");
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("1000");
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.click("APIStoreDocumentation.lnk_PublicForum");
        caller.click("APIStoreDocumentation.lnk_Download","param_docName_PARAM:" + DocName);
        //Check for downloaded file
        caller.checkFileInfo(param_downloadedFile,"EXIST",false,"");
        caller.pause("2000");
        caller.writeToReport("APIM_99 Successfully Passed");	
    }
    /**
     *  Business component APIM_98.
     */
    public final static void APIM_98(final SeleniumTestBase caller, final String param_docName, final String param_docSummery, final String param_url, final String param_storeURL, final String param_publisherURL, final String param_rdoPublicForumOne, final String param_Domain) throws Exception {
        //APIM-98: Create a document given 'public forums' as the type and 'URL' as the source.
        //Navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        //Retrieve API name and the version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        //Search for the API name
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("500");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("500");
        caller.click("Browse_Doc.btn_AddNewDocument");
        String DocName = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocName);
        String DocSummery = param_docSummery+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_Summary",DocSummery);
        caller.pause("1000");
        caller.click("Browse_Doc.rdo_PublicForum");
        caller.pause("1000");
        caller.type("Browse_Doc.tf_URL",param_url);
        caller.pause("1000");
        caller.doubleClick("Browse_Doc.btn_AddDocument");
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lbltableName","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + param_rdoPublicForumOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableType","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + param_rdoPublicForumOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableModifiedOn","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + param_rdoPublicForumOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableAction","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + param_rdoPublicForumOne,false,"");
        caller.click("Browse_Doc.lnk_view","param_docName_PARAM:" + DocName);
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        caller.pause("3000");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("3000");
        caller.click("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("1000");
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.click("APIStoreDocumentation.lnk_PublicForum");
        caller.checkElementPresent("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocName + "_PARAM," + "param_URLLink_PARAM:" + param_url,false,"");
        caller.pause("2000");
        caller.writeToReport("APIM_98 Successfully Passed");	
    }
    /**
     *  Business component APIM_95.
     */
    public final static void APIM_95(final SeleniumTestBase caller, final String param_APIImagePath, final String param_APIVersion, final String param_tagName, final String param_APIName, final String param_ProductionEndPont, final String param_SandBoxEndpoint, final String param_docInvalidName, final String param_docName, final String param_docSummery, final String param_sourceUrl, final String param_storeURL, final String param_APIContext, final String param_publisherURL, final String param_Domain) throws Exception {
        //APIM-95: Create a document given 'Samples & SDK' as the type and 'URL' as the source.
        //Craeting new API
        lib_Common.bc_CreateAPI_DesignNew(caller, param_APIName,param_APIContext,param_APIVersion,param_APIImagePath,param_tagName);
        lib_Common.bc_PrototypeAPI(caller);
        caller.click("APIPublisherBrowse.ele_lblManagedAPI");
        caller.type("APIPublisherBrowse.tf_ProductionEndPoint",param_ProductionEndPont);
        caller.type("APIPublisherBrowse.tf_SandBoxEndPoint",param_SandBoxEndpoint);
        caller.click("APIPublisherBrowse.btn_Save1");
        //waiting for content load
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_NextManage");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.ele_ddTierAvilability");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.chk_Gold");
        caller.click("APIPublisherBrowse.chk_Silver");
        //Wait for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.btn_SaveAndPublish");
        //Wait for content load
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_Close");
        caller.pause("4000");
        //retrieving API name
        String APIName = caller.retrieveString("var_APIName");
        caller.click("APIPublisherHome.lnk_Browse");
        //Search for the API
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("2000");
        //adding new document
        caller.click("Browse_Doc.btn_AddNewDocument");
        //Wait for content load
        caller.pause("1000");
        //check the visibility of ad new document feilds
        caller.checkElementPresent("Browse_Doc.tf_DocName",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        caller.checkElementPresent("Browse_Doc.tf_Summary",false,"");
        //adding a document Using Invalid name
        caller.type("Browse_Doc.tf_DocName",param_docInvalidName);
        caller.checkElementPresent("Browse_Doc.rdo_SampleAndSDK",false,"");
        caller.click("Browse_Doc.rdo_SampleAndSDK");
        caller.pause("1000");
        caller.checkElementPresent("Browse_Doc.rdo_URL",false,"");
        caller.click("Browse_Doc.rdo_URL");
        caller.pause("3000");
        caller.click("Browse_Doc.btn_AddDocument");
        //Wait for error load
        caller.pause("6000");
        //check for error
        caller.checkElementPresent("Browse_Doc.ele_lblNameError",false,"");
        caller.pause("6000");
        //genarate docName
        String DocName = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocName);
        //genarate docSummery
        String DocSummery = param_docSummery+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_Summary",DocSummery);
        caller.click("Browse_Doc.btn_AddDocument");
        //check for warning
        caller.pause("6000");
        caller.checkElementPresent("Browse_Doc.ele_lblNameRequiredWarningMessage",false,"");
        caller.pause("6000");
        caller.type("Browse_Doc.tf_URL",param_sourceUrl);
        caller.click("Browse_Doc.btn_AddDocument");
        //wait till page load
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.ele_lblSamples","param_docName_PARAM:" + DocName,false,"");
        caller.click("Browse_Doc.lnk_view","param_docName_PARAM:" + DocName);
        //wait
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        lib_Common.bc_StoreLogin(caller, param_Domain);
        caller.pause("3000");
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        //wait for page load
        caller.click("APIStoreDocumentation.lnk_Samples");
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + DocName,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocName + "_PARAM," + "param_URLLink_PARAM:" + param_sourceUrl,false,"");
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocName + "_PARAM," + "param_URLLink_PARAM:" + param_sourceUrl);
        caller.pause("6000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("4000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("3000");
        //Navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"4000");
        caller.writeToReport("APIM_95 Successfully Passed");	
    }
    /**
     *  Business component APIM_96.
     */
    public final static void APIM_96(final SeleniumTestBase caller, final String param_publisherURL, final String param_docName, final String param_docSummery, final String param_rdoSampleSdkOne, final String param_fileDownloaded, final String param_storeURL, final String param_fileToUpload, final String param_Domain) throws Exception {
        //APIM-96: Create a document given 'Samples and SDK' as the type and 'file' as the source.
        //Navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        //Retrieve API name and the version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        //Search for the API name
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("500");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("500");
        caller.click("Browse_Doc.btn_AddNewDocument");
        //genarate docName & Summery
        String DocName = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocName);
        String DocSummery = param_docSummery+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_Summary",DocSummery);
        caller.pause("1000");
        caller.click("Browse_Doc.rdo_SampleAndSDK");
        caller.pause("500");
        caller.click("Browse_Doc.rdo_File");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("1000");
        caller.checkElementPresent("Browse_Doc.ele_lblThisFieldisRequired",false,"");
        caller.type("Browse_Doc.tf_DocName",DocName);
        caller.type("Browse_Doc.tf_Summary",DocSummery);
        caller.pause("1000");
        caller.click("Browse_Doc.rdo_SampleAndSDK");
        caller.pause("500");
        //Type docname
         java.io.File file = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator +param_fileToUpload);
        String entirePath = file.getAbsolutePath();
        caller.type("Browse_Doc.tf_BrowseFile",entirePath);
        caller.pause("1000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lbltableName","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + param_rdoSampleSdkOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableType","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + param_rdoSampleSdkOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableModifiedOn","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + param_rdoSampleSdkOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableAction","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:" + param_rdoSampleSdkOne,false,"");
        caller.click("Browse_Doc.lnk_open","param_docName_PARAM:" + DocName);
        caller.pause("2000");
        //Check for downloaded file
        caller.checkFileInfo(param_fileDownloaded,"EXIST",false,"");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        caller.pause("3000");
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("1000");
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.click("APIStoreDocumentation.lnk_PublicForum");
        caller.click("APIStoreDocumentation.lnk_Download","param_docName_PARAM:" + DocName);
        //Check for downloaded file
        caller.checkFileInfo(param_fileDownloaded,"EXIST",false,"");
        caller.pause("2000");
        caller.writeToReport("APIM_96 Successfully Passed");	
    }
    /**
     *  Business component APIM_90.
     */
    /**
     *  Business component APIM_90.
     */
    public final static void APIM_90(final SeleniumTestBase caller) throws Exception {
        //APIM-90: Check whether system validates for empty fields in add new document page
        caller.click("APIPublisherHome.lnk_Browse");
        //Retriev Stored API name
        String APIName = caller.retrieveString("var_APIName");
        //Search for the API name
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("2000");
        //adding new document
        caller.click("Browse_Doc.btn_AddNewDocument");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_AddDocument");
        //wait for validation message/verify the required field message
        caller.checkElementPresent("Browse_Doc.ele_lblNameRequiredWarningMessage",false,"");
        caller.pause("3000");
        caller.writeToReport("APIM_90 Successfully Passed");	
    }
    /**
     *  Business component APIM_91.
     */
    public final static void APIM_91(final SeleniumTestBase caller, final String param_docSummery, final String param_storeURL, final String param_publisherURL, final String param_docName, final String param_Domain) throws Exception {
        //APIM-91: Successfully add new in-line, 'how to' type document.
        //Retrieve the  stored API name
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.checkElementPresent("Browse_Doc.tf_DocName",false,"");
        //genarate docName
        String DocName = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocName);
        caller.checkElementPresent("Browse_Doc.tf_Summary",false,"");
        //genarate docSummery
        String DocSummery = param_docSummery+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_Summary",DocSummery);
        caller.checkElementPresent("Browse_Doc.rdo_HowTo",false,"");
        caller.click("Browse_Doc.rdo_HowTo");
        caller.checkElementPresent("Browse_Doc.rdo_Inline",false,"");
        caller.click("Browse_Doc.rdo_Inline");
        caller.click("Browse_Doc.btn_AddDocument");
        //wait till page load
        caller.pause("6000");
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocName,false,"");
        //check added document column names
        caller.checkElementPresent("Browse_Doc.ele_lbltableName","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:How To",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableType","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:How To",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltablevisibility","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:How To",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lbltableModifiedOn","docName_PARAM:" + DocName + "_PARAM," + "docType_PARAM:How To",false,"");
        //check for action column links
        caller.checkElementPresent("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocName,false,"");
        caller.checkElementPresent("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocName,false,"");
        caller.checkElementPresent("Browse_Doc.btn_Delete","param_DocName_PARAM:" + DocName,false,"");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        caller.pause("3000");
        //Search for the API name
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        //wait till page load
        caller.click("APIStoreAPIs.lnk_HowTo");
        //check for added document
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + DocName,false,"");
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + DocName);
        caller.pause("6000");
        //Open new window or tab
        caller.selectWindow("Browse_Doc.window");
        caller.checkElementPresent("APIStoreDocumentation.ele_lblViewContentPageText","paramDocName_PARAM:" + DocName,false,"");
        caller.pause("6000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("2000");
        //Navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Search for the API name
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("3000");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocName);
        caller.pause("6000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("2000");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + APIVersion,false,"");
        caller.selectFrame("Browse_Doc.frame1");
        caller.pause("4000");
        caller.checkElementPresent("Browse_Doc.tf_EditContent1",false,"");
        caller.click("Browse_Doc.tf_EditContent1");
        caller.pause("500");
        //Genarate Edit Content
        String EditContent = "Content"+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_EditContent1",EditContent);
        caller.pause("4000");
        caller.fireEvent("KEY%key=\t|key=\t|key=\t|key=\n","5000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("5000");
        //check for the document details
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocName,false,"");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocName);
        caller.pause("6000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("4000");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + APIVersion,false,"");
        caller.selectFrame("Browse_Doc.frame1");
        caller.pause("4000");
        caller.checkElementPresent("Browse_Doc.tf_EditContent1",false,"");
        caller.click("Browse_Doc.tf_EditContent1");
        caller.pause("500");
        caller.type("Browse_Doc.tf_EditContent1",EditContent);
        caller.pause("4000");
        caller.fireEvent("KEY%key=\t|key=\n","5000");
        caller.click("Browse_Doc.tf_EditContent1");
        caller.pause("1000");
        caller.type("Browse_Doc.tf_EditContent1",EditContent);
        caller.fireEvent("KEY%key=\t|key=\t|key=\n","6000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("5000");
        //check for the document details
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocName,false,"");
        caller.writeToReport("APIM_91 Successfully Passed");	
    }
    /**
     *  Business component APIM_92.
     */
    public final static void APIM_92(final SeleniumTestBase caller, final String param_docInvalidName, final String param_sourceURL, final String param_docInvalidNameTwo, final String param_publisherURL, final String param_storeURL, final String param_docName, final String param_Domain) throws Exception {
        //APIM-92: Create a document given 'How to' as the type and 'URL' as the source.
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("3000");
        caller.click("Browse_Doc.btn_AddNewDocument");
        //wait till page load
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.tf_DocName",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        caller.checkElementPresent("Browse_Doc.tf_Summary",false,"");
        caller.type("Browse_Doc.tf_DocName",param_docInvalidName);
        caller.checkElementPresent("Browse_Doc.rdo_HowTo",false,"");
        caller.click("Browse_Doc.rdo_HowTo");
        caller.checkElementPresent("Browse_Doc.rdo_URL",false,"");
        caller.click("Browse_Doc.rdo_URL");
        caller.pause("1000");
        caller.click("Browse_Doc.btn_AddDocument");
        //Validate for error messages
        caller.pause("1000");
        caller.checkElementPresent("Browse_Doc.ele_lblNameError",false,"");
        caller.pause("1000");
        caller.type("Browse_Doc.tf_DocName",param_docInvalidNameTwo);
        caller.click("Browse_Doc.rdo_HowTo");
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_URL");
        caller.click("Browse_Doc.btn_AddDocument");
        //validate the error message
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.ele_lblNameError",false,"");
        caller.pause("1000");
        //genarate docName
        String DocName = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocName);
        caller.click("Browse_Doc.btn_AddDocument");
        //validate required fields
        caller.checkElementPresent("Browse_Doc.ele_lblNameRequiredWarningMessage",false,"");
        caller.type("Browse_Doc.tf_DocName",DocName);
        caller.click("Browse_Doc.rdo_URL");
        caller.type("Browse_Doc.tf_URL",param_sourceURL);
        caller.pause("1000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("1000");
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocName,false,"");
        //wait for page load
        caller.pause("5000");
        caller.click("Browse_Doc.btn_View","param_docName_PARAM:" + DocName);
        caller.pause("6000");
        caller.selectWindow("Browse_Doc.window");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("2000");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        caller.pause("3000");
        caller.pause("3000");
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.click("APIStoreAPIs.lnk_HowTo");
        caller.pause("1000");
        caller.checkElementPresent("APIStoreDocumentation.ele_lblDocumentName","param_docName_PARAM:" + DocName,false,"");
        caller.checkElementPresent("APIStoreAPIs.lnk_edditedUrl","EdditedUrl_PARAM:" + param_sourceURL,false,"");
        caller.click("APIStoreAPIs.lnk_edditedUrl","EdditedUrl_PARAM:" + param_sourceURL);
        caller.pause("6000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("2000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.pause("2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("2000");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.writeToReport("APIM_92 Successfully Passed");	
    }
    /**
     *  Business component APIM_93.
     */
    public final static void APIM_93(final SeleniumTestBase caller, final String param_docName, final String param_uploadDocLocation, final String param_docSummery, final String param_storeURL, final String param_DownloadFilePath, final String param_APIVersion, final String param_publisherURL, final String param_downImagePopup, final String param_Domain) throws Exception {
        //APIM-93: Create a document given 'How To' as the type and 'file' as the source.
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("2000");
        //adding new document
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddNewDocument");
        //wait for page load
        caller.checkElementPresent("Browse_Doc.tf_DocName",false,"");
        //genarate docName & Summery
        String DocName = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocName);
        String DocSummery = param_docSummery+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_Summary",DocSummery);
        caller.click("Browse_Doc.rdo_HowTo");
        caller.pause("1000");
        caller.click("Browse_Doc.rdo_File");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("1000");
        caller.checkElementPresent("Browse_Doc.ele_lblNameRequiredWarningMessage",false,"");
        caller.pause("1000");
        caller.checkElementPresent("Browse_Doc.tf_DocName",false,"");
        caller.type("Browse_Doc.tf_DocName",DocName);
        caller.type("Browse_Doc.tf_Summary",DocSummery);
        caller.click("Browse_Doc.rdo_HowTo");
        caller.pause("1000");
        caller.click("Browse_Doc.rdo_File");
        //Type docname
         java.io.File file = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator +param_uploadDocLocation);
        String entirePath = file.getAbsolutePath();
        caller.type("Browse_Doc.tf_BrowseFile",entirePath);
        caller.click("Browse_Doc.btn_AddDocument");
        //wait for page load
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocName,false,"");
        caller.click("Browse_Doc.lnk_open","param_docName_PARAM:" + DocName);
        //wait for download the file
        caller.pause("3000");
        caller.pause("2000");
        String downImagePopup1 = param_downImagePopup;
        if(caller.checkImagePresent(downImagePopup1,false)){
        caller.fireEvent("KEY%key=alt+s","2000");
        caller.fireEvent("KEY%key=alt+a","2000");
        caller.fireEvent("KEY%key=\n","1000");
        }
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        caller.pause("3000");
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.click("APIStoreAPIs.lnk_HowTo");
        caller.pause("1000");
        caller.checkElementPresent("APIStoreDocumentation.ele_lblDocumentName","param_docName_PARAM:" + DocName,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_Download","param_docName_PARAM:" + DocName,false,"");
        caller.click("APIStoreDocumentation.lnk_Download","param_docName_PARAM:" + DocName);
        caller.pause("1000");
        //Check downloaded Document
        caller.checkFileInfo(param_DownloadFilePath,"EXIST",false,"");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.writeToReport("APIM_93 Successfully Passed");	
    }
    /**
     *  Business component APIM_94.
     */
    public final static void APIM_94(final SeleniumTestBase caller, final String param_docName, final String param_docSummery, final String param_storeURL, final String param_publisherURL, final String param_Domain) throws Exception {
        caller.writeToReport("Start of APIM_94");
        //APIM-94: Create a document given 'samples & sdk' as the type and in-line as the source.
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("3000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Search for the API name
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("2000");
        //adding new document
        caller.click("Browse_Doc.btn_AddNewDocument");
        //wait for page load
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.tf_DocName",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        caller.checkElementPresent("Browse_Doc.tf_Summary",false,"");
        //genarate docName & Summery
        String DocName = param_docName+"_"+caller.generateData("int",3);
        caller.store("var_DaocName","String",DocName);
        caller.type("Browse_Doc.tf_DocName",DocName);
        String DocSummery = param_docSummery+"_"+caller.generateData("int",3);
        caller.type("Browse_Doc.tf_Summary",DocSummery);
        caller.click("Browse_Doc.rdo_SampleAndSDK");
        caller.pause("500");
        caller.click("Browse_Doc.rdo_Inline");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.ele_lblSamples","param_docName_PARAM:" + DocName,false,"");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocName);
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.newWindow1");
        caller.pause("4000");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + APIVersion,false,"");
        caller.selectFrame("Browse_Doc.frame1");
        caller.pause("4000");
        caller.checkElementPresent("Browse_Doc.tf_EditContent1",false,"");
        caller.click("Browse_Doc.tf_EditContent1");
        caller.pause("500");
        String EditContent = "Content"+"_"+caller.generateData("int",3);
        caller.type("Browse_Doc.tf_EditContent1",EditContent);
        caller.pause("4000");
        caller.fireEvent("KEY%key=\t|key=\t|key=\t|key=\n","5000");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("5000");
        caller.checkElementPresent("Browse_Doc.ele_lblSamples","param_docName_PARAM:" + DocName,false,"");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocName);
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.newWindow1");
        caller.pause("4000");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + APIVersion,false,"");
        caller.selectFrame("Browse_Doc.frame1");
        caller.pause("4000");
        caller.checkElementPresent("Browse_Doc.tf_EditContent1",false,"");
        caller.click("Browse_Doc.tf_EditContent1");
        caller.pause("500");
        caller.type("Browse_Doc.tf_EditContent1",EditContent);
        caller.pause("4000");
        caller.fireEvent("KEY%key=\t|key=\t|key=\n","5000");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lblSamples","param_docName_PARAM:" + DocName,false,"");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_Samples");
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + DocName);
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("4000");
        caller.checkElementPresent("APIStoreDocumentation.ele_documentViewText","param_text_PARAM:" + EditContent + "_PARAM," + "param_docName_PARAM:" + DocName,false,"");
        caller.pause("6000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("2000");
        //Navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.writeToReport("APIM_94 Successfully Passed");
        caller.writeToReport("End of APIM_94");	
    }
    /**
     *  Business component APIM_347.
     */
    /**
     *  Business component APIM_347.
     */
    public final static void APIM_347(final SeleniumTestBase caller) throws Exception {
        caller.writeToReport("Start of APIM_347");
        //APIM-347: User should not be able to Create a document with the same name that already added
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String DocName = caller.retrieveString("var_DaocName");
        caller.pause("3000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Search for the API name
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("4000");
        caller.click("Browse_Doc.btn_AddNewDocument");
        //wait for page load
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.tf_DocName",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        caller.checkElementPresent("Browse_Doc.tf_Summary",false,"");
        caller.type("Browse_Doc.tf_DocName",DocName);
        caller.pause("1000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("4000");
        caller.checkElementPresent("Browse_Doc.ele_lblDuplicateDocName",false,"");
        caller.pause("5000");
        caller.writeToReport("APIM_347 Successfully Passed");	
    }
    /**
     *  Business component APIM_97.
     */
    public final static void APIM_97(final SeleniumTestBase caller, final String param_docName, final String param_docSummery) throws Exception {
        caller.writeToReport("Start of APIM_97");
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("3000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("5000");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("2000");
        //adding new document
        caller.click("Browse_Doc.btn_AddNewDocument");
        //wait for page load
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.tf_DocName",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        caller.checkElementPresent("Browse_Doc.tf_Summary",false,"");
        String DocName = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocName);
        String DocSummery = param_docSummery+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_Summary",DocSummery);
        caller.click("Browse_Doc.rdo_PublicForum");
        caller.pause("1000");
        if(caller.checkElementPresent("Browse_Doc.rdo_DisableInline")){
        caller.writeToReport("Inline Radio button is disable");
        }
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("6000");
        caller.writeToReport("APIM_97 Successfully Passed");	
    }
    /**
     *  Business component APIM_348.
     */
    public final static void APIM_348(final SeleniumTestBase caller, final String param_docName, final String param_docSummery, final String param_storeURL, final String param_serverName, final String param_usernameStore, final String param_passwordStore) throws Exception {
        caller.writeToReport("Start of APIM_348");
        //APIM-348: User added a document with summary
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("3000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Search for the API name
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIVersion + "_PARAM," + "param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("2000");
        //adding new document
        caller.click("Browse_Doc.btn_AddNewDocument");
        //wait for page load
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.tf_DocName",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        caller.checkElementPresent("Browse_Doc.tf_Summary",false,"");
        //genarate docName & Summery
        String DocName = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocName);
        String DocSummery = param_docSummery+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_Summary",DocSummery);
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocName,false,"");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + param_serverName);
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.click("APIStoreAPIs.lnk_HowTo");
        caller.pause("1000");
        caller.checkElementPresent("Browse_Doc.ele_lblDocSummery","param_Summery_PARAM:" + DocSummery + "_PARAM," + "param_DocName_PARAM:" + DocName,false,"");
        caller.writeToReport("APIM_348 Successfully Passed");	
    }
    /**
     *  Business component APIM_115.
     */
    public final static void APIM_115(final SeleniumTestBase caller, final String param_docName) throws Exception {
        //APIM-115: User should get validation message when trying to update document having an empty source URL
        caller.writeToReport("Start  Executing APIM-115");
        caller.click("APIPublisherHome.lnk_Browse");
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("3000");
        //Search for the API name
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_AddNewDocument");
        //Wait for content load
        caller.pause("3000");
        //genarate docName
        String DocName = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocName);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocName);
        //verify whether goes to  edit document page
        //Wait for content load
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.tf_Summary",false,"");
        //select URL
        caller.click("Browse_Doc.rdo_URL");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        //Wait for content load
        caller.pause("3000");
        //Verify required field warning
        caller.checkElementPresent("Browse_Doc.ele_lblRequiredFieldWarning",false,"");
        //Wait for content load
        caller.pause("3000");
        //select file
        caller.click("Browse_Doc.rdo_File");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        caller.checkElementPresent("Browse_Doc.ele_lblFileUploadingNullMessage",false,"");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_OkPopUp");
        //Wait for content load
        caller.pause("3000");
        caller.writeToReport("End of  Executing APIM-165");	
    }
    /**
     *  Business component APIM_165.
     */
    public final static void APIM_165(final SeleniumTestBase caller, final String param_docName, final String param_editContent, final String param_storeURL, final String param_publisherURL, final String param_Domain) throws Exception {
        //APIM-165: Check whether system save changes when user adds special characters to the content of inline docs
        caller.writeToReport("Start  Executing APIM-165");
        caller.pause("3000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("3000");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("2000");
        //adding new document
        caller.click("Browse_Doc.btn_AddNewDocument");
        //wait for page load
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.tf_DocName",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        caller.checkElementPresent("Browse_Doc.tf_Summary",false,"");
        //genarate docName
        String DocName = param_docName+"_"+caller.generateData("int",4);
        caller.store("var_DocName","String",DocName);
        caller.type("Browse_Doc.tf_DocName",DocName);
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocName,false,"");
        caller.pause("3000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocName);
        caller.pause("6000");
        caller.selectWindow("Browse_Doc.newWindow1");
        caller.pause("4000");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + APIVersion,false,"");
        caller.selectFrame("Browse_Doc.frame1");
        caller.pause("4000");
        caller.checkElementPresent("Browse_Doc.tf_EditContent1",false,"");
        caller.click("Browse_Doc.tf_EditContent1");
        caller.pause("500");
        caller.type("Browse_Doc.tf_EditContent1",param_editContent);
        caller.pause("4000");
        caller.fireEvent("KEY%key=\t|key=\t|key=\n","5000");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocName,false,"");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        lib_Common.bc_StoreLogin(caller, param_Domain);
        caller.pause("3000");
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.pause("3000");
        caller.click("APIStoreAPIs.lnk_HowTo");
        caller.pause("6000");
        caller.checkElementPresent("APIStoreDocumentation.ele_lblDocumentName","param_docName_PARAM:" + DocName,false,"");
        caller.click("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + DocName);
        caller.pause("4000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("4000");
        caller.checkElementPresent("APIStoreDocumentation.ele_documentViewText","param_text_PARAM:" + param_editContent + "_PARAM," + "param_docName_PARAM:" + DocName,false,"");
        caller.pause("6000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        //Navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.writeToReport("End of  Executing APIM-165");	
    }
    /**
     *  Business component APIM_121.
     */
    public final static void APIM_121(final SeleniumTestBase caller, final String param_OtherName, final String param_URL, final String param_DocLocation, final String param_storeURL, final String param_PublisherURL, final String param_docName, final String param_Domain) throws Exception {
        //APIM-121: Check whether documents of type other get deleted successfully.
        caller.writeToReport("Start  Executing APIM-121");
        caller.click("APIPublisherHome.lnk_Browse");
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("3000");
        //Search for the API name
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        caller.click("Browse_Doc.btn_AddNewDocument");
        //genarate docName one
        String DocNameOne = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameOne);
        caller.click("Browse_Doc.rdo_Other");
        caller.type("Browse_Doc.tf_Other",param_OtherName);
        caller.click("Browse_Doc.btn_AddDocument");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_AddNewDocument");
        //Wait for content load
        caller.pause("2000");
        //genarate docName Two
        String DocNameTwo = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameTwo);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_Other");
        //Wait for content load
        caller.pause("2000");
        caller.type("Browse_Doc.tf_Other",param_OtherName);
        caller.click("Browse_Doc.rdo_URL");
        //Wait for content load
        caller.pause("2000");
        caller.type("Browse_Doc.tf_URL",param_URL);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddNewDocument");
        //Wait for content load
        caller.pause("3000");
        //genarate docName Three
        String DocNameThree = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameThree);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_Other");
        caller.type("Browse_Doc.tf_Other",param_OtherName);
        caller.click("Browse_Doc.rdo_File");
        //Wait for content load
        caller.pause("2000");
        //Type docname
         java.io.File file = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator +param_DocLocation);
        String entirePath = file.getAbsolutePath();
        caller.type("Browse_Doc.tf_BrowseFile",entirePath);
        caller.click("Browse_Doc.btn_AddDocument");
        //Wait for content load
        caller.pause("4000");
        caller.click("Browse_Doc.btn_Delete","param_DocName_PARAM:" + DocNameOne);
        //Wait for content load
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.ele_lblDocDeleteConfirmationMessage","param_docName_PARAM:" + DocNameOne,false,"");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.lnk_Yes");
        //Wait for content load
        caller.pause("3000");
        //Verify whether doc is not under document tab
        caller.checkObjectProperty("Browse_Doc.ele_lblDocNameDocsTab","param_APIName_PARAM:" + APIName + "_PARAM," + "param_DocName_PARAM:" + DocNameOne,"ELEMENTPRESENT","false",false,"");
        //Wait for content load
        caller.pause("2000");
        //Navigate to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        lib_Common.bc_StoreLogin(caller, param_Domain);
        //Wait for content load
        caller.pause("4000");
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + APIName);
        //Wait for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.click("APIStoreDocumentation.lnk_Other");
        //Wait for content load
        caller.pause("2000");
        //Verify doc is not uner documentation
        caller.checkObjectProperty("APIStoreDocumentation.ele_lblDocumentName","param_docName_PARAM:" + DocNameOne,"ELEMENTPRESENT","false",false,"");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_PublisherURL,"3000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Wait for content load
        caller.pause("3000");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        //Wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_Delete","param_DocName_PARAM:" + DocNameTwo);
        //Wait for content load
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lblDocDeleteConfirmationMessage","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.click("Browse_Doc.lnk_Yes");
        //Wait for content load
        caller.pause("2000");
        //Verify whether doc is not under document tab
        caller.checkObjectProperty("Browse_Doc.ele_lblDocNameDocsTab","param_APIName_PARAM:" + APIName + "_PARAM," + "param_DocName_PARAM:" + DocNameTwo,"ELEMENTPRESENT","false",false,"");
        //Wait for content load
        caller.pause("2000");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        caller.pause("3000");
        //Wait for content load
        caller.pause("3000");
        caller.click("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.click("APIStoreDocumentation.lnk_Other");
        //Verify doc is not uner documentation
        caller.checkObjectProperty("APIStoreDocumentation.ele_lblDocumentName","param_docName_PARAM:" + DocNameTwo,"ELEMENTPRESENT","false",false,"");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_PublisherURL,"3000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Wait for content load
        caller.pause("3000");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        //Wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_Delete","param_DocName_PARAM:" + DocNameThree);
        //Wait for content load
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lblDocDeleteConfirmationMessage","param_docName_PARAM:" + DocNameThree,false,"");
        caller.click("Browse_Doc.lnk_Yes");
        //Wait for content load
        caller.pause("2000");
        //Verify whether doc is not under document tab
        caller.checkObjectProperty("Browse_Doc.ele_lblDocNameDocsTab","param_APIName_PARAM:" + APIName + "_PARAM," + "param_DocName_PARAM:" + DocNameThree,"ELEMENTPRESENT","false",false,"");
        //Wait for content load
        caller.pause("2000");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        caller.pause("3000");
        caller.click("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.click("APIStoreAPIs.lnk_Documentations");
        //Wait for content load
        caller.pause("3000");
        caller.checkObjectProperty("APIStoreDocumentation.lnk_Other","ELEMENTPRESENT","false",false,"");
        //Wait for content load
        caller.pause("3000");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_PublisherURL,"3000");
        caller.pause("2000");
        caller.writeToReport("End of  Executing APIM-121");	
    }
    /**
     *  Business component APIM_120.
     */
    public final static void APIM_120(final SeleniumTestBase caller, final String param_URL, final String param_docLocation, final String param_Domain, final String param_storeURL, final String param_PublisherURL, final String param_docName) throws Exception {
        //APIM-120: Check whether documents of type 'support forum' get deleted successfully.
        caller.writeToReport("Start  Executing APIM-120");
        caller.click("APIPublisherHome.lnk_Browse");
        //Wait for content load
        caller.pause("2000");
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        //Wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        caller.click("Browse_Doc.btn_AddNewDocument");
        //genarate docName
        String DocNameOne = param_docName+"_"+caller.generateData("int",3);
        caller.type("Browse_Doc.tf_DocName",DocNameOne);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_SupportForum");
        caller.type("Browse_Doc.tf_URL",param_URL);
        caller.click("Browse_Doc.btn_AddDocument");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_AddNewDocument");
        //genarate docName
        String DocNameTwo = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameTwo);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_SupportForum");
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_File");
        //Type docname
         java.io.File file = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator +param_docLocation);
        String entirePath = file.getAbsolutePath();
        caller.type("Browse_Doc.tf_BrowseFile",entirePath);
        caller.click("Browse_Doc.btn_AddDocument");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_Delete","param_DocName_PARAM:" + DocNameOne);
        //Wait for content load
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lblDocDeleteConfirmationMessage","param_docName_PARAM:" + DocNameOne,false,"");
        caller.click("Browse_Doc.lnk_Yes");
        //Wait for content load
        caller.pause("2000");
        //Verify whether doc is not under document tab
        caller.checkObjectProperty("Browse_Doc.ele_lblDocNameDocsTab","param_APIName_PARAM:" + APIName + "_PARAM," + "param_DocName_PARAM:" + DocNameOne,"ELEMENTPRESENT","false",false,"");
        //Wait for content load
        caller.pause("2000");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        caller.pause("3000");
        //Wait for content load
        caller.pause("3000");
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + APIName);
        //Wait for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_Documentations");
        //Wait for content load
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_SupportForum");
        //Verify doc is not uner documentation
        caller.checkObjectProperty("APIStoreDocumentation.ele_lblDocumentName","param_docName_PARAM:" + DocNameOne,"ELEMENTPRESENT","false",false,"");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_PublisherURL,"3000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        //Wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_Delete","param_DocName_PARAM:" + DocNameTwo);
        //Wait for content load
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lblDocDeleteConfirmationMessage","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.click("Browse_Doc.lnk_Yes");
        //Wait for content load
        caller.pause("2000");
        //Verify whether doc is not under document tab
        caller.checkObjectProperty("Browse_Doc.ele_lblDocNameDocsTab","param_APIName_PARAM:" + APIName + "_PARAM," + "param_DocName_PARAM:" + DocNameTwo,"ELEMENTPRESENT","false",false,"");
        //Wait for content load
        caller.pause("2000");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        caller.pause("3000");
        caller.click("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.checkObjectProperty("APIStoreDocumentation.lnk_SupportForum","ELEMENTPRESENT","false",false,"");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_PublisherURL,"3000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        //Wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("3000");
        caller.writeToReport("End of  Executing APIM-120");	
    }
    /**
     *  Business component APIM_422.
     */
    public final static void APIM_422(final SeleniumTestBase caller, final String param_APIName, final String param_APIVersion, final String param_APIImagePath, final String param_tagName, final String param_verbGet, final String param_verbPost, final String param_verbPut, final String param_verbOption, final String param_ProductionEndpointUrl, final String param_Application, final String param_ApplicationUser, final String param_ApplicationAndApplicationUser, final String param_None, final String param_newVersion) throws Exception {
        //APIM_422 Testcase
        caller.writeToReport("Start Executing APIM-422");
        //CreateAPI upto design Stage
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Type API Name as a variable
        String varAPINameResourceLevelSecurity = param_APIName+caller.generateData("int",3);
        //storing API name
        caller.store("keyAPINameResourceLevelSecurity","String",varAPINameResourceLevelSecurity);
        caller.type("APIPublisherAdd.tf_APIName",varAPINameResourceLevelSecurity);
        //Type API context
        String APIcontest = "api"+caller.generateData("int",3);
        caller.type("APIPublisherAdd.tf_APIContext",APIcontest);
        caller.type("APIPublisherAdd.tf_APIVersion",param_APIVersion);
        //Type valid image path
        /*
        Type
         object=APIPublisherAdd.btn_BrowseImage
         text=@param_APIImagePath
        */
        caller.type("APIPublisherAdd.tf_Tags",param_tagName);
        caller.fireEvent("KEY%key=\n","2000");
        //waiting for content load
        caller.pause("6000");
        //ticks relevant fields
        caller.click("APIPublisherBrowse.chk_verbMethod","verb_PARAM:" + param_verbGet);
        caller.click("APIPublisherBrowse.chk_verbMethod","verb_PARAM:" + param_verbPost);
        caller.click("APIPublisherBrowse.chk_verbMethod","verb_PARAM:" + param_verbPut);
        caller.click("APIPublisherBrowse.ele_lblMore");
        caller.click("APIPublisherBrowse.chk_verbMethod","verb_PARAM:" + param_verbOption);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //waiting for content load
        caller.pause("1000");
        caller.click("APIPublisherBrowse.btn_Yes");
        caller.click("APIPublisherBrowse.ele_lblManagedAPI");
        //waiting for content load
        caller.pause("1000");
        caller.type("APIPublisherBrowse.tf_ProductionEndPoint",param_ProductionEndpointUrl);
        //waiting for content load
        caller.pause("500");
        caller.click("APIPublisherBrowse.btn_NextManage");
        lib_Common.bc_SelectTiers(caller);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_ResourceLevelType","param_verbMethod_PARAM:" + param_verbGet);
        //waiting for content load
        caller.pause("500");
        caller.select("APIPublisherBrowse.ele_ddResourseLevelType",param_Application);
        //waiting for content load
        caller.pause("500");
        caller.click("APIPublisherBrowse.btn_right");
        //waiting for content load
        caller.pause("1000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblResourceLevelType1","param_verbType_PARAM:" + param_verbGet + "_PARAM," + "param_ResourceLevelType_PARAM:" + param_Application,false,"");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_ResourceLevelType","param_verbMethod_PARAM:" + param_verbPost);
        //waiting for content load
        caller.pause("500");
        caller.select("APIPublisherBrowse.ele_ddResourseLevelType",param_ApplicationUser);
        //waiting for content load
        caller.pause("500");
        caller.click("APIPublisherBrowse.btn_right");
        //waiting for content load
        caller.pause("1000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblResourceLevelType1","param_verbType_PARAM:" + param_verbPost + "_PARAM," + "param_ResourceLevelType_PARAM:" + param_ApplicationUser,false,"");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_ResourceLevelType","param_verbMethod_PARAM:" + param_verbPut);
        //waiting for content load
        caller.pause("500");
        caller.select("APIPublisherBrowse.ele_ddResourseLevelType",param_ApplicationAndApplicationUser);
        //waiting for content load
        caller.pause("500");
        caller.click("APIPublisherBrowse.btn_right");
        //waiting for content load
        caller.pause("1000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblResourceLevelType1","param_verbType_PARAM:" + param_verbPut + "_PARAM," + "param_ResourceLevelType_PARAM:" + param_ApplicationAndApplicationUser,false,"");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_ResourceLevelType","param_verbMethod_PARAM:" + param_verbOption);
        //waiting for content load
        caller.pause("500");
        caller.select("APIPublisherBrowse.ele_ddResourseLevelType",param_None);
        //waiting for content load
        caller.pause("500");
        caller.click("APIPublisherBrowse.btn_right");
        //waiting for content load
        caller.pause("1000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblResourceLevelType1","param_verbType_PARAM:" + param_verbOption + "_PARAM," + "param_ResourceLevelType_PARAM:" + param_None,false,"");
        caller.click("APIPublisherBrowse.lnk_ResourceLevelType","param_verbMethod_PARAM:" + param_verbOption);
        //waiting for content load
        caller.pause("500");
        caller.select("APIPublisherBrowse.ele_ddResourseLevelType",param_ApplicationUser);
        caller.pause("500");
        caller.click("APIPublisherBrowse.btn_right");
        //waiting for content load
        caller.pause("1000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblResourceLevelType1","param_verbType_PARAM:" + param_verbOption + "_PARAM," + "param_ResourceLevelType_PARAM:" + param_ApplicationUser,false,"");
        caller.click("APIPublisherBrowse.btn_SaveAndPublish");
        //waiting for content load
        caller.pause("1000");
        caller.click("APIPublisherBrowse.btn_Close");
        //waiting for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.lnk_Browse");
        String varAPINameResourceLevelSecurityOne = caller.retrieveString("keyAPINameResourceLevelSecurity");
        caller.type("APIPublisherHome.tf_APISearch",varAPINameResourceLevelSecurityOne);
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersion + "_PARAM," + "param_APIName_PARAM:" + param_APIName);
        //waiting for content load
        caller.pause("2000");
        caller.click("Browse_Overview.btn_CreateNewVersion");
        //waiting for content load
        caller.pause("500");
        caller.type("Browse_Overview.tf_ToVersion",param_newVersion);
        caller.click("Browse_Overview.btn_Done");
        //waiting for content load
        caller.pause("3000");
        caller.type("APIPublisherHome.tf_APISearch",param_APIName);
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("4000");
        caller.checkElementPresent("APIPublisherHome.ele_lblApiNamewithVersion","param_ApiName_PARAM:" + param_APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion,false,"");
        //waiting for content load
        caller.pause("2000");
        //retrieving API name
        String varAPINameResourceLevelSecurityTwo = caller.retrieveString("keyAPINameResourceLevelSecurity");
        caller.type("APIPublisherHome.tf_APISearch",varAPINameResourceLevelSecurityTwo);
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherHome.ele_lblApiNamewithVersion","param_version_PARAM:" + param_newVersion + "_PARAM," + "param_ApiName_PARAM:" + param_APIName);
        caller.click("APIPublisherBrowse.lnk_Edit");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_NextImplement");
        caller.click("APIPublisherBrowse.ele_lblManagedAPI");
        caller.click("APIPublisherBrowse.btn_NextManage");
        //waiting for content load
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblResourceLevelType1","param_verbType_PARAM:" + param_verbGet + "_PARAM," + "param_ResourceLevelType_PARAM:" + param_Application,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblResourceLevelType1","param_verbType_PARAM:" + param_verbPost + "_PARAM," + "param_ResourceLevelType_PARAM:" + param_ApplicationUser,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblResourceLevelType1","param_verbType_PARAM:" + param_verbPut + "_PARAM," + "param_ResourceLevelType_PARAM:" + param_ApplicationAndApplicationUser,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblResourceLevelType1","param_verbType_PARAM:" + param_verbOption + "_PARAM," + "param_ResourceLevelType_PARAM:" + param_ApplicationUser,false,"");
        caller.writeToReport("End of  Executing APIM-422");	
    }
    /**
     *  Business component APIM_119.
     */
    public final static void APIM_119(final SeleniumTestBase caller, final String param_URL, final String param_docLocation, final String param_Domain, final String param_storeURL, final String param_PublisherURL, final String param_docName) throws Exception {
        //APIM-119: Check whether documents of type 'public forum' get deleted successfully.
        caller.writeToReport("Start  Executing APIM-119");
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("3000");
        caller.click("Browse_Doc.btn_AddNewDocument");
        //Wait for content load
        caller.pause("2000");
        //genarate docName
        String DocNameOne = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameOne);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_PublicForum");
        //Wait for content load
        caller.pause("2000");
        caller.type("Browse_Doc.tf_URL",param_URL);
        caller.click("Browse_Doc.btn_AddDocument");
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddNewDocument");
        //Wait for content load
        caller.pause("2000");
        //genarate docName
        String DocNameTwo = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameTwo);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_PublicForum");
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_File");
        //Wait for content load
        caller.pause("2000");
        //Type docname
         java.io.File file = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator +param_docLocation);
        String entirePath = file.getAbsolutePath();
        caller.type("Browse_Doc.tf_BrowseFile",entirePath);
        caller.click("Browse_Doc.btn_AddDocument");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_Delete","param_DocName_PARAM:" + DocNameOne);
        //Wait for content load
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lblDocDeleteConfirmationMessage","param_docName_PARAM:" + DocNameOne,false,"");
        caller.click("Browse_Doc.lnk_Yes");
        //Wait for content load
        caller.pause("2000");
        //Verify whether doc is not under document tab
        caller.checkObjectProperty("Browse_Doc.ele_lblDocNameDocsTab","param_APIName_PARAM:" + APIName + "_PARAM," + "param_DocName_PARAM:" + DocNameOne,"ELEMENTPRESENT","false",false,"");
        //Wait for content load
        caller.pause("2000");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        caller.pause("3000");
        //Wait for content load
        caller.pause("3000");
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.click("APIStoreAPIs.lnk_Documentations");
        //Wait for content load
        caller.pause("2000");
        caller.click("APIStoreDocumentation.lnk_PublicForum");
        //Verify doc is not uner documentation
        caller.checkObjectProperty("APIStoreDocumentation.ele_lblDocumentName","param_docName_PARAM:" + DocNameOne,"ELEMENTPRESENT","false",false,"");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_PublisherURL,"3000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Wait for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        //Wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_Delete","param_DocName_PARAM:" + DocNameTwo);
        //Wait for content load
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lblDocDeleteConfirmationMessage","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.click("Browse_Doc.lnk_Yes");
        //Wait for content load
        caller.pause("2000");
        //Verify whether doc is not under document tab
        caller.checkObjectProperty("Browse_Doc.ele_lblDocNameDocsTab","param_APIName_PARAM:" + APIName + "_PARAM," + "param_DocName_PARAM:" + DocNameTwo,"ELEMENTPRESENT","false",false,"");
        //Wait for content load
        caller.pause("2000");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        caller.pause("3000");
        caller.click("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.click("APIStoreAPIs.lnk_Documentations");
        //Verify doc is not uner documentation
        caller.checkObjectProperty("APIStoreDocumentation.lnk_PublicForum","ELEMENTPRESENT","false",false,"");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_PublisherURL,"3000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Wait for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        //Wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("3000");
        caller.writeToReport("End of  Executing APIM-119");	
    }
    /**
     *  Business component APIM_196.
     */
    /**
     *  Business component APIM_196.
     */
    public final static void APIM_196(final SeleniumTestBase caller) throws Exception {
        //User who is successfully logged into the API store should be able to access my applications page by clicking on the my applications menu item.
        caller.writeToReport("Start  Executing APIM-196");
        //Go to my application
        caller.click("APIStoreHome.lnk_APIs");
        if(caller.checkElementPresent("APIStoreHome.lnk_MyApplication")){
        caller.click("APIStoreHome.lnk_MyApplication");
        } else {
        caller.click("APIStoreHome.lnk_iconMyApplication");
        }
        //verifications of application cretion feilds
        caller.checkElementPresent("APIStoreMyApllication.ele_lblAddApplication",false,"");
        caller.checkElementPresent("APIStoreMyApllication.tf_ApplicationName",false,"");
        caller.checkElementPresent("APIStoreMyApllication.ele_ddThrottlingTier",false,"");
        caller.checkElementPresent("APIStoreMyApllication.tf_CallBackURL",false,"");
        caller.checkElementPresent("APIStoreMyApllication.tf_Discription",false,"");
        caller.checkElementPresent("APIStoreMyApllication.btn_AddApplication",false,"");
        caller.writeToReport("End of Execution APIM_196");	
    }
    /**
     *  Business component APIM_118.
     */
    public final static void APIM_118(final SeleniumTestBase caller, final String param_URL, final String param_DocLocation, final String param_Domain, final String param_storeURL, final String param_PublisherURL, final String param_docName) throws Exception {
        //APIM-118: Check whether documents of type 'public forum' get deleted successfully.
        caller.writeToReport("Start  Executing APIM-118");
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("3000");
        caller.click("Browse_Doc.btn_AddNewDocument");
        //Wait for content load
        caller.pause("2000");
        //genarate docName
        String DocNameOne = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameOne);
        caller.click("Browse_Doc.rdo_SampleAndSDK");
        caller.click("Browse_Doc.btn_AddDocument");
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddNewDocument");
        //genarate docName
        String DocNameTwo = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameTwo);
        caller.click("Browse_Doc.rdo_SampleAndSDK");
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_URL");
        //Wait for content load
        caller.pause("1000");
        caller.type("Browse_Doc.tf_URL",param_URL);
        caller.click("Browse_Doc.btn_AddDocument");
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.click("Browse_Doc.rdo_SampleAndSDK");
        //Wait for content load
        caller.pause("2000");
        //genarate docName
        String DocNameThree = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameThree);
        caller.click("Browse_Doc.rdo_File");
        //Wait for content load
        caller.pause("2000");
        //Type docname
         java.io.File file = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator +param_DocLocation);
        String entirePath = file.getAbsolutePath();
        caller.type("Browse_Doc.tf_BrowseFile",entirePath);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_Delete","param_DocName_PARAM:" + DocNameOne);
        //Wait for content load
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lblDocDeleteConfirmationMessage","param_docName_PARAM:" + DocNameOne,false,"");
        caller.click("Browse_Doc.lnk_Yes");
        //Wait for content load
        caller.pause("2000");
        //Verify whether doc is not under document tab
        caller.checkObjectProperty("Browse_Doc.ele_lblDocNameDocsTab","param_APIName_PARAM:" + APIName + "_PARAM," + "param_DocName_PARAM:" + DocNameOne,"ELEMENTPRESENT","false",false,"");
        //Wait for content load
        caller.pause("2000");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        caller.pause("3000");
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.click("APIStoreAPIs.lnk_Documentations");
        //Wait for content load
        caller.pause("2000");
        caller.click("APIStoreDocumentation.lnk_Samples");
        //Verify doc is not uner documentation
        caller.checkObjectProperty("APIStoreDocumentation.ele_lblDocumentName","param_docName_PARAM:" + DocNameOne,"ELEMENTPRESENT","false",false,"");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_PublisherURL,"3000");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        //Wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_Delete","param_DocName_PARAM:" + DocNameTwo);
        //Wait for content load
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lblDocDeleteConfirmationMessage","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.click("Browse_Doc.lnk_Yes");
        //Wait for content load
        caller.pause("2000");
        //Verify whether doc is not under document tab
        caller.checkObjectProperty("Browse_Doc.ele_lblDocNameDocsTab","param_APIName_PARAM:" + APIName + "_PARAM," + "param_DocName_PARAM:" + DocNameTwo,"ELEMENTPRESENT","false",false,"");
        //Wait for content load
        caller.pause("2000");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        caller.pause("3000");
        caller.click("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + APIName);
        //Wait for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_Documentations");
        //Wait for content load
        caller.pause("2000");
        caller.click("APIStoreDocumentation.lnk_Samples");
        //Verify doc is not uner documentation
        caller.checkObjectProperty("APIStoreDocumentation.ele_lblDocumentName","param_docName_PARAM:" + DocNameTwo,"ELEMENTPRESENT","false",false,"");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_PublisherURL,"3000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Wait for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        //Wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_Delete","param_DocName_PARAM:" + DocNameThree);
        //Wait for content load
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lblDocDeleteConfirmationMessage","param_docName_PARAM:" + DocNameThree,false,"");
        caller.click("Browse_Doc.lnk_Yes");
        //Wait for content load
        caller.pause("2000");
        //Verify whether doc is not under document tab
        caller.checkObjectProperty("Browse_Doc.ele_lblDocNameDocsTab","param_APIName_PARAM:" + APIName + "_PARAM," + "param_DocName_PARAM:" + DocNameThree,"ELEMENTPRESENT","false",false,"");
        //Wait for content load
        caller.pause("2000");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        caller.pause("3000");
        caller.click("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + APIName);
        //Wait for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_Documentations");
        //Wait for content load
        caller.pause("2000");
        //Verify doc is not uner documentation
        caller.checkObjectProperty("APIStoreDocumentation.lnk_Samples","ELEMENTPRESENT","false",false,"");
        //Wait for content load
        caller.pause("2000");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_PublisherURL,"3000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Wait for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        //Wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("3000");
        caller.writeToReport("End of  Executing APIM-118");	
    }
    /**
     *  Business component APIM_117.
     */
    public final static void APIM_117(final SeleniumTestBase caller, final String param_URL, final String param_DocLocation, final String param_Domain, final String param_storeURL, final String param_PublisherURL, final String param_docName) throws Exception {
        //APIM-117: Check whether documents of type how to get deleted successfully.
        caller.writeToReport("Start  Executing APIM-117");
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("3000");
        caller.click("Browse_Doc.btn_AddNewDocument");
        //Wait for content load
        caller.pause("2000");
        //genarate docName
        String DocNameOne = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameOne);
        caller.click("Browse_Doc.btn_AddDocument");
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddNewDocument");
        //Wait for content load
        caller.pause("2000");
        //genarate docName
        String DocNameTwo = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameTwo);
        caller.click("Browse_Doc.rdo_URL");
        //Wait for content load
        caller.pause("2000");
        caller.type("Browse_Doc.tf_URL",param_URL);
        caller.click("Browse_Doc.btn_AddDocument");
        //Wait for content load
        caller.pause("2000");
        //genarate docName
        String DocNameThree = param_docName+"_"+caller.generateData("int",4);
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.type("Browse_Doc.tf_DocName",DocNameThree);
        caller.click("Browse_Doc.rdo_File");
        //Wait for content load
        caller.pause("2000");
        //Type docname
         java.io.File file = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator +param_DocLocation);
        String entirePath = file.getAbsolutePath();
        caller.type("Browse_Doc.tf_BrowseFile",entirePath);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_Delete","param_DocName_PARAM:" + DocNameOne);
        //Wait for content load
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lblDocDeleteConfirmationMessage","param_docName_PARAM:" + DocNameOne,false,"");
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Yes");
        //Wait for content load
        caller.pause("2000");
        //Verify whether doc is not under document tab
        caller.checkObjectProperty("Browse_Doc.ele_lblDocNameDocsTab","param_APIName_PARAM:" + APIName + "_PARAM," + "param_DocName_PARAM:" + DocNameOne,"ELEMENTPRESENT","false",false,"");
        //Wait for content load
        caller.pause("2000");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        caller.pause("3000");
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.pause("4000");
        caller.click("APIStoreDocumentation.lnk_HowTo");
        //Verify doc is not uner documentation
        caller.checkObjectProperty("APIStoreDocumentation.ele_lblDocumentName","param_docName_PARAM:" + DocNameOne,"ELEMENTPRESENT","false",false,"");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_PublisherURL,"3000");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        //Wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_Delete","param_DocName_PARAM:" + DocNameTwo);
        //Wait for content load
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lblDocDeleteConfirmationMessage","param_docName_PARAM:" + DocNameTwo,false,"");
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Yes");
        //Wait for content load
        caller.pause("2000");
        //Verify whether doc is not under document tab
        caller.checkObjectProperty("Browse_Doc.ele_lblDocNameDocsTab","param_APIName_PARAM:" + APIName + "_PARAM," + "param_DocName_PARAM:" + DocNameTwo,"ELEMENTPRESENT","false",false,"");
        //Wait for content load
        caller.pause("2000");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        caller.pause("3000");
        //Wait for content load
        caller.pause("3000");
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.click("APIStoreAPIs.lnk_Documentations");
        //Wait for content load
        caller.pause("2000");
        caller.click("APIStoreDocumentation.lnk_HowTo");
        //Verify doc is not uner documentation
        caller.checkObjectProperty("APIStoreDocumentation.ele_lblDocumentName","param_docName_PARAM:" + DocNameTwo,"ELEMENTPRESENT","false",false,"");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_PublisherURL,"3000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        //Wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("3000");
        caller.click("Browse_Doc.btn_Delete","param_DocName_PARAM:" + DocNameThree);
        //Wait for content load
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lblDocDeleteConfirmationMessage","param_docName_PARAM:" + DocNameThree,false,"");
        caller.click("Browse_Doc.lnk_Yes");
        //Wait for content load
        caller.pause("2000");
        //Verify whether doc is not under document tab
        caller.checkObjectProperty("Browse_Doc.ele_lblDocNameDocsTab","param_APIName_PARAM:" + APIName + "_PARAM," + "param_DocName_PARAM:" + DocNameThree,"ELEMENTPRESENT","false",false,"");
        //Wait for content load
        caller.pause("2000");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        caller.pause("3000");
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.pause("4000");
        /*
        Click
         object=APIStoreDocumentation.lnk_HowTo
        */
        //Verify doc is not uner documentation
        caller.checkObjectProperty("APIStoreDocumentation.ele_lblDocumentName","param_docName_PARAM:" + DocNameThree,"ELEMENTPRESENT","false",false,"");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_PublisherURL,"3000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        //Wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("3000");
        caller.writeToReport("End of  Executing APIM-117");	
    }
    /**
     *  Business component APIM_195.
     */
    public final static void APIM_195(final SeleniumTestBase caller, final String param_APIName, final String paramAPIContest, final String param_tag, final String param_ProductionEndPontJaxRS, final String param_storeURL, final String param_TenantOrAdmin, final String param_publisherURL) throws Exception {
        //User who is not logged in to the the system should not be able to access api store > applications page
        caller.writeToReport("Start  Executing APIM-195");
        //create API
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Type API Name
        String varAPIName = param_APIName+caller.generateData("int",2);
        caller.type("APIPublisherAdd.tf_APIName",varAPIName);
        //Store API name in to variables
        caller.store("keyAPIName","String",varAPIName);
        //auto generate contest
        //Type API contest
        String APIcontest = paramAPIContest+caller.generateData("int",2);
        caller.type("APIPublisherAdd.tf_APIContext",APIcontest);
        //Setting variable for API version
        String APIversion = "v1.0."+caller.generateData("int",1);
        //Type API Version
        caller.type("APIPublisherAdd.tf_APIVersion",APIversion);
        String APItag = param_tag+caller.generateData("int",3);
        //Type API tags
        caller.type("APIPublisherAdd.tf_Tags",APItag);
        caller.pause("2000");
        caller.fireEvent("KEY%key=\n","2000");
        caller.click("APIPublisherAdd.btn_Save");
        //waite for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Yes");
        //waite for content load
        caller.pause("5000");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //API Manage Section
        caller.pause("8000");
        //Go to browse page
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",varAPIName);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("1000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPIName);
        caller.click("APIPublisherBrowse.lnk_Edit");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        caller.click("APIPublisherBrowse.ele_lblManagedAPI");
        caller.type("APIPublisherBrowse.tf_ProductionEndPoint",param_ProductionEndPontJaxRS);
        caller.click("APIPublisherBrowse.btn_SaveManagedAPI");
        //waiting for content load
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_NextManage");
        //waiting for content load
        caller.pause("2000");
        lib_Common.bc_SelectTiers(caller);
        caller.click("APIPublisherBrowse.btn_SaveAndPublish");
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_Close");
        caller.pause("4000");
        //Navigate to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //waite for content load
        caller.pause("3000");
        //Select the domain
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        caller.pause("3000");
        //go to my application
        if(caller.checkElementPresent("APIStoreHome.lnk_MyApplication")){
        caller.click("APIStoreHome.lnk_MyApplication");
        }
        caller.click("APIStoreHome.lnk_iconMyApplication");
        //Verify the loggin promt
        caller.checkElementPresent("APIStoreHome.tf_username",false,"");
        caller.pause("2000");
        caller.click("APIStoreHome.btn_cancel");
        caller.pause("2000");
        //log in to store
        lib_Common.bc_StoreLogin(caller, param_TenantOrAdmin);
        caller.writeToReport("End of Execution APIM_195");	
    }
    /**
     *  Business component APIM_200.
     */
    public final static void APIM_200(final SeleniumTestBase caller, final String param_InvalidAppName, final String param_ThrottlingTier, final String param_CallBackURL, final String param_Description, final String param_ValidName2, final String param_ValidAppName3) throws Exception {
        //User who is successfully logged into the API store should get a validation message when trying to add an application given special characters in the name field
        caller.writeToReport("Start  Executing APIM-200");
        caller.click("APIStoreHome.lnk_MyApplication");
        caller.pause("1000");
        //check for the content load correctly
        caller.checkElementPresent("APIStoreMyApllication.ele_lblAddApplication",false,"");
        caller.pause("2000");
        caller.checkElementPresent("APIStoreMyApllication.tf_ApplicationName",false,"");
        caller.type("APIStoreMyApllication.tf_ApplicationName",param_InvalidAppName);
        caller.pause("1000");
        caller.checkElementPresent("APIStoreMyApllication.ele_ddThrottlingTier",false,"");
        caller.select("APIStoreMyApllication.ele_ddThrottlingTier",param_ThrottlingTier);
        caller.type("APIStoreMyApllication.tf_CallBackURL",param_CallBackURL);
        caller.type("APIStoreMyApllication.tf_Discription",param_Description);
        caller.pause("2000");
        caller.click("APIStoreMyApllication.btn_AddApplication");
        caller.pause("1000");
        //wait for error load
        caller.checkElementPresent("APIStoreMyApllication.ele_lblInvalidCharacters",false,"");
        caller.pause("1000");
        caller.checkElementPresent("APIStoreMyApllication.tf_ApplicationName",false,"");
        String var_AppName = param_ValidAppName3+"_"+caller.generateData("int",4);
        caller.type("APIStoreMyApllication.tf_ApplicationName",var_AppName);
        caller.pause("1000");
        caller.checkElementPresent("APIStoreMyApllication.ele_ddThrottlingTier",false,"");
        caller.select("APIStoreMyApllication.ele_ddThrottlingTier",param_ThrottlingTier);
        caller.type("APIStoreMyApllication.tf_CallBackURL",param_CallBackURL);
        caller.type("APIStoreMyApllication.tf_Discription",param_Description);
        caller.pause("2000");
        caller.click("APIStoreMyApllication.btn_AddApplication");
        caller.pause("50");
        //Verify Successfully added Message
        caller.checkElementPresent("APIStoreMyApllication.ele_lblSuccessAddMesage",false,"");
        caller.pause("2000");
        caller.writeToReport("End of Execution APIM_200");	
    }
    /**
     *  Business component APIM_202.
     */
    public final static void APIM_202(final SeleniumTestBase caller, final String param_ApplicationName, final String param_ThrottlingTier, final String param_callBackUrl, final String param_descriprion, final String param_ApplicationWithSubscription) throws Exception {
        //Successfully logged in user to API store should be able to delete created applications successfully
        caller.writeToReport("Start  Executing APIM-202");
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("1000");
        caller.click("APIStoreHome.lnk_MyApplication");
        caller.pause("1000");
        caller.type("APIStoreMyApllication.tf_ApplicationName",param_ApplicationName);
        //Copy the application name
        caller.fireEvent("KEY%key=ctrl+a","1000");
        caller.fireEvent("KEY%key=ctrl+c","1000");
        //select the tier
        caller.select("APIStoreMyApllication.ele_ddThrottlingTier",param_ThrottlingTier);
        //Type callback URL
        caller.type("APIStoreMyApllication.tf_CallBackURL",param_callBackUrl);
        caller.pause("1000");
        caller.type("APIStoreMyApllication.tf_Discription",param_descriprion);
        caller.pause("1000");
        caller.click("APIStoreMyApllication.btn_AddApplication");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        //select the application
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        //generate keys
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        caller.pause("6000");
        //Checking the ConsumerKey production and Key Genaration
        caller.checkElementPresent("APIStoreMySubcription.ele_lblConsumerKeyProduction",false,"");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblConsumerSecretTokenProduction",false,"");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblAccessTokenProduction",false,"");
        caller.pause("1000");
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        caller.pause("6000");
        //Checking the ConsumerKey production and Key Genaration in sandbox
        caller.checkElementPresent("APIStoreMySubcription.ele_lblConsumerKeySandbox",false,"");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblConsumerSecretTokenSandBox",false,"");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblAccessTokenSandBox",false,"");
        caller.click("APIStoreHome.lnk_MyApplication");
        //retriew API name
        String varAPIName = caller.retrieveString("keyAPIName");
        caller.type("APIPublisherHome.tf_APISearch",varAPIName);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("1000");
        caller.click("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + varAPIName);
        caller.pause("2000");
        //select application for subscribe
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_ApplicationName);
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        caller.click("APIStoreAPIs.btn_StayOnThisPage");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_MyApplication");
        caller.pause("2000");
        //deldete application
        caller.click("APIStoreMyApllication.lnk_DeleteApplication","param_ApplicationName_PARAM:" + param_ApplicationName);
        caller.pause("1000");
        //Verify warning message of subscription
        caller.checkElementPresent("APIStoreMyApllication.ele_lblSubscribedAppDeleteWarningMessage",false,"");
        caller.click("APIStoreMyApllication.btn_yes");
        caller.pause("2000");
        caller.writeToReport("End of Execution APIM_202");	
    }
    /**
     *  Business component APIM_204.
     */
    public final static void APIM_204(final SeleniumTestBase caller, final String param_ApplicationName) throws Exception {
        //When Application user deletes an application which has already generated consumenr key and consumer secret, access token, user should no longer use them to generate user tokens
        caller.writeToReport("Start  Executing APIM-204");
        caller.click("APIStoreHome.lnk_APIs");
        if(caller.checkElementPresent("APIStoreHome.lnk_MyApplication")){
        caller.click("APIStoreHome.lnk_MyApplication");
        } else {
        caller.click("APIStoreHome.lnk_iconMyApplication");
        }
        caller.pause("2000");
        //Verify the Application to Subscribe
        caller.checkObjectProperty("APIStoreMyApllication.ele_lblTableAppName","param_AppName_PARAM:" + param_ApplicationName,"ELEMENTPRESENT","true",false,"");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        caller.click("APIStoreMySubcription.btn_ApplicationWithSubscription");
        caller.pause("4000");
        caller.fireEvent("KEY%key=ctrl+v","3000");
        //Verify no applications to generate keys
        caller.checkObjectProperty("APIStoreMySubcription.ele_lblddApplicationNames","param_ApplicationName_PARAM:" + param_ApplicationName,"ELEMENTPRESENT","false",false,"");
        caller.selectFrame("APIStoreMyApllication.frm_parent");
        caller.writeToReport("End of Execution APIM_204");	
    }
    /**
     *  Business component APIM_201.
     */
    /**
     *  Business component APIM_201.
     */
    public final static void APIM_201(final SeleniumTestBase caller) throws Exception {
        //Successfully logged in user to API store should be able to view callback url usage by clicking on the '?' icon infront of the callback RUL field on API store > my applicartion > add new application page.
        caller.writeToReport("Start  Executing APIM-201");
        caller.clickAt("APIStoreHome.lnk_APIs","0,0");
        caller.click("APIStoreHome.lnk_MyApplication");
        caller.pause("3000");
        caller.clickAt("APIStoreMyApllication.btn_UrlQuestionMark","0,0");
        caller.pause("3000");
        //Verify the Help icon
        caller.checkElementPresent("APIStoreMyApllication.ele_lblCallbackUrlHelp",false,"");
        caller.writeToReport("End of Execution APIM 201");	
    }
    /**
     *  Business component APIM_206.
     */
    public final static void APIM_206(final SeleniumTestBase caller, final String param_AppName4, final String param_ThrottlingTier, final String param_CallBackURL, final String param_Description) throws Exception {
        //User who is successfully logged into the api store should be able to click on cancel button on the edit view and exit from the edit view.
        caller.writeToReport("Start  Executing APIM-206");
        caller.click("APIStoreHome.lnk_MyApplication");
        caller.pause("1000");
        //check for the content load correctly
        caller.checkElementPresent("APIStoreMyApllication.ele_lblAddApplication",false,"");
        caller.pause("2000");
        caller.checkElementPresent("APIStoreMyApllication.tf_ApplicationName",false,"");
        //generate app name
        String var_AppName = param_AppName4+"_"+caller.generateData("int",4);
        //store API NAme
        caller.store("key_AppName","String",var_AppName);
        caller.type("APIStoreMyApllication.tf_ApplicationName",var_AppName);
        caller.checkElementPresent("APIStoreMyApllication.ele_ddThrottlingTier",false,"");
        caller.select("APIStoreMyApllication.ele_ddThrottlingTier",param_ThrottlingTier);
        caller.type("APIStoreMyApllication.tf_CallBackURL",param_CallBackURL);
        caller.type("APIStoreMyApllication.tf_Discription",param_Description);
        caller.pause("2000");
        caller.click("APIStoreMyApllication.btn_AddApplication");
        caller.checkElementPresent("APIStoreMyApllication.ele_lblSuccessAddMesage",false,"");
        //Verify app name
        caller.checkElementPresent("APIStoreMyApllication.ele_lblTableAppName","param_AppName_PARAM:" + var_AppName,false,"");
        caller.checkElementPresent("APIStoreMyApllication.lnk_EditActionColumn","param_AppName_PARAM:" + var_AppName,false,"");
        caller.click("APIStoreMyApllication.lnk_EditActionColumn","param_AppName_PARAM:" + var_AppName);
        caller.pause("1000");
        //verify edit name
        caller.checkElementPresent("APIStoreMyApllication.tf_EditName","param_AppName_PARAM:" + var_AppName,false,"");
        //verify edit tier
        caller.checkObjectProperty("APIStoreMyApllication.ele_ddEditTier","param_AppName_PARAM:" + var_AppName,"PROPERTYPRESENT","disabled|false",false,"");
        caller.checkElementPresent("APIStoreMyApllication.tf_EditCallBackURL","param_AppName_PARAM:" + var_AppName,false,"");
        caller.checkElementPresent("APIStoreMyApllication.tf_EditDescription","param_AppName_PARAM:" + var_AppName,false,"");
        caller.pause("2000");
        //cancel button verify
        caller.checkElementPresent("APIStoreMyApllication.btn_EditCancel","param_AppName_PARAM:" + var_AppName,false,"");
        caller.click("APIStoreMyApllication.btn_EditCancel","param_AppName_PARAM:" + var_AppName);
        caller.pause("500");
        caller.checkElementPresent("APIStoreMyApllication.ele_lblTableAppName","param_AppName_PARAM:" + var_AppName,false,"");
        caller.pause("3000");
        caller.writeToReport("End of Execution APIM_206");	
    }
    /**
     *  Business component APIM_205.
     */
    public final static void APIM_205(final SeleniumTestBase caller, final String param_AppName4, final String param_AppName5, final String param_EditTier, final String param_EditCallBackURL, final String param_EditDescription) throws Exception {
        //User who is successfully logged into the api store should be able to edit existing appliation name, throttling tier, callback url, description and save changes successfully.
        caller.writeToReport("Start  Executing APIM-205");
        caller.click("APIStoreHome.lnk_MyApplication");
        caller.pause("1000");
        //Retriew API NAme
        String var_ApplicationName = caller.retrieveString("key_AppName");
        //Verify before edit App
        caller.checkElementPresent("APIStoreMyApllication.ele_lblAddApplication",false,"");
        caller.checkElementPresent("APIStoreMyApllication.lnk_EditActionColumn","param_AppName_PARAM:" + var_ApplicationName,false,"");
        //edit action column
        caller.click("APIStoreMyApllication.lnk_EditActionColumn","param_AppName_PARAM:" + var_ApplicationName);
        caller.pause("1000");
        //Verifications of application edit sucessfully
        caller.checkElementPresent("APIStoreMyApllication.tf_EditName","param_AppName_PARAM:" + var_ApplicationName,false,"");
        caller.checkObjectProperty("APIStoreMyApllication.ele_ddEditTier","param_AppName_PARAM:" + var_ApplicationName,"PROPERTYPRESENT","disabled|false",false,"");
        caller.checkElementPresent("APIStoreMyApllication.tf_EditCallBackURL","param_AppName_PARAM:" + var_ApplicationName,false,"");
        caller.checkElementPresent("APIStoreMyApllication.tf_EditDescription","param_AppName_PARAM:" + var_ApplicationName,false,"");
        caller.pause("2000");
        //Generate app five
        String var_AppNameFive = param_AppName5+"_"+caller.generateData("int",4);
        //type new app name
        caller.type("APIStoreMyApllication.tf_EditName","param_AppName_PARAM:" + var_ApplicationName,var_AppNameFive);
        caller.pause("1000");
        caller.click("APIStoreMyApllication.btn_EditSave","param_AppName_PARAM:" + var_ApplicationName);
        caller.pause("500");
        //verify new app name
        caller.checkElementPresent("APIStoreMyApllication.ele_lblTableAppName","param_AppName_PARAM:" + var_AppNameFive,false,"");
        caller.pause("1000");
        caller.click("APIStoreMyApllication.lnk_EditActionColumn","param_AppName_PARAM:" + var_AppNameFive);
        caller.pause("2000");
        caller.click("APIStoreMyApllication.ele_ddEditTier","param_AppName_PARAM:" + var_AppNameFive);
        caller.pause("500");
        caller.select("APIStoreMyApllication.ele_ddEditTier","param_AppName_PARAM:" + var_AppNameFive,param_EditTier);
        caller.pause("1000");
        caller.click("APIStoreMyApllication.btn_EditSave","param_AppName_PARAM:" + var_AppNameFive);
        caller.pause("2000");
        caller.pause("3000");
        caller.click("APIStoreMyApllication.lnk_EditActionColumn","param_AppName_PARAM:" + var_AppNameFive);
        caller.checkElementPresent("APIStoreMyApllication.tf_EditCallBackURL","param_AppName_PARAM:" + var_AppNameFive,false,"");
        caller.type("APIStoreMyApllication.tf_EditCallBackURL","param_AppName_PARAM:" + var_AppNameFive,param_EditCallBackURL);
        caller.pause("1000");
        caller.click("APIStoreMyApllication.btn_EditSave","param_AppName_PARAM:" + var_AppNameFive);
        caller.checkElementPresent("APIStoreMyApllication.ele_lblCallBackURL","param_AppName_PARAM:" + var_AppNameFive + "_PARAM," + "param_CallBackURL_PARAM:" + param_EditCallBackURL,false,"");
        caller.pause("2000");
        caller.click("APIStoreMyApllication.lnk_EditActionColumn","param_AppName_PARAM:" + var_AppNameFive);
        caller.checkElementPresent("APIStoreMyApllication.tf_EditDescription","param_AppName_PARAM:" + var_AppNameFive,false,"");
        //type new app name
        caller.type("APIStoreMyApllication.tf_EditDescription","param_AppName_PARAM:" + var_AppNameFive,param_EditDescription);
        //save app name
        caller.click("APIStoreMyApllication.btn_EditSave","param_AppName_PARAM:" + var_AppNameFive);
        caller.pause("2000");
        caller.checkElementPresent("APIStoreMyApllication.ele_lblDescription","param_AppName_PARAM:" + var_AppNameFive + "_PARAM," + "Description_PARAM:" + param_EditDescription,false,"");
        caller.pause("5000");
        caller.writeToReport("End of Execution APIM_205");	
    }
    /**
     *  Business component APIM_198.
     */
    /**
     *  Business component APIM_198.
     */
    public final static void APIM_198(final SeleniumTestBase caller) throws Exception {
        //User who is successfully logged into API store, should be able to see compulsory fields of 'add new application' form are marcked with a red asterisks
        caller.writeToReport("Start  Executing APIM-198");
        caller.click("APIStoreHome.lnk_APIs");
        caller.click("APIStoreHome.lnk_MyApplication");
        caller.pause("6000");
        //Verify the Application Name
        caller.checkElementPresent("APIStoreMyApllication.tf_ApplicationName",false,"");
        caller.pause("3000");
        //Verify the tier Name
        caller.checkElementPresent("APIStoreMyApllication.ele_ddThrottlingTier",false,"");
        caller.pause("3000");
        caller.click("APIStoreMyApllication.btn_AddApplication");
        caller.pause("1000");
        //Verify Required Name Field
        caller.checkElementPresent("APIStoreMyApllication.ele_lblNameRequired",false,"");
        caller.pause("3000");
        caller.writeToReport("End of Execution APIM_198");	
    }
    /**
     *  Business component APIM_197.
     */
    public final static void APIM_197(final SeleniumTestBase caller, final String param_ApplicationName, final String param_ThrottlingTier, final String param_CallBackURL, final String param_Description) throws Exception {
        //Successfully logged in user to API store, should be able to add a new application successfully.
        caller.writeToReport("Start  Executing APIM-197");
        caller.pause("4000");
        //Verify the name field to add application
        caller.checkElementPresent("APIStoreMyApllication.tf_ApplicationName",false,"");
        //generaete application name
        String var_AppName = param_ApplicationName+"_"+caller.generateData("int",4);
        //type app name
        caller.type("APIStoreMyApllication.tf_ApplicationName",var_AppName);
        caller.select("APIStoreMyApllication.ele_ddThrottlingTier",param_ThrottlingTier);
        caller.type("APIStoreMyApllication.tf_CallBackURL",param_CallBackURL);
        caller.type("APIStoreMyApllication.tf_Discription",param_Description);
        caller.pause("1000");
        //add the application
        caller.click("APIStoreMyApllication.btn_AddApplication");
        caller.pause("100");
        //Verify Successfully added Message
        caller.checkElementPresent("APIStoreMyApllication.ele_lblSuccessAddMesage",false,"");
        //Verify the all added values in table
        caller.checkElementPresent("APIStoreMyApllication.ele_lblTableAppName","param_AppName_PARAM:" + var_AppName,false,"");
        caller.checkElementPresent("APIStoreMyApllication.ele_lblCallBackURL","param_AppName_PARAM:" + var_AppName + "_PARAM," + "param_CallBackURL_PARAM:" + param_CallBackURL,false,"");
        caller.checkElementPresent("APIStoreMyApllication.ele_lblDescription","param_AppName_PARAM:" + var_AppName + "_PARAM," + "Description_PARAM:" + param_Description,false,"");
        caller.pause("4000");
        caller.writeToReport("End of execution APIM_197");	
    }
    /**
     *  Business component APIM_199.
     */
    public final static void APIM_199(final SeleniumTestBase caller, final String param_ThrottlingTier, final String param_CallBackURL, final String param_Description, final String param_ApplicationName2) throws Exception {
        //User who is successfully logged into the API store should get a validation message when trying to add an application without specifying compulsory fields.
        caller.writeToReport("Start  Executing APIM-199");
        caller.click("APIStoreHome.lnk_MyApplication");
        caller.pause("1000");
        //Verify added application
        caller.checkElementPresent("APIStoreMyApllication.ele_lblAddApplication",false,"");
        caller.pause("2000");
        caller.click("APIStoreMyApllication.btn_AddApplication");
        caller.pause("2000");
        //Verify required name field
        caller.checkElementPresent("APIStoreMyApllication.ele_lblNameRequired",false,"");
        caller.pause("2000");
        caller.checkElementPresent("APIStoreMyApllication.ele_ddThrottlingTier",false,"");
        caller.select("APIStoreMyApllication.ele_ddThrottlingTier",param_ThrottlingTier);
        caller.type("APIStoreMyApllication.tf_CallBackURL",param_CallBackURL);
        caller.type("APIStoreMyApllication.tf_Discription",param_Description);
        caller.pause("2000");
        caller.click("APIStoreMyApllication.btn_AddApplication");
        caller.pause("100");
        caller.checkElementPresent("APIStoreMyApllication.ele_lblNameRequired",false,"");
        caller.pause("2000");
        //generate app name
        String var_AppName = param_ApplicationName2+"_"+caller.generateData("int",4);
        caller.type("APIStoreMyApllication.tf_ApplicationName",var_AppName);
        caller.pause("1000");
        caller.checkElementPresent("APIStoreMyApllication.ele_ddThrottlingTier",false,"");
        caller.select("APIStoreMyApllication.ele_ddThrottlingTier",param_ThrottlingTier);
        caller.type("APIStoreMyApllication.tf_CallBackURL",param_CallBackURL);
        caller.type("APIStoreMyApllication.tf_Discription",param_Description);
        caller.pause("2000");
        caller.click("APIStoreMyApllication.btn_AddApplication");
        caller.pause("50");
        //Verify Successfully added Message
        caller.checkElementPresent("APIStoreMyApllication.ele_lblSuccessAddMesage",false,"");
        caller.pause("3000");
        caller.writeToReport("End of Execution APIM_199");	
    }
    /**
     *  Business component APIM_207.
     */
    public final static void APIM_207(final SeleniumTestBase caller, final String param_APIName, final String param_ProductionEndPoint, final String param_APIContext, final String param_tagName, final String param_APIImagePath, final String param_APIVersion, final String param_SandBoxEndpoint, final String param_AppName, final String param_TokenValueOne, final String param_TokenValueTwo, final String param_StoreURL, final String param_ThrottlingTier, final String param_TenantOrAdmin) throws Exception {
        caller.writeToReport("Start of executing APIM_207");
        //Go for create new API up to create state
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        //start design stage
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Type API Name
        String varAPIName = param_APIName+caller.generateData("int",3);
        caller.store("keyAPIName","String",varAPIName);
        caller.type("APIPublisherAdd.tf_APIName",varAPIName);
        //Type API contest
        String varAPIContext = param_APIContext+caller.generateData("int",4);
        caller.type("APIPublisherAdd.tf_APIContext",varAPIContext);
        String varAPIVersion = param_APIVersion+caller.generateData("int",2);
        caller.store("keyAPIVersion","String",varAPIVersion);
        caller.type("APIPublisherAdd.tf_APIVersion",varAPIVersion);
        //Type valid image path
        //Type
        //object=APIPublisherAdd.btn_BrowseImage
        //text=@param_APIImagePath
        caller.type("APIPublisherAdd.tf_Tags",param_tagName);
        caller.fireEvent("KEY%key=\n","2000");
        //waiting for content load
        caller.pause("6000");
        //click save and verify warning
        caller.type("APIPublisherAdd.tf_URLPattern",varAPIName+"/"+varAPIContext);
        caller.click("APIPublisherAdd.chk_Post");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherAdd.btn_Add");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherAdd.btn_Save");
        //waiting for content load
        caller.pause("5000");
        //Go to implement stage
        caller.checkElementPresent("APIPublisherAdd.lnk_NextImplement",false,"");
        //waiting for content load
        caller.pause("4000");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //waiting for content load
        caller.pause("7000");
        caller.click("APIPublisherBrowse.ele_lblManagedAPI");
        caller.pause("3000");
        caller.type("APIPublisherBrowse.tf_ProductionEndPoint",param_ProductionEndPoint);
        caller.type("APIPublisherBrowse.tf_SandBoxEndPoint",param_SandBoxEndpoint);
        caller.click("APIPublisherBrowse.btn_SaveManagedAPI");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_NextManage");
        //waiting for content load
        caller.pause("4000");
        //Start manage stage
        caller.click("APIPublisherAdd.dd_tireAvailabilityConfig");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherAdd.chk_tireSelectionUnlimited");
        caller.click("APIPublisherAdd.btn_SavePublish");
        //waiting for content load
        caller.pause("4000");
        caller.checkElementPresent("APIPublisherAdd.ele_lblFinalClose",false,"");
        caller.click("APIPublisherAdd.ele_lblFinalClose");
        //Go to API Store
        //waiting for content load
        caller.pause("3000");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_StoreURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //Login to API Store
        lib_Common.bc_StoreLogin(caller, param_TenantOrAdmin);
        //waiting for content load
        caller.pause("5000");
        //Create new Application
        caller.click("APIStoreHome.lnk_MyApplication");
        String varAPPName = param_AppName+caller.generateData("int",5);
        caller.store("keyAPPName","String",varAPPName);
        caller.type("APIStoreMyApllication.tf_ApplicationName",varAPPName);
        caller.select("APIStoreMyApllication.ele_ddThrottlingTier",param_ThrottlingTier);
        caller.type("APIStoreMyApllication.tf_CallBackURL","application/x-www-form-urlencoded");
        caller.type("APIStoreMyApllication.tf_Discription","test_dec");
        caller.click("APIStoreMyApllication.btn_AddApplication");
        //waiting for content load
        caller.pause("7000");
        //Go to API window to Subscribe API to an application
        caller.click("APIStoreHome.lnk_APIs");
        //waiting for content load
        caller.pause("4000");
        caller.type("APIStoreHome.tf_APISearchStore",varAPIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + varAPIName,false,"");
        caller.click("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + varAPIName);
        //waiting for content load
        caller.pause("7000");
        caller.checkElementPresent("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",false,"");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",varAPPName);
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_StayOnThisPage");
        caller.checkElementPresent("APIStoreAPIs.btn_Subscribe",false,"");
        //Go to Subcription window to Generate keys
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.checkElementPresent("APIStoreMySubcription.ele_ddApplicationWithSubscription",false,"");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",varAPPName);
        //wait for page load
        caller.pause("4000");
        if(caller.checkElementPresent("APIStoreMySubcription.ele_lblAllowedDomains")){
        caller.doubleClick("APIStoreMySubcription.ele_lblKeysProduction");
        } else {
        caller.click("APIStoreMySubcription.ele_lblKeyProduction");
        }
        //waiting for content load
        caller.pause("5000");
        caller.checkElementPresent("APIStoreMySubcription.tf_TokenValidity",false,"");
        caller.type("APIStoreMySubcription.tf_TokenValidity",param_TokenValueOne);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //waiting for content load
        caller.pause("6000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblConsumerKeyProduction",false,"");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblConsumerSecretTokenProduction",false,"");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblAccessTokenProduction",false,"");
        caller.checkElementPresent("APIStoreMySubcription.tf_TokenValidity2",false,"");
        caller.type("APIStoreMySubcription.tf_TokenValidity2",param_TokenValueTwo);
        //waiting for content load
        caller.pause("6000");
        caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox",false,"");
        //waiting for content load
        caller.pause("4000");
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //waiting for content load
        caller.pause("7000");
        //Verification of sand box generated keys
        caller.checkElementPresent("APIStoreMySubcription.ele_lblConsumerKeySandbox",false,"");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblConsumerSecretTokenSandBox",false,"");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblAccessTokenSandBox",false,"");
        //Verifications on production box
        caller.checkElementPresent("APIStoreMySubcription.ele_lblConsumerKeyProduction",false,"");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblAccessTokenProduction",false,"");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblConsumerSecretTokenProduction",false,"");
        //waiting for content load
        caller.pause("2000");
        caller.writeToReport("End of executing APIM_207");	
    }
    /**
     *  Business component APIM_350.
     */
    public final static void APIM_350(final SeleniumTestBase caller, final String param_APIName, final String param_APIContext, final String param_APIVersion, final String param_APIImagePath, final String param_APITag, final String param_ProductionEndPontJaxRS, final String param_Description, final String param_URLPattern, final String param_verbMethodGET) throws Exception {
        //APIM-350: User Search added API by name
        caller.writeToReport("Start Executing APIM-350");
        //create API
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Type API Name
        String varAPIName = param_APIName+caller.generateData("int",3);
        caller.type("APIPublisherAdd.tf_APIName",varAPIName);
        //Store API name in to variables
        caller.store("keyAPIName","String",varAPIName);
        //auto generate context
        //Type API context
        String varAPIContext = param_APIContext+caller.generateData("int",3);
        caller.type("APIPublisherAdd.tf_APIContext",varAPIContext);
        //Storing Context value
        caller.store("keyAPIContext","String",varAPIContext);
        //Setting variable for API version
        String varAPIVersion = "v1.0."+caller.generateData("int",1);
        //Type API Version
        caller.type("APIPublisherAdd.tf_APIVersion",varAPIVersion);
        caller.store("keyAPIVersion","String",varAPIVersion);
        //Setting variable for API Tag
        String APITag = param_APITag+caller.generateData("int",3);
        //Type Description
        caller.type("APIPublisherAdd.tf_Discription",param_Description);
        //Type API tags
        caller.type("APIPublisherAdd.tf_Tags",APITag);
        caller.pause("2000");
        caller.fireEvent("KEY%key=\n","2000");
        caller.type("APIPublisherAdd.tf_URLPattern",param_URLPattern);
        caller.click("APIPublisherBrowse.chk_verbMethod","verb_PARAM:" + param_verbMethodGET);
        caller.click("APIPublisherBrowse.btn_Add");
        caller.click("APIPublisherAdd.btn_Save");
        //waite for content load
        caller.pause("3000");
        //waite for content load
        caller.pause("5000");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //API Manage Section
        caller.pause("8000");
        //Go to browse page
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",varAPIName);
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPIName);
        caller.click("APIPublisherBrowse.lnk_Edit");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        caller.click("APIPublisherBrowse.ele_lblManagedAPI");
        caller.type("APIPublisherBrowse.tf_ProductionEndPoint",param_ProductionEndPontJaxRS);
        caller.click("APIPublisherBrowse.btn_SaveManagedAPI");
        //waiting for content load
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_NextManage");
        //waiting for content load
        caller.pause("2000");
        lib_Common.bc_SelectTiers(caller);
        caller.click("APIPublisherBrowse.btn_SaveAndPublish");
        caller.pause("3000");
        //API is successfully published
        caller.click("APIPublisherBrowse.btn_Close");
        //search for created API
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",varAPIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Verify API is searched successfully
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPIName,false,"");
        caller.pause("5000");
        caller.writeToReport("End of Executing APIM-350");	
    }
    /**
     *  Business component APIM_351.
     */
    public final static void APIM_351(final SeleniumTestBase caller, final String param_APIProvider, final String param_APIName, final String param_searchNameProvider, final String param_TenantOrAdmin) throws Exception {
        //APIM-351: User Search added API by provider name
        caller.writeToReport("Start Executing APIM-351");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("5000");
        //retrieving API Name
        String varAPINameOne = caller.retrieveString("keyAPIName");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        //Retrieve Provider Name
        String varTenantOnePublisherUserOnex = caller.retrieveString("keyTenantOnePublisherUserOne");
        String varAdminPublisherUserOney = caller.retrieveString("keyAdminPublisherUserOne");
        //Type the API Provider Name  in the Search Box
        if(param_TenantOrAdmin.equals("TenantOnePublisherOne")){
        caller.type("APIPublisherHome.tf_APISearch",param_searchNameProvider+varTenantOnePublisherUserOnex);
        } else if(param_TenantOrAdmin.equals("AdminPublisherOne")){
        caller.type("APIPublisherHome.tf_APISearch",param_searchNameProvider+varAdminPublisherUserOney);
        }
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Verif API is Search properly
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameOne,false,"");
        caller.pause("5000");
        //APIM-367: Successfully logged in user should be able search with keywords that contains only part of the provider name
        //APIM_367  combined to here
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        //Type the API Provider Name  in the Search Box
        if(param_TenantOrAdmin.equals("TenantOnePublisherOne")){
        caller.type("APIPublisherHome.tf_APISearch",param_searchNameProvider+varTenantOnePublisherUserOnex);
        } else if(param_TenantOrAdmin.equals("AdminPublisherOne")){
        caller.type("APIPublisherHome.tf_APISearch",param_searchNameProvider+varAdminPublisherUserOney);
        }
        //wait for content load
        caller.pause("2000");
        //Delete some partof the user name
        caller.fireEvent("KEY%key=backspace","2000");
        caller.fireEvent("KEY%key=backspace","2000");
        caller.fireEvent("KEY%key=backspace","2000");
        caller.fireEvent("KEY%key=backspace","2000");
        caller.fireEvent("KEY%key=backspace","2000");
        caller.fireEvent("KEY%key=backspace","2000");
        //wait for content load
        caller.pause("2000");
        caller.pause("3000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("4000");
        //confirming the seach result
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameOne,false,"");
        caller.pause("5000");
        caller.writeToReport("End of Executing APIM-351");	
    }
    /**
     *  Business component APIM_352.
     */
    public final static void APIM_352(final SeleniumTestBase caller, final String param_searchversion, final String param_APIVersion, final String param_APIName) throws Exception {
        //APIM-352: User Search added API by api version
        caller.writeToReport("Start Executing APIM-352");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("5000");
        String varAPINameTwo = caller.retrieveString("keyAPIName");
        String varAPIVersion = caller.retrieveString("keyAPIVersion");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        //search by API Version
        caller.type("APIPublisherHome.tf_APISearch",param_searchversion+varAPIVersion);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //verify API is Visible
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameTwo,false,"");
        caller.pause("5000");
        caller.writeToReport("End Of Executing APIM-352");	
    }
    /**
     *  Business component APIM_353.
     */
    public final static void APIM_353(final SeleniumTestBase caller, final String param_searchContext, final String param_APIContext, final String param_APIName) throws Exception {
        //APIM-353: User should be able to search added API by context
        caller.writeToReport("Start Executing APIM-353");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        String varAPINameThree = caller.retrieveString("keyAPIName");
        String varAPIContext = caller.retrieveString("keyAPIContext");
        //Search by API Context
        caller.type("APIPublisherHome.tf_APISearch",param_searchContext+varAPIContext);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //verify API is Visible
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameThree,false,"");
        caller.pause("5000");
        caller.writeToReport("End Of Executing APIM-353");	
    }
    /**
     *  Business component APIM_354.
     */
    /**
     *  Business component APIM_354.
     */
    public final static void APIM_354(final SeleniumTestBase caller) throws Exception {
        //APIM-354: User search for API with upper case name
        caller.writeToReport("Start Executing APIM-354");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        String varAPINameFour = caller.retrieveString("keyAPIName");
        //Search by API name in upper case
        String varUppercaseName = varAPINameFour.toUpperCase();
        caller.type("APIPublisherHome.tf_APISearch",varUppercaseName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameFour,false,"");
        caller.pause("5000");
        //APIM-355: User search for API with lower case name is also combined here as rquest
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        String varLowercaseName = varAPINameFour.toLowerCase();
        caller.type("APIPublisherHome.tf_APISearch",varLowercaseName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //verify API is Visible
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameFour,false,"");
        caller.pause("5000");
        caller.writeToReport("End Of Executing APIM-354");	
    }
    /**
     *  Business component APIM_355.
     */
    public final static void APIM_355(final SeleniumTestBase caller, final String param_APINameLower, final String param_APIName) throws Exception {
        caller.writeToReport("Start of APIM_355");
        //APIM-355: User search for API with lower case name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        //Type API name lowercase
        caller.type("APIPublisherHome.tf_APISearch",param_APINameLower);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //verify API is Visible
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + param_APIName,false,"");
        caller.pause("5000");
        caller.writeToReport("End of APIM_355");	
    }
    /**
     *  Business component APIM_356.
     */
    public final static void APIM_356(final SeleniumTestBase caller, final String param_statusCreated, final String param_statusPublished, final String param_statusBlocked, final String param_statusRetired, final String param_statusPrototyped, final String param_statusDeprecated, final String param_APIName, final String param_searchStatus) throws Exception {
        //APIM-356: Successfully logged in user should be able search API by status
        caller.writeToReport("Start Executing APIM-356");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        String varAPINameFive = caller.retrieveString("keyAPIName");
        caller.type("APIPublisherHome.tf_APISearch",varAPINameFive);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("3000");
        //click on API
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameFive);
        //change the API status CREATED
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //wait for content load
        caller.pause("2000");
        //Serch for status created
        caller.select("APIPublisherBrowse.ele_ddState",param_statusCreated);
        //wait for content load
        caller.pause("2000");
        caller.click("browseLifecycle.btn_Update");
        caller.pause("5000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("5000");
        //Search with API status
        caller.type("APIPublisherHome.tf_APISearch",param_searchStatus+param_statusCreated);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameFive,false,"");
        caller.pause("5000");
        //click on API
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameFive);
        //change the API status BLOCKED
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //Serch for status blocked
        caller.select("APIPublisherBrowse.ele_ddState",param_statusBlocked);
        caller.pause("2000");
        caller.click("browseLifecycle.btn_Update");
        caller.pause("5000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("5000");
        caller.type("APIPublisherHome.tf_APISearch",param_searchStatus+param_statusBlocked);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameFive,false,"");
        caller.pause("5000");
        //click on API
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameFive);
        //change the API status RETIRED
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //Serch for status published
        caller.select("APIPublisherBrowse.ele_ddState",param_statusRetired);
        caller.pause("2000");
        caller.click("browseLifecycle.btn_Update");
        caller.pause("5000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("5000");
        caller.type("APIPublisherHome.tf_APISearch",param_searchStatus+param_statusRetired);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameFive,false,"");
        caller.pause("5000");
        //click on API
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameFive);
        //change the API status PROTOTYPED
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //Serch for status Prototyped
        caller.select("APIPublisherBrowse.ele_ddState",param_statusPrototyped);
        caller.pause("2000");
        caller.click("browseLifecycle.btn_Update");
        caller.pause("5000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("5000");
        caller.type("APIPublisherHome.tf_APISearch",param_searchStatus+param_statusPrototyped);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameFive,false,"");
        caller.pause("5000");
        //click on API
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameFive);
        //change the API status DEPERECATED
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //Serch for status deprecated
        caller.select("APIPublisherBrowse.ele_ddState",param_statusDeprecated);
        caller.pause("2000");
        caller.click("browseLifecycle.btn_Update");
        caller.pause("5000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("5000");
        caller.type("APIPublisherHome.tf_APISearch",param_searchStatus+param_statusDeprecated);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameFive,false,"");
        caller.pause("5000");
        //click on API
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameFive);
        //change the API status PUBLISHED
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //Serch for status published
        caller.select("APIPublisherBrowse.ele_ddState",param_statusPublished);
        caller.pause("2000");
        caller.click("browseLifecycle.btn_Update");
        caller.pause("5000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("5000");
        caller.type("APIPublisherHome.tf_APISearch",param_searchStatus+param_statusPublished);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //verify API is Visible
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameFive,false,"");
        caller.pause("5000");
        caller.writeToReport("End Of Executing APIM-356");	
    }
    /**
     *  Business component APIM_357.
     */
    public final static void APIM_357(final SeleniumTestBase caller, final String param_searchDiscription, final String param_Description, final String param_APIName) throws Exception {
        //APIM-357: Successfully logged in user should be able search API by description
        caller.writeToReport("Start Executing APIM-357");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("5000");
        String varAPINameSix = caller.retrieveString("keyAPIName");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        //Type description
        caller.type("APIPublisherHome.tf_APISearch",param_searchDiscription+param_Description);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //verify API is Visible
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameSix,false,"");
        caller.pause("5000");
        caller.writeToReport("End Of Executing APIM-357");	
    }
    /**
     *  Business component APIM_358.
     */
    public final static void APIM_358(final SeleniumTestBase caller, final String param_searchSubContext, final String param_APIName, final String param_URLPattern) throws Exception {
        //APIM-358: Successfully logged in user should be able search API by subcontext
        caller.writeToReport("Start Executing APIM-358");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("5000");
        String varAPINameSeven = caller.retrieveString("keyAPIName");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        //Type subcontext
        caller.type("APIPublisherHome.tf_APISearch",param_searchSubContext+param_URLPattern);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //verify API is Visible
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameSeven,false,"");
        caller.pause("5000");
        caller.writeToReport("End Of Executing APIM-358");	
    }
    /**
     *  Business component APIM_367.
     */
    public final static void APIM_367(final SeleniumTestBase caller, final String param_searchProvider, final String param_partOfProvider, final String param_APIName) throws Exception {
        //APIM-367: Successfully logged in user should be able search with keywords that contains only part of the provider name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        //Type part of provider
        caller.type("APIPublisherHome.tf_APISearch",param_searchProvider+param_partOfProvider);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //verify API is Visible
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + param_APIName,false,"");
        caller.pause("5000");	
    }
    /**
     *  Business component APIM_368.
     */
    public final static void APIM_368(final SeleniumTestBase caller, final String param_searchContext, final String param_partOfContext, final String param_APIName) throws Exception {
        //APIM-368: Successfully logged in user should be able search with keywords that contains only part of the conte
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        //Type part of context
        caller.type("APIPublisherHome.tf_APISearch",param_searchContext+param_partOfContext);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //verify API is Visible
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + param_APIName,false,"");
        caller.pause("5000");	
    }
    /**
     *  Business component APIM_384.
     */
    public final static void APIM_384(final SeleniumTestBase caller, final String param_APIName, final String param_APIStatus, final String param_APIVersion, final String param_APICreater, final String param_APIUsers, final String param_TenantOrAdmin) throws Exception {
        //APIM-384: User should be able to see all API's in all stage on browse page
        caller.writeToReport("Start Executing APIM-384");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("5000");
        String varAPINameNine = caller.retrieveString("keyAPIName");
        String varAPIVersionthree = caller.retrieveString("keyAPIVersion");
        //Retrieve Provider Name
        String varTenantOnePublisherUserOnex = caller.retrieveString("keyTenantOnePublisherUserOne");
        String varAdminPublisherUserOney = caller.retrieveString("keyAdminPublisherUserOne");
        //Type the API Provider Name  in the Search Box
        if(param_TenantOrAdmin.equals("TenantOnePublisherOne")){
        //Verify API version
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + varAPINameNine + "_PARAM," + "param_version_PARAM:" + varAPIVersionthree + "_PARAM," + "param_creater_PARAM:" + varTenantOnePublisherUserOnex,false,"");
        } else if(param_TenantOrAdmin.equals("AdminPublisherOne")){
        //Verify API version
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + varAPINameNine + "_PARAM," + "param_version_PARAM:" + varAPIVersionthree + "_PARAM," + "param_creater_PARAM:" + varAdminPublisherUserOney,false,"");
        }
        //API status verify
        caller.checkElementPresent("APIPublisherBrowse.ele_lblAPILifeCycleStatus","param_version_PARAM:" + varAPIVersionthree + "_PARAM," + "param_status_PARAM:" + param_APIStatus,false,"");
        //Verify user Count
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + varAPIVersionthree + "_PARAM," + "param_users_PARAM:" + param_APIUsers,false,"");
        //Verify delete icon
        caller.checkElementPresent("APIPublisherBrowse.btn_deleteAPI","APIName_PARAM:" + varAPINameNine,false,"");
        caller.pause("5000");
        caller.writeToReport("End Of Executing APIM-384");	
    }
    /**
     *  Business component APIM_427.
     */
    public final static void APIM_427(final SeleniumTestBase caller, final String param_storeURL, final String param_APIName, final String param_APIContext, final String param_tagName, final String param_ProductionEndPoint, final String param_SandBoxEndpoint, final String param_APIVersion, final String param_tenantOrAdmn, final String param_tenantThreeOrAdmn, final String param_tenantThreeOrAdmnStore) throws Exception {
        caller.writeToReport("Start of executing APIM_427");
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        //start design stage
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Type API Name
        String varAPIName = param_APIName+caller.generateData("int",3);
        caller.store("keyAPIName","String",varAPIName);
        caller.type("APIPublisherAdd.tf_APIName",varAPIName);
        //Type API contest
        String varAPIContext = param_APIContext+caller.generateData("int",4);
        caller.type("APIPublisherAdd.tf_APIContext",varAPIContext);
        String varAPIVersion = param_APIVersion+caller.generateData("int",2);
        caller.store("keyAPIVersion","String",varAPIVersion);
        caller.type("APIPublisherAdd.tf_APIVersion",varAPIVersion);
        //Type valid image path
        //Type
        //object=APIPublisherAdd.btn_BrowseImage
        //text=@param_APIImagePath
        caller.type("APIPublisherAdd.tf_Tags",param_tagName);
        caller.fireEvent("KEY%key=\n","2000");
        //waiting for content load
        caller.pause("6000");
        //click save and verify warning
        caller.type("APIPublisherAdd.tf_URLPattern",varAPIName+"/"+varAPIContext);
        caller.click("APIPublisherAdd.chk_Post");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherAdd.btn_Add");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherAdd.btn_Save");
        //waiting for content load
        caller.pause("6000");
        //Go to implement stage
        caller.checkElementPresent("APIPublisherAdd.lnk_NextImplement",false,"");
        //waiting for content load
        caller.pause("8000");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //waiting for content load
        caller.pause("8000");
        caller.click("APIPublisherBrowse.ele_lblManagedAPI");
        caller.pause("4000");
        caller.type("APIPublisherBrowse.tf_ProductionEndPoint",param_ProductionEndPoint);
        caller.type("APIPublisherBrowse.tf_SandBoxEndPoint",param_SandBoxEndpoint);
        caller.click("APIPublisherBrowse.btn_SaveManagedAPI");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_NextManage");
        //waiting for content load
        caller.pause("4000");
        //Start manage stage
        caller.click("APIPublisherAdd.dd_tireAvailabilityConfig");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherAdd.chk_tireSelectionUnlimited");
        caller.click("APIPublisherAdd.btn_SavePublish");
        //waiting for content load
        caller.pause("7000");
        caller.checkElementPresent("APIPublisherAdd.ele_lblFinalClose",false,"");
        caller.click("APIPublisherAdd.ele_lblFinalClose");
        //waiting for content load
        caller.pause("4000");
        //go to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_tenantThreeOrAdmn);
        //Triying to log  to store with publisher user
        lib_Common.bc_StoreLogin(caller, param_tenantThreeOrAdmnStore);
        //waiting for content load
        caller.pause("2000");
        //Verify user cannot log
        caller.checkElementPresent("APIStoreLogin.ele_lblLoggingErrorMessage",false,"");
        caller.writeToReport("End of executing APIM_427");	
    }
    /**
     *  Business component APIM_404.
     */
    public final static void APIM_404(final SeleniumTestBase caller, final String param_APIName, final String paramAPIContest, final String param_tag, final String param_ProductionEndPontJaxRS, final String param_storeURL, final String param_TenantOrAdmin, final String param_publisherURL, final String param_searchVersion, final String param_Description) throws Exception {
        //APIM-404:  Create API and Search the API from the Version
        caller.writeToReport("Start  Executing APIM-404");
        //create API
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Type API Name
        String varAPIName = param_APIName+caller.generateData("int",2);
        caller.type("APIPublisherAdd.tf_APIName",varAPIName);
        //Store API name in to variables
        caller.store("keyAPIName","String",varAPIName);
        //auto generate contest
        String APIcontest = paramAPIContest+caller.generateData("int",2);
        caller.store("keyAPIcontest","String",APIcontest);
        //Type API contest
        caller.type("APIPublisherAdd.tf_APIContext",APIcontest);
        //Setting variable for API version
        String APIversion = "v1.0."+caller.generateData("int",1);
        //Type API Version
        caller.type("APIPublisherAdd.tf_APIVersion",APIversion);
        //waiting for content load
        caller.pause("2000");
        //Type API Description
        caller.type("APIPublisherAdd.tf_Discription",param_Description);
        //waiting for content load
        caller.pause("2000");
        String APItag = param_tag+caller.generateData("int",3);
        //Type API tags
        caller.type("APIPublisherAdd.tf_Tags",APItag);
        caller.pause("2000");
        caller.fireEvent("KEY%key=\n","2000");
        caller.click("APIPublisherAdd.btn_Save");
        //wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Yes");
        //waite for content load
        caller.pause("5000");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //API Manage Section
        caller.pause("8000");
        //Go to browse page
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("2000");
        //search for the API
        caller.type("APIPublisherHome.tf_APISearch",varAPIName);
        caller.pause("2000");
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPIName);
        caller.click("APIPublisherBrowse.lnk_Edit");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        caller.click("APIPublisherBrowse.ele_lblManagedAPI");
        caller.type("APIPublisherBrowse.tf_ProductionEndPoint",param_ProductionEndPontJaxRS);
        caller.click("APIPublisherBrowse.btn_SaveManagedAPI");
        //waiting for content load
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_NextManage");
        //waiting for content load
        caller.pause("2000");
        lib_Common.bc_SelectTiers(caller);
        caller.click("APIPublisherBrowse.btn_SaveAndPublish");
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_Close");
        caller.pause("4000");
        //Navigate to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Select the domain
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //waiting for content load
        caller.pause("2000");
        //Verify the Search box
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        //Type the API version in the Search box
        caller.type("APIStoreHome.tf_APISearchStore",param_searchVersion+APIversion);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        //Verify Already Searched API
        caller.checkElementPresent("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + varAPIName,false,"");
        //waiting for content load
        caller.pause("3000");
        caller.writeToReport("End of the Test case APIM_404");	
    }
    /**
     *  Business component APIM_403.
     */
    public final static void APIM_403(final SeleniumTestBase caller, final String param_APIName, final String param_storeURL, final String param_TenantOrAdmin) throws Exception {
        //APIM-403: (Tenant specific) User should be able to search added API by Name
        caller.writeToReport("Start  Executing APIM-403");
        //Navigate to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Select the domain
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //Retrieve the API name which Stored already
        String varAPINamex = caller.retrieveString("keyAPIName");
        //waiting for content load
        caller.pause("2000");
        //Verify the Search Button
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        //Type the API name in the Search Box
        caller.type("APIStoreHome.tf_APISearchStore",varAPINamex);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("2000");
        //Verify Already Seached API
        caller.checkElementPresent("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + varAPINamex,false,"");
        caller.writeToReport("End of the Test Case APIM_403");	
    }
    /**
     *  Business component APIM_402.
     */
    public final static void APIM_402(final SeleniumTestBase caller, final String param_APIName, final String param_TenantOrAdmin, final String param_storeURL, final String param_SearchContext) throws Exception {
        //APIM-402: (Tenant specific) User search for API with Context
        caller.writeToReport("Start  Executing APIM-402");
        //Navigate to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Select the domain
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //Retrieve the API name which Stored already
        String varAPINamex = caller.retrieveString("keyAPIName");
        String APIcontesty = caller.retrieveString("keyAPIcontest");
        //waiting for content load
        caller.pause("2000");
        //Verify the Search Button
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        //Type the API name in the Search Box
        caller.type("APIStoreHome.tf_APISearchStore",param_SearchContext+APIcontesty);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("2000");
        //Verify Already Seached API
        caller.checkElementPresent("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + varAPINamex,false,"");
        caller.writeToReport("End of the Test Case APIM_401");	
    }
    /**
     *  Business component APIM_401.
     */
    public final static void APIM_401(final SeleniumTestBase caller, final String param_APIName, final String param_TenantOrAdmin, final String param_storeURL) throws Exception {
        //APIM-401: (Tenant specific) User search for API with Upper case name
        caller.writeToReport("Start  Executing APIM-401");
        //Navigate to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Select the domain
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //Retrieve the API name which Stored already
        String varAPINamex = caller.retrieveString("keyAPIName");
        caller.pause("2000");
        //Verify the Search Button
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        //Type the API Upper Case Name  in the Search Box
        String varUppercaseName = varAPINamex.toUpperCase();
        caller.type("APIStoreHome.tf_APISearchStore",varUppercaseName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("2000");
        //Verify Already Seached API
        caller.checkElementPresent("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + varAPINamex,false,"");
        caller.writeToReport("End of the Test Case APIM_401");	
    }
    /**
     *  Business component APIM_400.
     */
    public final static void APIM_400(final SeleniumTestBase caller, final String param_APIName, final String param_TenantOrAdmin, final String param_storeURL) throws Exception {
        //APIM-400: (Tenant specific) User search for API with Lower case name
        caller.writeToReport("Start  Executing APIM-400");
        //Navigate to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Select the domain
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //Retrieve the API name which Stored already
        String varAPINamex = caller.retrieveString("keyAPIName");
        //waiting for content load
        caller.pause("2000");
        //Verify the Search Button
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        //Type the API Lower Case Name  in the Search Box
        String varLowercaseName = varAPINamex.toLowerCase();
        caller.type("APIStoreHome.tf_APISearchStore",varLowercaseName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("2000");
        //Verify Already Seached API
        caller.checkElementPresent("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + varAPINamex,false,"");
        caller.writeToReport("End of the Test Case APIM_400");	
    }
    /**
     *  Business component APIM_399.
     */
    public final static void APIM_399(final SeleniumTestBase caller, final String param_SearchDescription, final String param_Description, final String param_APIName, final String param_TenantOrAdmin, final String param_storeURL) throws Exception {
        //APIM-399: (Tenant specific) Successfully logged in user should be able search API by description
        caller.writeToReport("Start  Executing APIM-399");
        //Navigate to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Select the domain
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //Retrieve the API name which Stored already
        String varAPINamex = caller.retrieveString("keyAPIName");
        //waiting for content load
        caller.pause("2000");
        //Verify the Search Button
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        //Type the API Description  in the Search Box
        caller.type("APIStoreHome.tf_APISearchStore",param_SearchDescription+param_Description);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("2000");
        //Verify Already Seached API
        caller.checkElementPresent("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + varAPINamex,false,"");
        caller.writeToReport("End of the Test Case APIM_399");	
    }
    /**
     *  Business component APIM_398.
     */
    public final static void APIM_398(final SeleniumTestBase caller, final String param_APIName, final String param_searchProvider, final String param_storeURL, final String param_TenantOrAdmin) throws Exception {
        //APIM-398:  Successfully logged in user should be able search with keywords that contains only part of the provider name
        caller.writeToReport("Start  Executing APIM-398");
        //Navigate to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Select the domain
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //Retrieve the API name which Stored already
        String varAPINamey = caller.retrieveString("keyAPIName");
        //waiting for content load
        caller.pause("2000");
        //Verify the Search Button
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        //Retrieve Provider Name
        String varTenantOnePublisherUserOnex = caller.retrieveString("keyTenantOnePublisherUserOne");
        String varAdminPublisherUserOney = caller.retrieveString("keyAdminPublisherUserOne");
        //Type the API Provider Name  in the Search Box
        if(param_TenantOrAdmin.equals("Tenant")){
        caller.type("APIStoreHome.tf_APISearchStore",param_searchProvider+varTenantOnePublisherUserOnex);
        } else if(param_TenantOrAdmin.equals("carbon.super")){
        caller.type("APIStoreHome.tf_APISearchStore",param_searchProvider+varAdminPublisherUserOney);
        }
        //Delete part of context
        caller.fireEvent("KEY%key=backspace","2000");
        caller.fireEvent("KEY%key=backspace","2000");
        caller.fireEvent("KEY%key=backspace","2000");
        caller.fireEvent("KEY%key=backspace","2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("2000");
        //Verify Already Seached API
        caller.checkElementPresent("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + varAPINamey,false,"");
        caller.writeToReport("End of the Test Case APIM_398");	
    }
    /**
     *  Business component APIM_106.
     */
    public final static void APIM_106(final SeleniumTestBase caller, final String param_EditApiVisibilityPublic, final String param_docName, final String param_domain, final String param_DocVisibilitySameAsAPI, final String param_storeURL, final String param_PublisherURL, final String param_DownloadFilePath, final String param_downImage, final String param_fileToUpload, final String param_sourceUrl, final String param_sourceUrlTwo, final String param_otherTypeText, final String param_APIName, final String param_APIcontest, final String param_APIVersion, final String param_APIImagePath, final String param_Discription, final String param_ProductionEndPont, final String param_SandBoxEndpoint, final String param_URLPattern, final String param_TagName) throws Exception {
        //APIM-106: Check document visibility when it's given same as api visibility when api visibility = public
        caller.writeToReport("Start  Executing APIM-106");
        //Retrieving Teant users
        //Retrieve Tenant One publisher user One Details
        String TenantOnePublisherUserOne = caller.retrieveString("keyTenantOnePublisherUserOne");
        String TenantOnePublisherUserOnePassword = caller.retrieveString("keyTenantOnePublisherOnePassword");
        //Retrieve Tenant One publisher user Two Details
        String TenantOnePublisherUserTwo = caller.retrieveString("keyTenantOnePublisherUserTwo");
        String TenantOnePublisherUserTwoPassword = caller.retrieveString("keyTenantOnePublisherTwoPassword");
        //Retrieve Tenant Two publisher user One
        String TenantTwoPublisherUserOne = caller.retrieveString("keyTenantTwoPublisherUserOne");
        String TenantTwoPublisherUserOnePassword = caller.retrieveString("keyTenantTwoPublisherOnePassword");
        //Retrieve Tenant one store user One
        String TenantOneStoreUserOne = caller.retrieveString("keyTenantOneStoreUserOne");
        String TenantOneStoreUserOnePassword = caller.retrieveString("keyTenantOneStoreUserOnePassword");
        //Retrieve Tenant Two store user One
        String TenantTwoStoreUserOne = caller.retrieveString("keyTenantTwoStoreUserOne");
        String TenantTwoStoreUserOnePassword = caller.retrieveString("keyTenantTwoStoreUserOnePassword");
        //Retrieving admin users
        String AdminPublisherUserOne = caller.retrieveString("keyAdminPublisherUserOne");
        String AdminPublisherUserOnePassword = caller.retrieveString("keyAdminPublisherUserOnePassword");
        String AdminPublisherUserTwo = caller.retrieveString("keyAdminPublisherUserTwo");
        String AdminPublisherUserTwoPassword = caller.retrieveString("keyAdminPublisherUserTwoPassword");
        String AdminStoreUserOne = caller.retrieveString("keyAdminStoreUserOne");
        String AdminStoreUserOnePassword = caller.retrieveString("keyAdminStoreUserOnePassword");
        //Retriving Server names
        String var_TenantOne = caller.retrieveString("keyServerNameOne");
        String var_TenantTwo = caller.retrieveString("keyServerNameTwo");
        String var_carbonSuper = caller.retrieveString("keyServerNameCarbonSuper");
        //Start of the test case
        lib_Common.bc_createAndPublishAPI(caller, param_APIName,param_APIcontest,param_APIVersion,param_APIImagePath,param_TagName,param_ProductionEndPont,param_SandBoxEndpoint);
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("3000");
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherHome.lnk_Browse",false,"");
        caller.pause("3000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.pause("2000");
        caller.click("APIPublisherHome.btn_Search");
        //Goto API
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        //Edit the visibility level
        caller.checkElementPresent("APIPublisherBrowse.lnk_Edit",false,"");
        caller.pause("3000");
        caller.click("APIPublisherBrowse.lnk_Edit");
        caller.pause("2000");
        //Set the visibility to public
        caller.select("APIPublisherBrowse.ele_ddVisibility",param_EditApiVisibilityPublic);
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_Save");
        caller.pause("3000");
        //Check for API
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.pause("2000");
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        //Click on API
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("2000");
        //adding new document
        caller.click("Browse_Doc.btn_AddNewDocument");
        //Wait for content load
        caller.pause("5000");
        //check the visibility of ad new document feilds
        caller.checkElementPresent("Browse_Doc.tf_DocName",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        caller.checkElementPresent("Browse_Doc.tf_Summary",false,"");
        caller.checkElementPresent("Browse_Doc.ele_ddVisibility",false,"");
        caller.pause("5000");
        //Generate Doc Name
        String DocName = param_docName+"_"+caller.generateData("int",4);
        //Fill the fields
        caller.type("Browse_Doc.tf_DocName",DocName);
        caller.pause("1000");
        caller.click("Browse_Doc.rdo_HowTo");
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_Inline");
        caller.pause("6000");
        //Select visibility
        caller.select("Browse_Doc.ele_ddVisibility",param_DocVisibilitySameAsAPI);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        //Check added document
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocName,false,"");
        caller.pause("2000");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocName);
        caller.pause("6000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("2000");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + APIVersion,false,"");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocName,false,"");
        caller.pause("4000");
        //Logout the Tenant one Publisher user one or Admin publisher user one
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserOne);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("2000");
        //Login using Another publisher user in same tenant
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserTwoPassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserTwoPassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        //Search for the API
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("2000");
        //Wait for content load
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("2000");
        //Check the added document
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocName,false,"");
        caller.pause("2000");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocName);
        caller.pause("6000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("2000");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + APIVersion,false,"");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocName,false,"");
        //Logout the Tenant one Publisher two one or Admin publisher usertwo
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserTwo);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserTwo);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("4000");
        //Goto the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Handle server selection
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        //Search for the API Name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        //Check document without logging
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.click("APIStoreDocumentation.lnk_HowTo");
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + DocName,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + DocName,false,"");
        caller.pause("2000");
        caller.click("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + DocName);
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("5000");
        caller.checkElementPresent("APIStoreDocumentation.ele_txtContent","param_docName_PARAM:" + DocName,false,"");
        caller.pause("5000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("4000");
        //Login To API Store
        caller.click("APIStoreHome.lnk_login");
        caller.pause("1000");
        if(param_domain.equals("TenantOne")){
        caller.type("APIStoreHome.tf_username",TenantOneStoreUserOne);
        caller.type("APIStoreHome.tf_password",TenantOneStoreUserOnePassword);
        } else {
        caller.type("APIStoreHome.tf_username",AdminStoreUserOne);
        caller.type("APIStoreHome.tf_password",AdminStoreUserOnePassword);
        caller.pause("2000");
        }
        caller.click("APIStoreHome.btn_login");
        caller.click("APIStoreHome.lnk_APIs");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        //wait for page load
        caller.click("APIStoreDocumentation.lnk_HowTo");
        caller.pause("3000");
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + DocName,false,"");
        caller.pause("3000");
        caller.checkElementPresent("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + DocName,false,"");
        caller.pause("2000");
        caller.click("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + DocName);
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("5000");
        caller.checkElementPresent("APIStoreDocumentation.ele_txtContent","param_docName_PARAM:" + DocName,false,"");
        caller.pause("5000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("3000");
        //Logout from the store
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOneStoreUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminStoreUserOne);
        }
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("4000");
        //Check for another tenant
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantTwo);
        lib_Common.bc_APIStoreLogin(caller, TenantTwoStoreUserOne,TenantTwoStoreUserOnePassword);
        caller.checkElementPresent("APIStoreHome.lnk_PublicApiStore",false,"");
        caller.click("APIStoreHome.lnk_PublicApiStore");
        caller.pause("2000");
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.click("APIStoreDocumentation.lnk_HowTo");
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + DocName,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + DocName,false,"");
        caller.pause("2000");
        caller.click("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + DocName);
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("5000");
        caller.checkElementPresent("APIStoreDocumentation.ele_txtContent","param_docName_PARAM:" + DocName,false,"");
        caller.pause("5000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantTwoStoreUserOne);
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("3000");
        //Adding Samples & SDK Document
        //Navigate to the publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_PublisherURL,"2000");
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Login using publisher user one
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserOnePassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserOnePassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("2000");
        //Adding new document
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameTwo = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameTwo);
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.rdo_SampleAndSDK",false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_SampleAndSDK");
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_File");
        caller.pause("5000");
        //Type valid file path
         java.io.File fileTwo = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator + param_fileToUpload);
        String entirePathTwo = fileTwo.getAbsolutePath();
        caller.type("Browse_Doc.tf_BrowseFile",entirePathTwo);
        caller.pause("4000");
        //Set visibility level same as API
        caller.select("Browse_Doc.ele_ddVisibility",param_DocVisibilitySameAsAPI);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        //Check for added document
        caller.checkElementPresent("Browse_Doc.ele_lblSamples","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.lnk_open","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.pause("2000");
        //Handling popup for fire fox browser
        String downImagePopup1 = param_downImage;
        if(caller.checkImagePresent(downImagePopup1,false)){
        caller.fireEvent("KEY%key=alt+s","2000");
        caller.fireEvent("KEY%key=alt+a","2000");
        caller.fireEvent("KEY%key=\n","1000");
        }
        //Check downloaded file
        caller.checkFileInfo(param_DownloadFilePath,"EXIST",false,"");
        //Logout first Publisher user
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserOne);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("2000");
        //login using second publisher user with same tenant
        //Confirm the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserTwoPassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserTwoPassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        //Waiting for content to load
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Check for added document
        caller.checkElementPresent("Browse_Doc.ele_lblSamples","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.lnk_open","param_docName_PARAM:" + DocNameTwo);
        caller.pause("6000");
        //Handle popup for download
        String downImagePopup12 = param_downImage;
        if(caller.checkImagePresent(downImagePopup12,false)){
        caller.fireEvent("KEY%key=alt+s","2000");
        caller.fireEvent("KEY%key=alt+a","2000");
        caller.fireEvent("KEY%key=\n","1000");
        }
        //Check the downloaded file
        caller.checkFileInfo(param_DownloadFilePath,"EXIST",false,"");
        //Logout the Tenant one Publisher user two or Admin publisher user two
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserTwo);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserTwo);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("4000");
        //Goto the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Handle server selection
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        //Search for the API Name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        //Check document without logging into the store
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.click("APIStoreDocumentation.lnk_Samples");
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_Download","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.click("APIStoreDocumentation.lnk_Download","param_docName_PARAM:" + DocNameTwo);
        caller.checkFileInfo(param_DownloadFilePath,"EXIST",false,"");
        caller.pause("3000");
        //Login To API Store Using tenant one store user
        caller.click("APIStoreHome.lnk_login");
        caller.pause("1000");
        //Type username and the password
        if(param_domain.equals("TenantOne")){
        caller.type("APIStoreHome.tf_username",TenantOneStoreUserOne);
        caller.type("APIStoreHome.tf_password",TenantOneStoreUserOnePassword);
        } else {
        caller.type("APIStoreHome.tf_username",AdminStoreUserOne);
        caller.type("APIStoreHome.tf_password",AdminStoreUserOnePassword);
        caller.pause("2000");
        }
        caller.click("APIStoreHome.btn_login");
        caller.click("APIStoreHome.lnk_APIs");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        //wait for page load
        caller.click("APIStoreDocumentation.lnk_Samples");
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_Download","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.click("APIStoreDocumentation.lnk_Download","param_docName_PARAM:" + DocNameTwo);
        caller.checkFileInfo(param_DownloadFilePath,"EXIST",false,"");
        caller.pause("3000");
        //Logout from the store
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOneStoreUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminStoreUserOne);
        }
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("4000");
        //Login into the store using tenant two store user
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantTwo);
        lib_Common.bc_APIStoreLogin(caller, TenantTwoStoreUserOne,TenantTwoStoreUserOnePassword);
        caller.checkElementPresent("APIStoreHome.lnk_PublicApiStore",false,"");
        caller.click("APIStoreHome.lnk_PublicApiStore");
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.click("APIStoreDocumentation.lnk_Samples");
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_Download","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.click("APIStoreDocumentation.lnk_Download","param_docName_PARAM:" + DocNameTwo);
        caller.checkFileInfo(param_DownloadFilePath,"EXIST",false,"");
        caller.pause("3000");
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantTwoStoreUserOne);
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("3000");
        //Adding Public Forum Type Document
        caller.pause("4000");
        //Navigate to the publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_PublisherURL,"2000");
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Login using publisher user one
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserOnePassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserOnePassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("2000");
        //adding new document
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameThree = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameThree);
        caller.checkElementPresent("Browse_Doc.rdo_PublicForum",false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_PublicForum");
        caller.pause("4000");
        //Type the source URL
        caller.type("Browse_Doc.tf_URL",param_sourceUrl);
        caller.pause("3000");
        //Set the visibility level to Same as API
        caller.select("Browse_Doc.ele_ddVisibility",param_DocVisibilitySameAsAPI);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.ele_lblPublicForum","param_docName_PARAM:" + DocNameThree,false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.lnk_view","param_docName_PARAM:" + DocNameThree);
        //wait for load
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("3000");
        //Logout the publisher User One
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserOne);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("2000");
        //login using second publisher user with same tenant
        //Confirm the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserTwoPassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserTwoPassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        //Waiting for content to load
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("2000");
        //Check the added document
        caller.checkElementPresent("Browse_Doc.ele_lblPublicForum","param_docName_PARAM:" + DocNameThree,false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.lnk_view","param_docName_PARAM:" + DocNameThree);
        //wait for load
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("3000");
        //Logout the Tenant one Publisher user two or Admin publisher user two
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserTwo);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserTwo);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("4000");
        //Goto the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Handle server selection
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        //Search for the API Name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        //Check the document without logging into the store
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.pause("2000");
        caller.click("APIStoreDocumentation.lnk_PublicForum");
        caller.pause("3000");
        //Check the added document
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + DocNameThree,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocNameThree + "_PARAM," + "param_URLLink_PARAM:" + param_sourceUrl,false,"");
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocNameThree + "_PARAM," + "param_URLLink_PARAM:" + param_sourceUrl);
        caller.pause("6000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("4000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("3000");
        //Login To API Store Using tenant one store user
        caller.click("APIStoreHome.lnk_login");
        caller.pause("1000");
        //Type username and the password
        if(param_domain.equals("TenantOne")){
        caller.type("APIStoreHome.tf_username",TenantOneStoreUserOne);
        caller.type("APIStoreHome.tf_password",TenantOneStoreUserOnePassword);
        } else {
        caller.type("APIStoreHome.tf_username",AdminStoreUserOne);
        caller.type("APIStoreHome.tf_password",AdminStoreUserOnePassword);
        caller.pause("2000");
        }
        caller.click("APIStoreHome.btn_login");
        caller.click("APIStoreHome.lnk_APIs");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        //wait for page load
        caller.click("APIStoreDocumentation.lnk_PublicForum");
        caller.pause("3000");
        //Check the added document
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + DocNameThree,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocNameThree + "_PARAM," + "param_URLLink_PARAM:" + param_sourceUrl,false,"");
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocNameThree + "_PARAM," + "param_URLLink_PARAM:" + param_sourceUrl);
        caller.pause("8000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("4000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("3000");
        caller.pause("3000");
        //Logout from the store
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOneStoreUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminStoreUserOne);
        }
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("4000");
        //Login into the store using tenant two store user
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantTwo);
        lib_Common.bc_APIStoreLogin(caller, TenantTwoStoreUserOne,TenantTwoStoreUserOnePassword);
        caller.checkElementPresent("APIStoreHome.lnk_PublicApiStore",false,"");
        caller.click("APIStoreHome.lnk_PublicApiStore");
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.click("APIStoreDocumentation.lnk_PublicForum");
        caller.pause("3000");
        //Check the added document
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + DocNameThree,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocNameThree + "_PARAM," + "param_URLLink_PARAM:" + param_sourceUrl,false,"");
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocNameThree + "_PARAM," + "param_URLLink_PARAM:" + param_sourceUrl);
        caller.pause("6000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("4000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("3000");
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantTwoStoreUserOne);
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("3000");
        //Adding Doc  Support forum type
        //Navigate to the publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_PublisherURL,"2000");
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Login using publisher user one
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserOnePassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserOnePassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("2000");
        //Adding new document
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameFour = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameFour);
        caller.checkElementPresent("Browse_Doc.rdo_SupportForum",false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_SupportForum");
        caller.pause("3000");
        caller.type("Browse_Doc.tf_URL",param_sourceUrlTwo);
        caller.pause("3000");
        caller.select("Browse_Doc.ele_ddVisibility",param_DocVisibilitySameAsAPI);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        //Check the added document
        caller.checkElementPresent("Browse_Doc.ele_lblSupportForum","param_docName_PARAM:" + DocNameFour,false,"");
        caller.click("Browse_Doc.lnk_view","param_docName_PARAM:" + DocNameFour);
        //wait
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("3000");
        //Logout first Publisher user
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserOne);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("2000");
        //login using second publisher user with same tenant
        //Confirm the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserTwoPassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserTwoPassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        //Waiting for content to load
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("2000");
        //Check the added document
        caller.checkElementPresent("Browse_Doc.ele_SupportForum","param_docName_PARAM:" + DocNameFour,false,"");
        caller.click("Browse_Doc.lnk_view","param_docName_PARAM:" + DocNameFour);
        //wait
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("4000");
        //Logout the Tenant one Publisher user two or Admin publisher user two
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserTwo);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserTwo);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("4000");
        //Goto the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Handle server selection
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        //Search for the API Name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        //Check document without logging into the store
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.click("APIStoreDocumentation.lnk_SupportForum");
        caller.pause("3000");
        //Check the added document
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + DocNameFour,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocNameFour + "_PARAM," + "param_URLLink_PARAM:" + param_sourceUrlTwo,false,"");
        caller.click("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocNameFour + "_PARAM," + "param_URLLink_PARAM:" + param_sourceUrlTwo);
        caller.pause("6000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("4000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("3000");
        //Login To API Store Using tenant one store user
        caller.click("APIStoreHome.lnk_login");
        caller.pause("1000");
        //Type username and the password
        if(param_domain.equals("TenantOne")){
        caller.type("APIStoreHome.tf_username",TenantOneStoreUserOne);
        caller.type("APIStoreHome.tf_password",TenantOneStoreUserOnePassword);
        } else {
        caller.type("APIStoreHome.tf_username",AdminStoreUserOne);
        caller.type("APIStoreHome.tf_password",AdminStoreUserOnePassword);
        caller.pause("2000");
        }
        caller.click("APIStoreHome.btn_login");
        caller.click("APIStoreHome.lnk_APIs");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        //wait for page load
        caller.click("APIStoreDocumentation.lnk_SupportForum");
        //Check the added document
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + DocNameFour,false,"");
        caller.pause("3000");
        caller.checkElementPresent("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocNameFour + "_PARAM," + "param_URLLink_PARAM:" + param_sourceUrlTwo,false,"");
        caller.pause("4000");
        caller.click("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocNameFour + "_PARAM," + "param_URLLink_PARAM:" + param_sourceUrlTwo);
        caller.pause("6000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("4000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("3000");
        caller.pause("3000");
        //Logout from the store
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOneStoreUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminStoreUserOne);
        }
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("4000");
        //Login into the store using tenant two store user
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantTwo);
        lib_Common.bc_APIStoreLogin(caller, TenantTwoStoreUserOne,TenantTwoStoreUserOnePassword);
        caller.checkElementPresent("APIStoreHome.lnk_PublicApiStore",false,"");
        caller.click("APIStoreHome.lnk_PublicApiStore");
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        //Check the added document
        caller.click("APIStoreDocumentation.lnk_SupportForum");
        caller.pause("3000");
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + DocNameFour,false,"");
        caller.pause("3000");
        caller.checkElementPresent("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocNameFour + "_PARAM," + "param_URLLink_PARAM:" + param_sourceUrlTwo,false,"");
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocNameFour + "_PARAM," + "param_URLLink_PARAM:" + param_sourceUrlTwo);
        caller.pause("6000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("4000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("3000");
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantTwoStoreUserOne);
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("3000");
        //Adding Another Type Document
        caller.pause("4000");
        //Navigate to the publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_PublisherURL,"2000");
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Login using publisher user one
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserOnePassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserOnePassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        //Adding new document
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("2000");
        //adding new document
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameFive = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameFive);
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.rdo_Other",false,"");
        caller.click("Browse_Doc.rdo_Other");
        caller.pause("1000");
        caller.type("Browse_Doc.tf_Other",param_otherTypeText);
        caller.click("Browse_Doc.rdo_Inline");
        caller.pause("3000");
        caller.select("Browse_Doc.ele_ddVisibility",param_DocVisibilitySameAsAPI);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        //Check the added document
        caller.checkElementPresent("Browse_Doc.ele_lblOther","param_docName_PARAM:" + DocNameFive,false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocNameFive);
        caller.pause("6000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("2000");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + APIVersion,false,"");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lblOther","param_docName_PARAM:" + DocNameFive,false,"");
        caller.pause("2000");
        //Logout first Publisher user
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserOne);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("2000");
        //login using second publisher user with same tenant
        //Confirm the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserTwoPassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserTwoPassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("2000");
        //Check the added document
        caller.checkElementPresent("Browse_Doc.ele_lblOther","param_docName_PARAM:" + DocNameFive,false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocNameFive);
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("2000");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + APIVersion,false,"");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.checkElementPresent("Browse_Doc.ele_lblOther","param_docName_PARAM:" + DocNameFive,false,"");
        caller.pause("5000");
        //Logout the Tenant one Publisher user two or Admin publisher user two
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserTwo);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserTwo);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("4000");
        //Goto the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Handle server selection
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        //Search for the API Name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        //Check document without logging into the store
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_Other");
        //Check the added document
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + DocNameFive,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + DocNameFive,false,"");
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + DocNameFive);
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("5000");
        caller.checkElementPresent("APIStoreDocumentation.ele_txtContent","param_docName_PARAM:" + DocNameFive,false,"");
        caller.pause("5000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        //Login To API Store Using tenant one store user
        caller.click("APIStoreHome.lnk_login");
        caller.pause("1000");
        //Type username and the password
        if(param_domain.equals("TenantOne")){
        caller.type("APIStoreHome.tf_username",TenantOneStoreUserOne);
        caller.type("APIStoreHome.tf_password",TenantOneStoreUserOnePassword);
        } else {
        caller.type("APIStoreHome.tf_username",AdminStoreUserOne);
        caller.type("APIStoreHome.tf_password",AdminStoreUserOnePassword);
        caller.pause("2000");
        }
        caller.click("APIStoreHome.btn_login");
        caller.click("APIStoreHome.lnk_APIs");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        //wait for page load
        caller.click("APIStoreDocumentation.lnk_Other");
        //Check the added document
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + DocNameFive,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + DocNameFive,false,"");
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + DocNameFive);
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("5000");
        caller.checkElementPresent("APIStoreDocumentation.ele_txtContent","param_docName_PARAM:" + DocNameFive,false,"");
        caller.pause("5000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("3000");
        //Logout from the store
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOneStoreUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminStoreUserOne);
        }
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("4000");
        //Login into the store using tenant two store user
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantTwo);
        lib_Common.bc_APIStoreLogin(caller, TenantTwoStoreUserOne,TenantTwoStoreUserOnePassword);
        caller.checkElementPresent("APIStoreHome.lnk_PublicApiStore",false,"");
        caller.click("APIStoreHome.lnk_PublicApiStore");
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.click("APIStoreDocumentation.lnk_Other");
        //Check the added document
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + DocNameFive,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + DocNameFive,false,"");
        caller.pause("5000");
        caller.click("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + DocNameFive);
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("5000");
        caller.checkElementPresent("APIStoreDocumentation.ele_txtContent","param_docName_PARAM:" + DocNameFive,false,"");
        caller.pause("5000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantTwoStoreUserOne);
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("3000");
        caller.writeToReport("End Of  Executing APIM-106");	
    }
    /**
     *  Business component APIM_393.
     */
    public final static void APIM_393(final SeleniumTestBase caller, final String param_storeURL, final String param_APIName, final String param_TenantOrAdmin, final String param_SearchContext) throws Exception {
        //APIM-402: (Tenant specific) User search for API with part of the Context
        caller.writeToReport("Start  Executing APIM-393");
        //Navigate to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Select the domain
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //Retrieve the API name which Stored already
        String varAPINamez = caller.retrieveString("keyAPIName");
        String APIcontestz = caller.retrieveString("keyAPIcontest");
        //Waiting for the content to load
        caller.pause("2000");
        //Verify the Search Button
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        //Type the API name in the Search Box
        caller.type("APIStoreHome.tf_APISearchStore",param_SearchContext+APIcontestz);
        //Waiting for the content to load
        caller.pause("2000");
        caller.fireEvent("KEY%key=backspace","2000");
        caller.fireEvent("KEY%key=backspace","2000");
        caller.fireEvent("KEY%key=backspace","2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("2000");
        //Verify Already Seached API
        caller.checkElementPresent("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + varAPINamez,false,"");
        caller.writeToReport("End of the Test Case APIM_393");	
    }
    /**
     *  Business component APIM_107.
     */
    public final static void APIM_107(final SeleniumTestBase caller, final String param_publisherURL, final String param_domain) throws Exception {
        //When user clicks on the '?' icon of the visibility field tip box should open.
        caller.writeToReport("Start  Executing APIM-107");
        //Retrieving Tenant users
        //Retrieve Tenant One publisher user One Details
        String TenantOnePublisherUserOne = caller.retrieveString("keyTenantOnePublisherUserOne");
        String TenantOnePublisherUserOnePassword = caller.retrieveString("keyTenantOnePublisherOnePassword");
        //Retrieving admin users
        //Retrieve Admin  publisher user One
        String AdminPublisherUserOne = caller.retrieveString("keyAdminPublisherUserOne");
        String AdminPublisherUserOnePassword = caller.retrieveString("keyAdminPublisherUserOnePassword");
        caller.pause("3000");
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("3000");
        //Navigate to the publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Login using publisher user
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserOnePassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserOnePassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("2000");
        //adding new document
        caller.click("Browse_Doc.btn_AddNewDocument");
        //Wait for content load
        caller.pause("1000");
        //check the visibility of ad new document feilds
        caller.checkElementPresent("Browse_Doc.tf_DocName",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        caller.checkElementPresent("Browse_Doc.tf_Summary",false,"");
        caller.checkElementPresent("Browse_Doc.ele_ddVisibility",false,"");
        caller.checkElementPresent("Browse_Doc.ele_ddVisibility",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblQuectionMark",false,"");
        caller.click("Browse_Doc.ele_lblQuectionMark");
        caller.pause("3000");
        //Check the tip box details
        caller.checkElementPresent("Browse_Doc.ele_lblTipBoxSameAsVisibility",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblTopBoxVisibleToMyDomain",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblTopBoxPrivate",false,"");
        caller.writeToReport("End Of  Executing APIM-107");	
    }
    /**
     *  Business component APIM_359.
     */
    public final static void APIM_359(final SeleniumTestBase caller, final String param_APIName, final String param_searchDoc) throws Exception {
        //APIM-359: Successfully logged in user should be able search API by documentation content
        //Go to browse and search API
        caller.writeToReport("Start Executing APIM-359");
        caller.click("APIPublisherHome.lnk_Browse");
        String varAPINameEight = caller.retrieveString("keyAPIName");
        caller.type("APIPublisherHome.tf_APISearch",varAPINameEight);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameEight);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("5000");
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("5000");
        String varDocName = "Doc"+caller.generateData("Alphanumeric",4);
        caller.pause("2000");
        caller.type("Browse_Doc.tf_DocName",varDocName);
        caller.pause("5000");
        caller.click("Browse_Doc.rdo_HowTo");
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_Inline");
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("2000");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + varDocName);
        caller.pause("6000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("2000");
        caller.selectFrame("Browse_Doc.frame1");
        caller.pause("4000");
        caller.checkElementPresent("Browse_Doc.tf_EditContent1",false,"");
        caller.pause("2000");
        caller.click("Browse_Doc.tf_EditContent1");
        caller.pause("500");
        String varEditContent = "Content"+caller.generateData("Alphanumeric",4);
        caller.type("Browse_Doc.tf_EditContent1",varEditContent);
        caller.pause("4000");
        caller.fireEvent("KEY%key=\t|key=\t|key=\n","5000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("5000");
        //check for the document details
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + varDocName,false,"");
        caller.pause("5000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",param_searchDoc+varEditContent);
        caller.pause("2000");
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameEight,false,"");
        caller.pause("5000");
        caller.writeToReport("End Of Executing APIM-359");	
    }
    /**
     *  Business component APIM_108.
     */
    public final static void APIM_108(final SeleniumTestBase caller, final String param_ApiVisibility, final String param_SameApiVisibility, final String param_publisherURL, final String param_storeURL, final String param_domain, final String param_docName, final String param_fileToUpload, final String param_downImage, final String param_DownloadFilePath, final String param_sourceUrl, final String param_OthertypeText) throws Exception {
        //Check doc visibility when it's given same as api visibility; api visibility = visible to my domain.
        caller.writeToReport("Start  Executing APIM-108");
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("3000");
        //Retrieving Teant users
        String TenantOnePublisherUserOne = caller.retrieveString("keyTenantOnePublisherUserOne");
        String TenantOnePublisherUserOnePassword = caller.retrieveString("keyTenantOnePublisherOnePassword");
        String TenantOnePublisherUserTwo = caller.retrieveString("keyTenantOnePublisherUserTwo");
        String TenantOnePublisherUserTwoPassword = caller.retrieveString("keyTenantOnePublisherTwoPassword");
        String TenantTwoPublisherUserOne = caller.retrieveString("keyTenantTwoPublisherUserOne");
        String TenantTwoPublisherUserOnePassword = caller.retrieveString("keyTenantTwoPublisherOnePassword");
        String TenantOneStoreUserOne = caller.retrieveString("keyTenantOneStoreUserOne");
        String TenantOneStoreUserOnePassword = caller.retrieveString("keyTenantOneStoreUserOnePassword");
        String TenantTwoStoreUserOne = caller.retrieveString("keyTenantTwoStoreUserOne");
        String TenantTwoStoreUserOnePassword = caller.retrieveString("keyTenantTwoStoreUserOnePassword");
        //Retrieving admin users
        String AdminPublisherUserOne = caller.retrieveString("keyAdminPublisherUserOne");
        String AdminPublisherUserOnePassword = caller.retrieveString("keyAdminPublisherUserOnePassword");
        String AdminPublisherUserTwo = caller.retrieveString("keyAdminPublisherUserTwo");
        String AdminPublisherUserTwoPassword = caller.retrieveString("keyAdminPublisherUserTwoPassword");
        String AdminStoreUserOne = caller.retrieveString("keyAdminStoreUserOne");
        String AdminStoreUserOnePassword = caller.retrieveString("keyAdminStoreUserOnePassword");
        //Retriving Server names
        String var_TenantOne = caller.retrieveString("keyServerNameOne");
        String var_TenantTwo = caller.retrieveString("keyServerNameTwo");
        String var_carbonSuper = caller.retrieveString("keyServerNameCarbonSuper");
        //Ckeck the APIName
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("4000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        //Click on API Name
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        //Edit the Visibility type to Visible to my domain in API
        caller.checkElementPresent("APIPublisherBrowse.lnk_Edit",false,"");
        caller.pause("3000");
        caller.click("APIPublisherBrowse.lnk_Edit");
        caller.pause("3000");
        //Select Visibility Level
        caller.select("APIPublisherBrowse.ele_ddVisibility",param_ApiVisibility);
        caller.pause("3000");
        if(caller.checkElementPresent("APIPublisherBrowse.btn_Ok")){
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_Ok");
        caller.pause("2000");
        }
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_Save");
        caller.pause("3000");
        //Search for API name
        caller.pause("2000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("300");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Adding new document
        caller.click("Browse_Doc.btn_AddNewDocument");
        //Wait for content load
        caller.pause("1000");
        //check the visibility of ad new document feilds
        caller.checkElementPresent("Browse_Doc.tf_DocName",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        caller.checkElementPresent("Browse_Doc.tf_Summary",false,"");
        caller.checkElementPresent("Browse_Doc.ele_ddVisibility",false,"");
        caller.pause("3000");
        //Generate Doc Name
        String DocName = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocName);
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_HowTo");
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_Inline");
        caller.pause("2000");
        caller.select("Browse_Doc.ele_ddVisibility",param_SameApiVisibility);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        //Check the added document
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocName,false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocName);
        caller.pause("3000");
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("2000");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + APIVersion,false,"");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("3000");
        //Check the added document
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocName,false,"");
        caller.pause("3000");
        //Logout the Tenant one Publisher user one or Admin publisher user one
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserOne);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        //Login using Another publisher user in same tenant
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserTwoPassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserTwoPassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        //Search for the API
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("300");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.lnk_Doc");
        //Checking for added document
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocName,false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocName);
        caller.pause("3000");
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("2000");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + APIVersion,false,"");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocName,false,"");
        caller.pause("3000");
        //Logout the Tenant one Publisher user two or Admin publisher user two
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserTwo);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserTwo);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("4000");
        //Check Using another tenant's publisher user
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        caller.type("APIPublisherLogin.tf_UserName",TenantTwoPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantTwoPublisherUserOnePassword);
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        //Search for the API
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("300");
        //Verify the API does not exit for this User
        if(caller.checkElementPresent("APIPublisherHome.ele_lblNoAPICreated")){
        caller.writeToReport("API Verification successfull");
        } else {
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblNoMachingAPI",false,"");
        caller.writeToReport("API Verification successfull");
        }
        //Logout Tenant Two publisher user
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantTwoPublisherUserOne);
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("4000");
        //Goto the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Handle server selection
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        caller.pause("3000");
        //Login To API Store
        caller.click("APIStoreHome.lnk_login");
        caller.pause("1000");
        if(param_domain.equals("TenantOne")){
        caller.type("APIStoreHome.tf_username",TenantOneStoreUserOne);
        caller.type("APIStoreHome.tf_password",TenantOneStoreUserOnePassword);
        } else {
        caller.type("APIStoreHome.tf_username",AdminStoreUserOne);
        caller.type("APIStoreHome.tf_password",AdminStoreUserOnePassword);
        caller.pause("2000");
        }
        caller.click("APIStoreHome.btn_login");
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("3000");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("200");
        //wait for content load
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_HowTo");
        //Check the added document
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + DocName,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + DocName,false,"");
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + DocName);
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("5000");
        caller.checkElementPresent("APIStoreDocumentation.ele_txtContent","param_docName_PARAM:" + DocName,false,"");
        caller.pause("5000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        //Logout from the store
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOneStoreUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminStoreUserOne);
        }
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("4000");
        //Check for another tenant
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantTwo);
        lib_Common.bc_APIStoreLogin(caller, TenantTwoStoreUserOne,TenantTwoStoreUserOnePassword);
        caller.checkElementPresent("APIStoreHome.lnk_PublicApiStore",false,"");
        caller.click("APIStoreHome.lnk_PublicApiStore");
        caller.pause("2000");
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.ele_lblNoMatchingAPI",false,"");
        //Logout the user of another Tenant
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantTwoStoreUserOne);
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("3000");
        //Adding sample & SDK document
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Login using publisher user one
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserOnePassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserOnePassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameTwo = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameTwo);
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_SampleAndSDK");
        caller.pause("5000");
        caller.click("Browse_Doc.rdo_File");
        caller.pause("3000");
        //Type valid file path
         java.io.File fileTwo = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator + param_fileToUpload);
        String entirePathTwo = fileTwo.getAbsolutePath();
        caller.type("Browse_Doc.tf_BrowseFile",entirePathTwo);
        caller.pause("3000");
        caller.select("Browse_Doc.ele_ddVisibility",param_SameApiVisibility);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        //Check the added document
        caller.checkElementPresent("Browse_Doc.ele_lblSamples","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.lnk_open","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.click("Browse_Doc.lnk_open","param_docName_PARAM:" + DocNameTwo);
        caller.pause("2000");
        //Handling popup for fire fox browser
        String downImagePopup1 = param_downImage;
        if(caller.checkImagePresent(downImagePopup1,false)){
        caller.fireEvent("KEY%key=alt+s","2000");
        caller.fireEvent("KEY%key=alt+a","2000");
        caller.fireEvent("KEY%key=\n","1000");
        }
        //Check downloaded file
        caller.checkFileInfo(param_DownloadFilePath,"EXIST",false,"");
        //Logout first Publisher user
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserOne);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("2000");
        //login using second publisher user with same tenant
        //Confirm the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserTwoPassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserTwoPassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        //Waiting for content to load
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Checking for added document
        caller.checkElementPresent("Browse_Doc.ele_lblSamples","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.lnk_open","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.lnk_open","param_docName_PARAM:" + DocNameTwo);
        caller.pause("6000");
        //Handle popup for download
        String downImagePopup12 = param_downImage;
        if(caller.checkImagePresent(downImagePopup12,false)){
        caller.fireEvent("KEY%key=alt+s","2000");
        caller.fireEvent("KEY%key=alt+a","2000");
        caller.fireEvent("KEY%key=\n","1000");
        }
        //Check the downloaded file
        caller.checkFileInfo(param_DownloadFilePath,"EXIST",false,"");
        //Logout the Tenant one Publisher user two or Admin publisher user two
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserTwo);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserTwo);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("4000");
        //Check Using another tenant's publisher user
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        caller.type("APIPublisherLogin.tf_UserName",TenantTwoPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantTwoPublisherUserOnePassword);
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        //Search for the API
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("300");
        //Verify the API does not exit for this User
        if(caller.checkElementPresent("APIPublisherHome.ele_lblNoAPICreated")){
        caller.writeToReport("API Verification successfull");
        } else {
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblNoMachingAPI",false,"");
        caller.writeToReport("API Verification successfull");
        }
        //Logout Tenant Two publisher user
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantTwoPublisherUserOne);
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("4000");
        //Goto the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Handle server selection
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        caller.pause("3000");
        //Login To API Store
        caller.click("APIStoreHome.lnk_login");
        caller.pause("1000");
        if(param_domain.equals("TenantOne")){
        caller.type("APIStoreHome.tf_username",TenantOneStoreUserOne);
        caller.type("APIStoreHome.tf_password",TenantOneStoreUserOnePassword);
        } else {
        caller.type("APIStoreHome.tf_username",AdminStoreUserOne);
        caller.type("APIStoreHome.tf_password",AdminStoreUserOnePassword);
        caller.pause("2000");
        }
        caller.click("APIStoreHome.btn_login");
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("3000");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("200");
        //wait for content load
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.click("APIStoreDocumentation.lnk_Samples");
        //Checking for added document
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_Download","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_Download","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.click("APIStoreDocumentation.lnk_Download","param_docName_PARAM:" + DocNameTwo);
        caller.checkFileInfo(param_DownloadFilePath,"EXIST",false,"");
        //Logout from the store
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOneStoreUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminStoreUserOne);
        }
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("4000");
        //Check for another tenant
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantTwo);
        lib_Common.bc_APIStoreLogin(caller, TenantTwoStoreUserOne,TenantTwoStoreUserOnePassword);
        caller.checkElementPresent("APIStoreHome.lnk_PublicApiStore",false,"");
        caller.click("APIStoreHome.lnk_PublicApiStore");
        caller.pause("2000");
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.ele_lblNoMatchingAPI",false,"");
        //Logout the user of another Tenant
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantTwoStoreUserOne);
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("3000");
        //Adding public forum document
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Login using publisher user one
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserOnePassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserOnePassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameThree = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameThree);
        caller.pause("3000");
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.rdo_PublicForum",false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_PublicForum");
        caller.pause("1000");
        caller.type("Browse_Doc.tf_URL",param_sourceUrl);
        caller.pause("3000");
        caller.select("Browse_Doc.ele_ddVisibility",param_SameApiVisibility);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        //Check the added document
        caller.checkElementPresent("Browse_Doc.ele_lblPublicForum","param_docName_PARAM:" + DocNameThree,false,"");
        caller.pause("3000");
        caller.pause("3000");
        caller.click("Browse_Doc.lnk_view","param_docName_PARAM:" + DocNameThree);
        //wait for load
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("3000");
        //Logout first Publisher user
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserOne);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("2000");
        //login using second publisher user with same tenant
        //Confirm the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserTwoPassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserTwoPassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        //Waiting for content to load
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Checking for added document
        caller.checkElementPresent("Browse_Doc.ele_lblPublicForum","param_docName_PARAM:" + DocNameThree,false,"");
        caller.click("Browse_Doc.lnk_view","param_docName_PARAM:" + DocNameThree);
        //wait
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        //Logout the Tenant one Publisher user two or Admin publisher user two
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserTwo);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserTwo);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("4000");
        //Check Using another tenant's publisher user
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        caller.type("APIPublisherLogin.tf_UserName",TenantTwoPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantTwoPublisherUserOnePassword);
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        //Search for the API
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("300");
        //Verify the API does not exit for this User
        if(caller.checkElementPresent("APIPublisherHome.ele_lblNoAPICreated")){
        caller.writeToReport("API Verification successfull");
        } else {
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblNoMachingAPI",false,"");
        caller.writeToReport("API Verification successfull");
        }
        //Logout Tenant Two publisher user
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantTwoPublisherUserOne);
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("4000");
        //Goto the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Handle server selection
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        caller.pause("3000");
        //Login To API Store
        caller.click("APIStoreHome.lnk_login");
        caller.pause("1000");
        if(param_domain.equals("TenantOne")){
        caller.type("APIStoreHome.tf_username",TenantOneStoreUserOne);
        caller.type("APIStoreHome.tf_password",TenantOneStoreUserOnePassword);
        } else {
        caller.type("APIStoreHome.tf_username",AdminStoreUserOne);
        caller.type("APIStoreHome.tf_password",AdminStoreUserOnePassword);
        caller.pause("2000");
        }
        caller.click("APIStoreHome.btn_login");
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("3000");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("200");
        //wait for content load
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.click("APIStoreDocumentation.lnk_PublicForum");
        //Check the added document
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + DocNameThree,false,"");
        caller.pause("3000");
        caller.checkElementPresent("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocNameThree + "_PARAM," + "param_URLLink_PARAM:" + param_sourceUrl,false,"");
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocNameThree + "_PARAM," + "param_URLLink_PARAM:" + param_sourceUrl);
        caller.pause("6000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("4000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("3000");
        //Logout from the store
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOneStoreUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminStoreUserOne);
        }
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("4000");
        //Check for another tenant
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantTwo);
        lib_Common.bc_APIStoreLogin(caller, TenantTwoStoreUserOne,TenantTwoStoreUserOnePassword);
        caller.checkElementPresent("APIStoreHome.lnk_PublicApiStore",false,"");
        caller.click("APIStoreHome.lnk_PublicApiStore");
        caller.pause("2000");
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.ele_lblNoMatchingAPI",false,"");
        //Logout the user of another Tenant
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantTwoStoreUserOne);
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("3000");
        //Adding support forum document type
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Login using publisher user one
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserOnePassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserOnePassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameFour = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameFour);
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.rdo_SupportForum",false,"");
        caller.click("Browse_Doc.rdo_SupportForum");
        caller.pause("1000");
        caller.type("Browse_Doc.tf_URL",param_sourceUrl);
        caller.pause("3000");
        caller.select("Browse_Doc.ele_ddVisibility",param_SameApiVisibility);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        //Check the added document
        caller.checkElementPresent("Browse_Doc.ele_lblSupportForum","param_docName_PARAM:" + DocNameFour,false,"");
        caller.pause("3000");
        //Logout first Publisher user
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserOne);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("2000");
        //login using second publisher user with same tenant
        //Confirm the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserTwoPassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserTwoPassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        //Waiting for content to load
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Checking for added document
        caller.checkElementPresent("Browse_Doc.ele_lblSupportForum","param_docName_PARAM:" + DocNameFour,false,"");
        caller.click("Browse_Doc.lnk_view","param_docName_PARAM:" + DocNameFour);
        //wait
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        //Logout the Tenant one Publisher user two or Admin publisher user two
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserTwo);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserTwo);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("4000");
        //Check Using another tenant's publisher user
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        caller.type("APIPublisherLogin.tf_UserName",TenantTwoPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantTwoPublisherUserOnePassword);
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        //Search for the API
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("300");
        //Verify the API does not exit for this User
        if(caller.checkElementPresent("APIPublisherHome.ele_lblNoAPICreated")){
        caller.writeToReport("API Verification successfull");
        } else {
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblNoMachingAPI",false,"");
        caller.writeToReport("API Verification successfull");
        }
        //Logout Tenant Two publisher user
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantTwoPublisherUserOne);
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("4000");
        //Goto the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Handle server selection
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        caller.pause("3000");
        //Login To API Store
        caller.click("APIStoreHome.lnk_login");
        caller.pause("1000");
        if(param_domain.equals("TenantOne")){
        caller.type("APIStoreHome.tf_username",TenantOneStoreUserOne);
        caller.type("APIStoreHome.tf_password",TenantOneStoreUserOnePassword);
        } else {
        caller.type("APIStoreHome.tf_username",AdminStoreUserOne);
        caller.type("APIStoreHome.tf_password",AdminStoreUserOnePassword);
        caller.pause("2000");
        }
        caller.click("APIStoreHome.btn_login");
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("3000");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("200");
        //wait for content load
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.click("APIStoreDocumentation.lnk_SupportForum");
        //Check the added document
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + DocNameFour,false,"");
        caller.pause("3000");
        caller.checkElementPresent("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocNameFour + "_PARAM," + "param_URLLink_PARAM:" + param_sourceUrl,false,"");
        caller.pause("3000");
        caller.checkElementPresent("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocNameFour + "_PARAM," + "param_URLLink_PARAM:" + param_sourceUrl,false,"");
        caller.pause("4000");
        caller.click("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocNameFour + "_PARAM," + "param_URLLink_PARAM:" + param_sourceUrl);
        caller.pause("4000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("4000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("3000");
        //Logout from the store
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOneStoreUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminStoreUserOne);
        }
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("4000");
        //Check for another tenant
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantTwo);
        lib_Common.bc_APIStoreLogin(caller, TenantTwoStoreUserOne,TenantTwoStoreUserOnePassword);
        caller.checkElementPresent("APIStoreHome.lnk_PublicApiStore",false,"");
        caller.click("APIStoreHome.lnk_PublicApiStore");
        caller.pause("2000");
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.ele_lblNoMatchingAPI",false,"");
        //Logout the user of another Tenant
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantTwoStoreUserOne);
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("3000");
        //Adding other type document
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Login using publisher user one
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserOnePassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserOnePassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameFive = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameFive);
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.rdo_Other",false,"");
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_Other");
        String varOtherTypeText = "param_OthertypeText"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_Other",varOtherTypeText);
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_Inline");
        caller.pause("3000");
        caller.select("Browse_Doc.ele_ddVisibility",param_SameApiVisibility);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.ele_lblOther","param_docName_PARAM:" + DocNameFive,false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocNameFive);
        caller.pause("3000");
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("2000");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + APIVersion,false,"");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.checkElementPresent("Browse_Doc.ele_lblOther","param_docName_PARAM:" + DocNameFive,false,"");
        //Logout first Publisher user
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserOne);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("2000");
        //login using second publisher user with same tenant
        //Confirm the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserTwoPassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserTwoPassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        //Waiting for content to load
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Checking for added document
        caller.checkElementPresent("Browse_Doc.ele_lblOther","param_docName_PARAM:" + DocNameFive,false,"");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocNameFive);
        caller.pause("3000");
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("2000");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + APIVersion,false,"");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.checkElementPresent("Browse_Doc.ele_lblOther","param_docName_PARAM:" + DocNameFive,false,"");
        //Logout the Tenant one Publisher user two or Admin publisher user two
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserTwo);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserTwo);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("4000");
        //Check Using another tenant's publisher user
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        caller.type("APIPublisherLogin.tf_UserName",TenantTwoPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantTwoPublisherUserOnePassword);
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        //Search for the API
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("300");
        //Verify the API does not exit for this User
        if(caller.checkElementPresent("APIPublisherHome.ele_lblNoAPICreated")){
        caller.writeToReport("API Verification successfull");
        } else {
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblNoMachingAPI",false,"");
        caller.writeToReport("API Verification successfull");
        }
        //Logout Tenant Two publisher user
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantTwoPublisherUserOne);
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("4000");
        //Goto the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Handle server selection
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        caller.pause("3000");
        //Login To API Store
        caller.click("APIStoreHome.lnk_login");
        caller.pause("1000");
        if(param_domain.equals("TenantOne")){
        caller.type("APIStoreHome.tf_username",TenantOneStoreUserOne);
        caller.type("APIStoreHome.tf_password",TenantOneStoreUserOnePassword);
        } else {
        caller.type("APIStoreHome.tf_username",AdminStoreUserOne);
        caller.type("APIStoreHome.tf_password",AdminStoreUserOnePassword);
        caller.pause("2000");
        }
        caller.click("APIStoreHome.btn_login");
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("3000");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("200");
        //wait for content load
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.click("APIStoreDocumentation.lnk_Other");
        caller.pause("2000");
        //Check the added document
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + DocNameFive,false,"");
        caller.pause("2000");
        caller.checkElementPresent("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + DocNameFive,false,"");
        caller.click("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + DocNameFive);
        caller.pause("6000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("5000");
        caller.checkElementPresent("APIStoreDocumentation.ele_txtContent","param_docName_PARAM:" + DocNameFive,false,"");
        caller.pause("5000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("5000");
        //Logout from the store
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOneStoreUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminStoreUserOne);
        }
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("4000");
        //Check for another tenant
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantTwo);
        lib_Common.bc_APIStoreLogin(caller, TenantTwoStoreUserOne,TenantTwoStoreUserOnePassword);
        caller.checkElementPresent("APIStoreHome.lnk_PublicApiStore",false,"");
        caller.click("APIStoreHome.lnk_PublicApiStore");
        caller.pause("2000");
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.ele_lblNoMatchingAPI",false,"");
        //Logout the user of another Tenant
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantTwoStoreUserOne);
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("3000");
        caller.writeToReport("End Of  Executing APIM-108");	
    }
    /**
     *  Business component APIM_109.
     */
    public final static void APIM_109(final SeleniumTestBase caller, final String param_publisherURL, final String param_ApiVisibility, final String param_SameApiVisibility, final String param_storeURL, final String param_domain, final String param_docName, final String param_fileToUpload, final String param_downImage, final String param_DownloadFilePath, final String param_sourceUrl, final String param_OthertypeText) throws Exception {
        //Check doc visibility when it's given same as api visibility; api visibility = restricted by role
        caller.writeToReport("Start  Executing APIM-109");
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("3000");
        //Retrieving Teant users
        String TenantOnePublisherUserOne = caller.retrieveString("keyTenantOnePublisherUserOne");
        String TenantOnePublisherUserOnePassword = caller.retrieveString("keyTenantOnePublisherOnePassword");
        String TenantOnePublisherUserTwo = caller.retrieveString("keyTenantOnePublisherUserTwo");
        String TenantOnePublisherUserTwoPassword = caller.retrieveString("keyTenantOnePublisherTwoPassword");
        String TenantTwoPublisherUserOne = caller.retrieveString("keyTenantTwoPublisherUserOne");
        String TenantTwoPublisherUserOnePassword = caller.retrieveString("keyTenantTwoPublisherOnePassword");
        String TenantOneStoreUserOne = caller.retrieveString("keyTenantOneStoreUserOne");
        String TenantOneStoreUserOnePassword = caller.retrieveString("keyTenantOneStoreUserOnePassword");
        String TenantOneStoreUserTwo = caller.retrieveString("keyTenantOneStoreUserTwo");
        String TenantOneStoreUserTwoPassword = caller.retrieveString("keyTenantOneStoreUserTwoPassword");
        String TenantTwoStoreUserOne = caller.retrieveString("keyTenantTwoStoreUserOne");
        String TenantTwoStoreUserOnePassword = caller.retrieveString("keyTenantTwoStoreUserOnePassword");
        //Retriving Roles
        String PublisherRoleForNonRestrict = caller.retrieveString("KeyVisibilityRole");
        String AdminRoleForNonRestrict = caller.retrieveString("KeyVisibilityRoleAdmin");
        //Retrieving admin users
        String AdminPublisherUserOne = caller.retrieveString("keyAdminPublisherUserOne");
        String AdminPublisherUserOnePassword = caller.retrieveString("keyAdminPublisherUserOnePassword");
        String AdminPublisherUserTwo = caller.retrieveString("keyAdminPublisherUserTwo");
        String AdminPublisherUserTwoPassword = caller.retrieveString("keyAdminPublisherUserTwoPassword");
        String AdminStoreUserOne = caller.retrieveString("keyAdminStoreUserOne");
        String AdminStoreUserOnePassword = caller.retrieveString("keyAdminStoreUserOnePassword");
        String AdminStoreUserTwo = caller.retrieveString("keyAdminStoreUserTwo");
        String AdminStoreUserTwoPassword = caller.retrieveString("keyAdminStoreUserTwoPassword");
        //Retriving Server names
        String var_TenantOne = caller.retrieveString("keyServerNameOne");
        String var_TenantTwo = caller.retrieveString("keyServerNameTwo");
        String var_carbonSuper = caller.retrieveString("keyServerNameCarbonSuper");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Login using publisher user one
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserOnePassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserOnePassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        caller.pause("3000");
        //Ckeck the APIName
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("300");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        //Click on API Name
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        //Edit the Visibility type to Visible to my domain in API
        caller.checkElementPresent("APIPublisherBrowse.lnk_Edit",false,"");
        caller.pause("3000");
        caller.click("APIPublisherBrowse.lnk_Edit");
        caller.pause("3000");
        //Select Visibility Level
        caller.select("APIPublisherBrowse.ele_ddVisibility",param_ApiVisibility);
        caller.pause("3000");
        //Adding a visibility role
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherBrowse.tf_VisibilityToRole",PublisherRoleForNonRestrict);
        } else {
        caller.type("APIPublisherBrowse.tf_VisibilityToRole",AdminRoleForNonRestrict);
        }
        caller.pause("3000");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_Save");
        caller.pause("3000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        //Wait for content load
        caller.pause("3000");
        //check the visibility of ad new document feilds
        caller.checkElementPresent("Browse_Doc.tf_DocName",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        caller.checkElementPresent("Browse_Doc.tf_Summary",false,"");
        caller.checkElementPresent("Browse_Doc.ele_ddVisibility",false,"");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Adding new document
        caller.click("Browse_Doc.btn_AddNewDocument");
        //Wait for content load
        caller.pause("1000");
        //check the visibility of ad new document feilds
        caller.checkElementPresent("Browse_Doc.tf_DocName",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        caller.checkElementPresent("Browse_Doc.tf_Summary",false,"");
        caller.checkElementPresent("Browse_Doc.ele_ddVisibility",false,"");
        caller.pause("3000");
        //Generate Doc Name
        String DocName = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocName);
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_HowTo");
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_Inline");
        caller.pause("2000");
        caller.select("Browse_Doc.ele_ddVisibility",param_SameApiVisibility);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        //Check the added document
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocName,false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocName);
        caller.pause("3000");
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("2000");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + APIVersion,false,"");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("3000");
        //Check the added document
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocName,false,"");
        caller.pause("3000");
        //Logout the Tenant one Publisher user one or Admin publisher user one
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserOne);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        //Login using Another publisher user in same tenant
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserTwoPassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserTwoPassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        //Search for the API
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("300");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.lnk_Doc");
        //Checking for added document
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocName,false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocName);
        caller.pause("3000");
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("2000");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + APIVersion,false,"");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocName,false,"");
        caller.pause("3000");
        //Logout the Tenant one Publisher user two or Admin publisher user two
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserTwo);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserTwo);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("4000");
        //Check Using another tenant's publisher user
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        caller.type("APIPublisherLogin.tf_UserName",TenantTwoPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantTwoPublisherUserOnePassword);
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        //Search for the API
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("300");
        //Verify the API does not exit for this User
        if(caller.checkElementPresent("APIPublisherHome.ele_lblNoAPICreated")){
        caller.writeToReport("API Verification successfull");
        } else {
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblNoMachingAPI",false,"");
        caller.writeToReport("API Verification successfull");
        }
        //Logout Tenant Two publisher user
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantTwoPublisherUserOne);
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("4000");
        //Goto the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Handle server selection
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        caller.pause("3000");
        //Login To API Store using visible role
        caller.click("APIStoreHome.lnk_login");
        caller.pause("1000");
        if(param_domain.equals("TenantOne")){
        caller.type("APIStoreHome.tf_username",TenantOneStoreUserOne);
        caller.type("APIStoreHome.tf_password",TenantOneStoreUserOnePassword);
        } else {
        caller.type("APIStoreHome.tf_username",AdminStoreUserOne);
        caller.type("APIStoreHome.tf_password",AdminStoreUserOnePassword);
        caller.pause("2000");
        }
        caller.click("APIStoreHome.btn_login");
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("3000");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("200");
        //wait for content load
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_HowTo");
        //Check the added document
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + DocName,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + DocName,false,"");
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + DocName);
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("5000");
        caller.checkElementPresent("APIStoreDocumentation.ele_txtContent","param_docName_PARAM:" + DocName,false,"");
        caller.pause("5000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        //Logout from the store
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOneStoreUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminStoreUserOne);
        }
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("4000");
        //Check for API using another user in same tenant
        caller.click("APIStoreHome.lnk_login");
        caller.pause("1000");
        if(param_domain.equals("TenantOne")){
        caller.type("APIStoreHome.tf_username",TenantOneStoreUserTwo);
        caller.type("APIStoreHome.tf_password",TenantOneStoreUserTwoPassword);
        } else {
        caller.type("APIStoreHome.tf_username",AdminStoreUserTwo);
        caller.type("APIStoreHome.tf_password",AdminStoreUserTwoPassword);
        caller.pause("2000");
        }
        caller.click("APIStoreHome.btn_login");
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("3000");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("200");
        //wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.ele_lblNoMatchingAPI",false,"");
        //Logout from the store
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOneStoreUserTwo);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminStoreUserTwo);
        }
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("4000");
        //Check for the document using another Tenant
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantTwo);
        lib_Common.bc_APIStoreLogin(caller, TenantTwoStoreUserOne,TenantTwoStoreUserOnePassword);
        caller.checkElementPresent("APIStoreHome.lnk_PublicApiStore",false,"");
        caller.click("APIStoreHome.lnk_PublicApiStore");
        caller.pause("2000");
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.ele_lblNoMatchingAPI",false,"");
        //Logout the user of another Tenant
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantTwoStoreUserOne);
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("3000");
        //^^^^^^^^^^^^^^^^^^
        //Adding sample & SDK document
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Login using publisher user one
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserOnePassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserOnePassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameTwo = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameTwo);
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_SampleAndSDK");
        caller.pause("5000");
        caller.click("Browse_Doc.rdo_File");
        caller.pause("3000");
        //Type valid file path
         java.io.File fileTwo = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator + param_fileToUpload);
        String entirePathTwo = fileTwo.getAbsolutePath();
        caller.type("Browse_Doc.tf_BrowseFile",entirePathTwo);
        caller.pause("3000");
        caller.select("Browse_Doc.ele_ddVisibility",param_SameApiVisibility);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        //Check the added document
        caller.checkElementPresent("Browse_Doc.ele_lblSamples","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.lnk_open","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.click("Browse_Doc.lnk_open","param_docName_PARAM:" + DocNameTwo);
        caller.pause("2000");
        //Handling popup for fire fox browser
        String downImagePopup1 = param_downImage;
        if(caller.checkImagePresent(downImagePopup1,false)){
        caller.fireEvent("KEY%key=alt+s","2000");
        caller.fireEvent("KEY%key=alt+a","2000");
        caller.fireEvent("KEY%key=\n","1000");
        }
        //Check downloaded file
        caller.checkFileInfo(param_DownloadFilePath,"EXIST",false,"");
        //Logout first Publisher user
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserOne);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("2000");
        //login using second publisher user with same tenant
        //Confirm the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserTwoPassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserTwoPassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        //Waiting for content to load
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Checking for added document
        caller.checkElementPresent("Browse_Doc.ele_lblSamples","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.lnk_open","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.lnk_open","param_docName_PARAM:" + DocNameTwo);
        caller.pause("6000");
        //Handle popup for download
        String downImagePopup12 = param_downImage;
        if(caller.checkImagePresent(downImagePopup12,false)){
        caller.fireEvent("KEY%key=alt+s","2000");
        caller.fireEvent("KEY%key=alt+a","2000");
        caller.fireEvent("KEY%key=\n","1000");
        }
        //Check the downloaded file
        caller.checkFileInfo(param_DownloadFilePath,"EXIST",false,"");
        //Logout the Tenant one Publisher user two or Admin publisher user two
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserTwo);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserTwo);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("4000");
        //Check Using another tenant's publisher user
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        caller.type("APIPublisherLogin.tf_UserName",TenantTwoPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantTwoPublisherUserOnePassword);
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        //Search for the API
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("300");
        //Verify the API does not exit for this User
        if(caller.checkElementPresent("APIPublisherHome.ele_lblNoAPICreated")){
        caller.writeToReport("API Verification successfull");
        } else {
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblNoMachingAPI",false,"");
        caller.writeToReport("API Verification successfull");
        }
        //Logout Tenant Two publisher user
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantTwoPublisherUserOne);
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("4000");
        //Goto the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Handle server selection
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        caller.pause("3000");
        //Login To API Store
        caller.click("APIStoreHome.lnk_login");
        caller.pause("1000");
        if(param_domain.equals("TenantOne")){
        caller.type("APIStoreHome.tf_username",TenantOneStoreUserOne);
        caller.type("APIStoreHome.tf_password",TenantOneStoreUserOnePassword);
        } else {
        caller.type("APIStoreHome.tf_username",AdminStoreUserOne);
        caller.type("APIStoreHome.tf_password",AdminStoreUserOnePassword);
        caller.pause("2000");
        }
        caller.click("APIStoreHome.btn_login");
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("3000");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("200");
        //wait for content load
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.click("APIStoreDocumentation.lnk_Samples");
        //Checking for added document
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_Download","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_Download","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.click("APIStoreDocumentation.lnk_Download","param_docName_PARAM:" + DocNameTwo);
        caller.checkFileInfo(param_DownloadFilePath,"EXIST",false,"");
        //Logout from the store
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOneStoreUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminStoreUserOne);
        }
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("4000");
        //Check for API using another user in same tenant
        caller.click("APIStoreHome.lnk_login");
        caller.pause("1000");
        if(param_domain.equals("TenantOne")){
        caller.type("APIStoreHome.tf_username",TenantOneStoreUserTwo);
        caller.type("APIStoreHome.tf_password",TenantOneStoreUserTwoPassword);
        } else {
        caller.type("APIStoreHome.tf_username",AdminStoreUserTwo);
        caller.type("APIStoreHome.tf_password",AdminStoreUserTwoPassword);
        caller.pause("2000");
        }
        caller.click("APIStoreHome.btn_login");
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("3000");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("200");
        //wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.ele_lblNoMatchingAPI",false,"");
        //Logout from the store
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOneStoreUserTwo);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminStoreUserTwo);
        }
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("4000");
        //Check for the document using another Tenant
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantTwo);
        lib_Common.bc_APIStoreLogin(caller, TenantTwoStoreUserOne,TenantTwoStoreUserOnePassword);
        caller.checkElementPresent("APIStoreHome.lnk_PublicApiStore",false,"");
        caller.click("APIStoreHome.lnk_PublicApiStore");
        caller.pause("2000");
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.ele_lblNoMatchingAPI",false,"");
        //Logout the user of another Tenant
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantTwoStoreUserOne);
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("3000");
        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        //Adding public forum document
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Login using publisher user one
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserOnePassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserOnePassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameThree = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameThree);
        caller.pause("3000");
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.rdo_PublicForum",false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_PublicForum");
        caller.pause("1000");
        caller.type("Browse_Doc.tf_URL",param_sourceUrl);
        caller.pause("3000");
        caller.select("Browse_Doc.ele_ddVisibility",param_SameApiVisibility);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        //Check the added document
        caller.checkElementPresent("Browse_Doc.ele_lblPublicForum","param_docName_PARAM:" + DocNameThree,false,"");
        caller.pause("3000");
        caller.pause("3000");
        caller.click("Browse_Doc.lnk_view","param_docName_PARAM:" + DocNameThree);
        //wait for load
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("3000");
        //Logout first Publisher user
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserOne);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("2000");
        //login using second publisher user with same tenant
        //Confirm the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserTwoPassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserTwoPassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        //Waiting for content to load
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Checking for added document
        caller.checkElementPresent("Browse_Doc.ele_lblPublicForum","param_docName_PARAM:" + DocNameThree,false,"");
        caller.click("Browse_Doc.lnk_view","param_docName_PARAM:" + DocNameThree);
        //wait
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        //Logout the Tenant one Publisher user two or Admin publisher user two
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserTwo);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserTwo);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("4000");
        //Check Using another tenant's publisher user
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        caller.type("APIPublisherLogin.tf_UserName",TenantTwoPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantTwoPublisherUserOnePassword);
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        //Search for the API
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("300");
        //Verify the API does not exit for this User
        if(caller.checkElementPresent("APIPublisherHome.ele_lblNoAPICreated")){
        caller.writeToReport("API Verification successfull");
        } else {
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblNoMachingAPI",false,"");
        caller.writeToReport("API Verification successfull");
        }
        //Logout Tenant Two publisher user
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantTwoPublisherUserOne);
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("4000");
        //Goto the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Handle server selection
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        caller.pause("3000");
        //Login To API Store
        caller.click("APIStoreHome.lnk_login");
        caller.pause("1000");
        if(param_domain.equals("TenantOne")){
        caller.type("APIStoreHome.tf_username",TenantOneStoreUserOne);
        caller.type("APIStoreHome.tf_password",TenantOneStoreUserOnePassword);
        } else {
        caller.type("APIStoreHome.tf_username",AdminStoreUserOne);
        caller.type("APIStoreHome.tf_password",AdminStoreUserOnePassword);
        caller.pause("2000");
        }
        caller.click("APIStoreHome.btn_login");
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("3000");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("200");
        //wait for content load
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.click("APIStoreDocumentation.lnk_PublicForum");
        //Check the added document
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + DocNameThree,false,"");
        caller.pause("3000");
        caller.checkElementPresent("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocNameThree + "_PARAM," + "param_URLLink_PARAM:" + param_sourceUrl,false,"");
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocNameThree + "_PARAM," + "param_URLLink_PARAM:" + param_sourceUrl);
        caller.pause("6000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("4000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("3000");
        //Logout from the store
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOneStoreUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminStoreUserOne);
        }
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("4000");
        //Check for API using another user in same tenant
        caller.click("APIStoreHome.lnk_login");
        caller.pause("1000");
        if(param_domain.equals("TenantOne")){
        caller.type("APIStoreHome.tf_username",TenantOneStoreUserTwo);
        caller.type("APIStoreHome.tf_password",TenantOneStoreUserTwoPassword);
        } else {
        caller.type("APIStoreHome.tf_username",AdminStoreUserTwo);
        caller.type("APIStoreHome.tf_password",AdminStoreUserTwoPassword);
        caller.pause("2000");
        }
        caller.click("APIStoreHome.btn_login");
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("3000");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("200");
        //wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.ele_lblNoMatchingAPI",false,"");
        //Logout from the store
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOneStoreUserTwo);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminStoreUserTwo);
        }
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("4000");
        //Check for the document using another Tenant
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantTwo);
        lib_Common.bc_APIStoreLogin(caller, TenantTwoStoreUserOne,TenantTwoStoreUserOnePassword);
        caller.checkElementPresent("APIStoreHome.lnk_PublicApiStore",false,"");
        caller.click("APIStoreHome.lnk_PublicApiStore");
        caller.pause("2000");
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.ele_lblNoMatchingAPI",false,"");
        //Logout the user of another Tenant
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantTwoStoreUserOne);
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("3000");
        //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        //Adding support forum document type
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Login using publisher user one
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserOnePassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserOnePassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameFour = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameFour);
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.rdo_SupportForum",false,"");
        caller.click("Browse_Doc.rdo_SupportForum");
        caller.pause("1000");
        caller.type("Browse_Doc.tf_URL",param_sourceUrl);
        caller.pause("3000");
        caller.select("Browse_Doc.ele_ddVisibility",param_SameApiVisibility);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        //Check the added document
        caller.checkElementPresent("Browse_Doc.ele_lblSupportForum","param_docName_PARAM:" + DocNameFour,false,"");
        caller.pause("3000");
        //Logout first Publisher user
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserOne);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("2000");
        //login using second publisher user with same tenant
        //Confirm the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserTwoPassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserTwoPassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        //Waiting for content to load
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Checking for added document
        caller.checkElementPresent("Browse_Doc.ele_lblSupportForum","param_docName_PARAM:" + DocNameFour,false,"");
        caller.click("Browse_Doc.lnk_view","param_docName_PARAM:" + DocNameFour);
        //wait
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        //Logout the Tenant one Publisher user two or Admin publisher user two
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserTwo);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserTwo);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("4000");
        //Check Using another tenant's publisher user
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        caller.type("APIPublisherLogin.tf_UserName",TenantTwoPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantTwoPublisherUserOnePassword);
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        //Search for the API
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("300");
        //Verify the API does not exit for this User
        if(caller.checkElementPresent("APIPublisherHome.ele_lblNoAPICreated")){
        caller.writeToReport("API Verification successfull");
        } else {
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblNoMachingAPI",false,"");
        caller.writeToReport("API Verification successfull");
        }
        //Logout Tenant Two publisher user
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantTwoPublisherUserOne);
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("4000");
        //Goto the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Handle server selection
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        caller.pause("3000");
        //Login To API Store
        caller.click("APIStoreHome.lnk_login");
        caller.pause("1000");
        if(param_domain.equals("TenantOne")){
        caller.type("APIStoreHome.tf_username",TenantOneStoreUserOne);
        caller.type("APIStoreHome.tf_password",TenantOneStoreUserOnePassword);
        } else {
        caller.type("APIStoreHome.tf_username",AdminStoreUserOne);
        caller.type("APIStoreHome.tf_password",AdminStoreUserOnePassword);
        caller.pause("2000");
        }
        caller.click("APIStoreHome.btn_login");
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("3000");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("200");
        //wait for content load
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.click("APIStoreDocumentation.lnk_SupportForum");
        //Check the added document
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + DocNameFour,false,"");
        caller.pause("3000");
        caller.checkElementPresent("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocNameFour + "_PARAM," + "param_URLLink_PARAM:" + param_sourceUrl,false,"");
        caller.pause("3000");
        caller.checkElementPresent("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocNameFour + "_PARAM," + "param_URLLink_PARAM:" + param_sourceUrl,false,"");
        caller.pause("4000");
        caller.click("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocNameFour + "_PARAM," + "param_URLLink_PARAM:" + param_sourceUrl);
        caller.pause("4000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("4000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("3000");
        //Logout from the store
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOneStoreUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminStoreUserOne);
        }
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("4000");
        //Check for API using another user in same tenant
        caller.click("APIStoreHome.lnk_login");
        caller.pause("1000");
        if(param_domain.equals("TenantOne")){
        caller.type("APIStoreHome.tf_username",TenantOneStoreUserTwo);
        caller.type("APIStoreHome.tf_password",TenantOneStoreUserTwoPassword);
        } else {
        caller.type("APIStoreHome.tf_username",AdminStoreUserTwo);
        caller.type("APIStoreHome.tf_password",AdminStoreUserTwoPassword);
        caller.pause("2000");
        }
        caller.click("APIStoreHome.btn_login");
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("3000");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("200");
        //wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.ele_lblNoMatchingAPI",false,"");
        //Logout from the store
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOneStoreUserTwo);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminStoreUserTwo);
        }
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("4000");
        //Check for the document using another Tenant
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantTwo);
        lib_Common.bc_APIStoreLogin(caller, TenantTwoStoreUserOne,TenantTwoStoreUserOnePassword);
        caller.checkElementPresent("APIStoreHome.lnk_PublicApiStore",false,"");
        caller.click("APIStoreHome.lnk_PublicApiStore");
        caller.pause("2000");
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.ele_lblNoMatchingAPI",false,"");
        //Logout the user of another Tenant
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantTwoStoreUserOne);
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("3000");
        //Adding other type document
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Login using publisher user one
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserOnePassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserOnePassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameFive = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameFive);
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.rdo_Other",false,"");
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_Other");
        String varOtherTypeText = "@param_OthertypeText"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_Other",varOtherTypeText);
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_Inline");
        caller.pause("3000");
        caller.select("Browse_Doc.ele_ddVisibility",param_SameApiVisibility);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.ele_lblOther","param_docName_PARAM:" + DocNameFive,false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocNameFive);
        caller.pause("3000");
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("2000");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + APIVersion,false,"");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.checkElementPresent("Browse_Doc.ele_lblOther","param_docName_PARAM:" + DocNameFive,false,"");
        //Logout first Publisher user
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserOne);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("2000");
        //login using second publisher user with same tenant
        //Confirm the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserTwoPassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserTwoPassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        //Waiting for content to load
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Checking for added document
        caller.checkElementPresent("Browse_Doc.ele_lblOther","param_docName_PARAM:" + DocNameFive,false,"");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocNameFive);
        caller.pause("3000");
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("2000");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + APIVersion,false,"");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.checkElementPresent("Browse_Doc.ele_lblOther","param_docName_PARAM:" + DocNameFive,false,"");
        //Logout the Tenant one Publisher user two or Admin publisher user two
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserTwo);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserTwo);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("4000");
        //Check Using another tenant's publisher user
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        caller.type("APIPublisherLogin.tf_UserName",TenantTwoPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantTwoPublisherUserOnePassword);
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        //Search for the API
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("300");
        //Verify the API does not exit for this User
        if(caller.checkElementPresent("APIPublisherHome.ele_lblNoAPICreated")){
        caller.writeToReport("API Verification successfull");
        } else {
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblNoMachingAPI",false,"");
        caller.writeToReport("API Verification successfull");
        }
        //Logout Tenant Two publisher user
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantTwoPublisherUserOne);
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("4000");
        //Goto the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Handle server selection
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        caller.pause("3000");
        //Login To API Store
        caller.click("APIStoreHome.lnk_login");
        caller.pause("1000");
        if(param_domain.equals("TenantOne")){
        caller.type("APIStoreHome.tf_username",TenantOneStoreUserOne);
        caller.type("APIStoreHome.tf_password",TenantOneStoreUserOnePassword);
        } else {
        caller.type("APIStoreHome.tf_username",AdminStoreUserOne);
        caller.type("APIStoreHome.tf_password",AdminStoreUserOnePassword);
        caller.pause("2000");
        }
        caller.click("APIStoreHome.btn_login");
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("3000");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("200");
        //wait for content load
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.click("APIStoreDocumentation.lnk_Other");
        caller.pause("2000");
        //Check the added document
        caller.checkElementPresent("APIStoreAPIs.ele_lblDocumentName","param_docName_PARAM:" + DocNameFive,false,"");
        caller.pause("2000");
        caller.checkElementPresent("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + DocNameFive,false,"");
        caller.click("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + DocNameFive);
        caller.pause("6000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("5000");
        caller.checkElementPresent("APIStoreDocumentation.ele_txtContent","param_docName_PARAM:" + DocNameFive,false,"");
        caller.pause("5000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("5000");
        //Logout from the store
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOneStoreUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminStoreUserOne);
        }
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("4000");
        //Check for API using another user in same tenant
        caller.click("APIStoreHome.lnk_login");
        caller.pause("1000");
        if(param_domain.equals("TenantOne")){
        caller.type("APIStoreHome.tf_username",TenantOneStoreUserTwo);
        caller.type("APIStoreHome.tf_password",TenantOneStoreUserTwoPassword);
        } else {
        caller.type("APIStoreHome.tf_username",AdminStoreUserTwo);
        caller.type("APIStoreHome.tf_password",AdminStoreUserTwoPassword);
        caller.pause("2000");
        }
        caller.click("APIStoreHome.btn_login");
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("3000");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("200");
        //wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.ele_lblNoMatchingAPI",false,"");
        //Logout from the store
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOneStoreUserTwo);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminStoreUserTwo);
        }
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("4000");
        //Check for the document using another Tenant
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantTwo);
        lib_Common.bc_APIStoreLogin(caller, TenantTwoStoreUserOne,TenantTwoStoreUserOnePassword);
        caller.checkElementPresent("APIStoreHome.lnk_PublicApiStore",false,"");
        caller.click("APIStoreHome.lnk_PublicApiStore");
        caller.pause("2000");
        if(param_domain.equals("TenantOne")){
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_TenantOne);
        } else {
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + var_carbonSuper);
        }
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.ele_lblNoMatchingAPI",false,"");
        //Logout the user of another Tenant
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantTwoStoreUserOne);
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("3000");
        caller.writeToReport("End of  Executing APIM-109");	
    }
    /**
     *  Business component APIM_110.
     */
    public final static void APIM_110(final SeleniumTestBase caller, final String param_publisherURL, final String param_storeURL, final String param_docVisibilityPrivate, final String param_docName, final String param_fileToUpload, final String param_downImage, final String param_DownloadFilePath, final String param_sourceUrl, final String param_OthertypeText, final String param_domain) throws Exception {
        //Check document visibility when it's given as private.
        caller.writeToReport("Start  Executing APIM-110");
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("3000");
        //Retrieving Teant users
        //Retrieve Tenant One publisher user One Details
        String TenantOnePublisherUserOne = caller.retrieveString("keyTenantOnePublisherUserOne");
        String TenantOnePublisherUserOnePassword = caller.retrieveString("keyTenantOnePublisherOnePassword");
        //Retrieving admin users
        String AdminPublisherUserOne = caller.retrieveString("keyAdminPublisherUserOne");
        String AdminPublisherUserOnePassword = caller.retrieveString("keyAdminPublisherUserOnePassword");
        //Retriving Server names
        String var_TenantOne = caller.retrieveString("keyServerNameOne");
        String var_TenantTwo = caller.retrieveString("keyServerNameTwo");
        String var_carbonSuper = caller.retrieveString("keyServerNameCarbonSuper");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Login using publisher user
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserOnePassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserOnePassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        caller.pause("3000");
        //Ckeck the APIName
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("300");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        //Wait for content load
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Adding new document
        caller.click("Browse_Doc.btn_AddNewDocument");
        //Wait for content load
        caller.pause("1000");
        //check the visibility of ad new document feilds
        caller.checkElementPresent("Browse_Doc.tf_DocName",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        caller.checkElementPresent("Browse_Doc.tf_Summary",false,"");
        caller.checkElementPresent("Browse_Doc.ele_ddVisibility",false,"");
        caller.pause("3000");
        //Generate Doc Name
        String DocName = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocName);
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_HowTo");
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_Inline");
        caller.pause("2000");
        caller.select("Browse_Doc.ele_ddVisibility",param_docVisibilityPrivate);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        //Check the added document
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocName,false,"");
        caller.pause("3000");
        //Click on Edit content link
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocName);
        caller.pause("3000");
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("2000");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + APIVersion,false,"");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("3000");
        //Check the added document
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocName,false,"");
        caller.pause("3000");
        //Logout the Tenant  Publisher user  or Admin publisher user
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserOne);
        }
        //Click logout button
        caller.pause("3000");
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("3000");
        //Adding sample & SDK document
        //Navigae to the publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Login using publisher user or admin user
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserOnePassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserOnePassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameTwo = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameTwo);
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_SampleAndSDK");
        caller.pause("5000");
        caller.click("Browse_Doc.rdo_File");
        caller.pause("3000");
        //Type valid file path
         java.io.File file = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator + param_fileToUpload);
        String entirePath = file.getAbsolutePath();
        caller.type("Browse_Doc.tf_BrowseFile",entirePath);
        caller.pause("3000");
        caller.select("Browse_Doc.ele_ddVisibility",param_docVisibilityPrivate);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        //Check the added document
        caller.checkElementPresent("Browse_Doc.ele_lblSamples","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.lnk_open","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.click("Browse_Doc.lnk_open","param_docName_PARAM:" + DocNameTwo);
        caller.pause("2000");
        //Handling popup for fire fox browser
        String downImagePopup1 = param_downImage;
        if(caller.checkImagePresent(downImagePopup1,false)){
        caller.fireEvent("KEY%key=alt+s","2000");
        caller.fireEvent("KEY%key=alt+a","2000");
        caller.fireEvent("KEY%key=\n","1000");
        }
        //Check downloaded file
        caller.checkFileInfo(param_DownloadFilePath,"EXIST",false,"");
        //Logout first Publisher user
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserOne);
        }
        //Click logout button
        caller.pause("3000");
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("2000");
        //Adding public forum document
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Login using publisher user one
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserOnePassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserOnePassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameThree = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameThree);
        caller.pause("3000");
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.rdo_PublicForum",false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_PublicForum");
        caller.pause("1000");
        caller.type("Browse_Doc.tf_URL",param_sourceUrl);
        caller.pause("3000");
        caller.select("Browse_Doc.ele_ddVisibility",param_docVisibilityPrivate);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        //Check the added document
        caller.checkElementPresent("Browse_Doc.ele_lblPublicForum","param_docName_PARAM:" + DocNameThree,false,"");
        caller.pause("3000");
        caller.pause("3000");
        caller.click("Browse_Doc.lnk_view","param_docName_PARAM:" + DocNameThree);
        //wait for load
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("3000");
        //Logout  Publisher user or admin user
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserOne);
        }
        //Click logout button
        caller.pause("3000");
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("2000");
        //Adding support forum document type
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Login using publisher user one
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserOnePassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserOnePassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameFour = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameFour);
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.rdo_SupportForum",false,"");
        caller.click("Browse_Doc.rdo_SupportForum");
        caller.pause("1000");
        caller.type("Browse_Doc.tf_URL",param_sourceUrl);
        caller.pause("3000");
        caller.select("Browse_Doc.ele_ddVisibility",param_docVisibilityPrivate);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        //Check the added document
        caller.checkElementPresent("Browse_Doc.ele_lblSupportForum","param_docName_PARAM:" + DocNameFour,false,"");
        caller.pause("3000");
        //Logout first Publisher user
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserOne);
        }
        //Click logout button
        caller.pause("3000");
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("2000");
        //Adding other type document
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Login using publisher user one
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserOnePassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserOnePassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameFive = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameFive);
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.rdo_Other",false,"");
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_Other");
        String varOtherTypeText = "@param_OthertypeText"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_Other",varOtherTypeText);
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_Inline");
        caller.pause("3000");
        caller.select("Browse_Doc.ele_ddVisibility",param_docVisibilityPrivate);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.ele_lblOther","param_docName_PARAM:" + DocNameFive,false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocNameFive);
        caller.pause("3000");
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("2000");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + APIVersion,false,"");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.checkElementPresent("Browse_Doc.ele_lblOther","param_docName_PARAM:" + DocNameFive,false,"");
        //Logout first Publisher user
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserOne);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("2000");
        caller.writeToReport("End of  Executing APIM-110");	
    }
    /**
     *  Business component APIM_111.
     */
    public final static void APIM_111(final SeleniumTestBase caller, final String param_storeURL, final String param_publisherURL, final String param_docVisibilityVisibleToMyDomain, final String param_fileToUpload, final String param_docName, final String param_downImage, final String param_DownloadFilePath, final String param_sourceUrl, final String param_OthertypeText, final String param_domain) throws Exception {
        //APIM-111: Check document visibility when it's given as 'Visible to my domain'.
        caller.writeToReport("Start  Executing APIM-111");
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("3000");
        //Retrieving Teant users
        String TenantOnePublisherUserOne = caller.retrieveString("keyTenantOnePublisherUserOne");
        String TenantOnePublisherUserOnePassword = caller.retrieveString("keyTenantOnePublisherOnePassword");
        String TenantOnePublisherUserTwo = caller.retrieveString("keyTenantOnePublisherUserTwo");
        String TenantOnePublisherUserTwoPassword = caller.retrieveString("keyTenantOnePublisherTwoPassword");
        //Retrieving admin users
        String AdminPublisherUserOne = caller.retrieveString("keyAdminPublisherUserOne");
        String AdminPublisherUserOnePassword = caller.retrieveString("keyAdminPublisherUserOnePassword");
        String AdminPublisherUserTwo = caller.retrieveString("keyAdminPublisherUserTwo");
        String AdminPublisherUserTwoPassword = caller.retrieveString("keyAdminPublisherUserTwoPassword");
        //Retriving Server names
        String var_TenantOne = caller.retrieveString("keyServerNameOne");
        String var_TenantTwo = caller.retrieveString("keyServerNameTwo");
        String var_carbonSuper = caller.retrieveString("keyServerNameCarbonSuper");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Login using publisher user
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserOnePassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserOnePassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        caller.pause("3000");
        //Ckeck the APIName
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("300");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        //Wait for content load
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Adding new document
        caller.click("Browse_Doc.btn_AddNewDocument");
        //Wait for content load
        caller.pause("1000");
        //check the visibility of ad new document feilds
        caller.checkElementPresent("Browse_Doc.tf_DocName",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        caller.checkElementPresent("Browse_Doc.tf_Summary",false,"");
        caller.checkElementPresent("Browse_Doc.ele_ddVisibility",false,"");
        caller.pause("3000");
        //Generate Doc Name
        String DocName = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocName);
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_HowTo");
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_Inline");
        caller.pause("2000");
        caller.select("Browse_Doc.ele_ddVisibility",param_docVisibilityVisibleToMyDomain);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        //Check the added document
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocName,false,"");
        caller.pause("3000");
        //Click on Edit content link
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocName);
        caller.pause("3000");
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("2000");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + APIVersion,false,"");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("3000");
        //Check the added document
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocName,false,"");
        caller.pause("3000");
        //Logout the Tenant  Publisher user  or Admin publisher user
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserOne);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        //Login using Another publisher user in same tenant
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserTwoPassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserTwoPassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        //Search for the API
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("300");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.lnk_Doc");
        //Checking for added document
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocName,false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocName);
        caller.pause("3000");
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("2000");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + APIVersion,false,"");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocName,false,"");
        caller.pause("3000");
        //Logout the Tenant one Publisher user two or Admin publisher user two
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserTwo);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserTwo);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("4000");
        //Adding sample & SDK document
        //Navigae to the publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Login using publisher user or admin user
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserOnePassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserOnePassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameTwo = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameTwo);
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_SampleAndSDK");
        caller.pause("5000");
        caller.click("Browse_Doc.rdo_File");
        caller.pause("3000");
        //Type valid file path
         java.io.File file = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator + param_fileToUpload);
        String entirePath = file.getAbsolutePath();
        caller.type("Browse_Doc.tf_BrowseFile",entirePath);
        caller.pause("3000");
        caller.select("Browse_Doc.ele_ddVisibility",param_docVisibilityVisibleToMyDomain);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        //Check the added document
        caller.checkElementPresent("Browse_Doc.ele_lblSamples","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.lnk_open","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.click("Browse_Doc.lnk_open","param_docName_PARAM:" + DocNameTwo);
        caller.pause("2000");
        //Handling popup for fire fox browser
        String downImagePopup1 = param_downImage;
        if(caller.checkImagePresent(downImagePopup1,false)){
        caller.fireEvent("KEY%key=alt+s","2000");
        caller.fireEvent("KEY%key=alt+a","2000");
        caller.fireEvent("KEY%key=\n","1000");
        }
        //Check downloaded file
        caller.checkFileInfo(param_DownloadFilePath,"EXIST",false,"");
        //Logout first Publisher user
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserOne);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("2000");
        //login using second publisher user with same tenant
        //Confirm the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserTwoPassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserTwoPassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        //Waiting for content to load
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Checking for added document
        caller.checkElementPresent("Browse_Doc.ele_lblSamples","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.lnk_open","param_docName_PARAM:" + DocNameTwo,false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.lnk_open","param_docName_PARAM:" + DocNameTwo);
        caller.pause("6000");
        //Handle popup for download
        String downImagePopup12 = param_downImage;
        if(caller.checkImagePresent(downImagePopup12,false)){
        caller.fireEvent("KEY%key=alt+s","2000");
        caller.fireEvent("KEY%key=alt+a","2000");
        caller.fireEvent("KEY%key=\n","1000");
        }
        //Check the downloaded file
        caller.checkFileInfo(param_DownloadFilePath,"EXIST",false,"");
        //Logout the Tenant one Publisher user two or Admin publisher user two
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserTwo);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserTwo);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("4000");
        //Adding public forum document
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Login using publisher user one
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserOnePassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserOnePassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameThree = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameThree);
        caller.pause("3000");
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.rdo_PublicForum",false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_PublicForum");
        caller.pause("1000");
        caller.type("Browse_Doc.tf_URL",param_sourceUrl);
        caller.pause("3000");
        caller.select("Browse_Doc.ele_ddVisibility",param_docVisibilityVisibleToMyDomain);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        //Check the added document
        caller.checkElementPresent("Browse_Doc.ele_lblPublicForum","param_docName_PARAM:" + DocNameThree,false,"");
        caller.pause("3000");
        caller.pause("3000");
        caller.click("Browse_Doc.lnk_view","param_docName_PARAM:" + DocNameThree);
        //wait for load
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("3000");
        //Logout  Publisher user or admin user
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserOne);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("2000");
        //login using second publisher user with same tenant
        //Confirm the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserTwoPassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserTwoPassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        //Waiting for content to load
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Checking for added document
        caller.checkElementPresent("Browse_Doc.ele_lblPublicForum","param_docName_PARAM:" + DocNameThree,false,"");
        caller.click("Browse_Doc.lnk_view","param_docName_PARAM:" + DocNameThree);
        //wait
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        //Logout the Tenant one Publisher user two or Admin publisher user two
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserTwo);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserTwo);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("4000");
        //Adding support forum document type
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Login using publisher user one
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserOnePassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserOnePassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameFour = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameFour);
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.rdo_SupportForum",false,"");
        caller.click("Browse_Doc.rdo_SupportForum");
        caller.pause("1000");
        caller.type("Browse_Doc.tf_URL",param_sourceUrl);
        caller.pause("3000");
        caller.select("Browse_Doc.ele_ddVisibility",param_docVisibilityVisibleToMyDomain);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        //Check the added document
        caller.checkElementPresent("Browse_Doc.ele_lblSupportForum","param_docName_PARAM:" + DocNameFour,false,"");
        caller.pause("3000");
        //Logout first Publisher user
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserOne);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("2000");
        //login using second publisher user with same tenant
        //Confirm the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserTwoPassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserTwoPassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        //Waiting for content to load
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Checking for added document
        caller.checkElementPresent("Browse_Doc.ele_lblSupportForum","param_docName_PARAM:" + DocNameFour,false,"");
        caller.click("Browse_Doc.lnk_view","param_docName_PARAM:" + DocNameFour);
        //wait
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        //Logout the Tenant one Publisher user two or Admin publisher user two
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserTwo);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserTwo);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("4000");
        //Adding other type document
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        //Verify the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Login using publisher user one
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserOnePassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserOne);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserOnePassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameFive = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameFive);
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.rdo_Other",false,"");
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_Other");
        String varOtherTypeText = "@param_OthertypeText"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_Other",varOtherTypeText);
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_Inline");
        caller.pause("3000");
        caller.select("Browse_Doc.ele_ddVisibility",param_docVisibilityVisibleToMyDomain);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.ele_lblOther","param_docName_PARAM:" + DocNameFive,false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocNameFive);
        caller.pause("3000");
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("2000");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + APIVersion,false,"");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.checkElementPresent("Browse_Doc.ele_lblOther","param_docName_PARAM:" + DocNameFive,false,"");
        //Logout first Publisher user
        if(param_domain.equals("TenantOne")){
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + TenantOnePublisherUserOne);
        } else {
        caller.click("APIPublisherLogOut.btn_UserName","param_userName_PARAM:" + AdminPublisherUserOne);
        }
        //Click logout button
        caller.click("APIPublisherLogOut.btn_LogOut");
        caller.pause("2000");
        //login using second publisher user with same tenant
        //Confirm the login page
        caller.checkElementPresent("APIPublisherLogin.tf_UserName",false,"");
        //Type username
        if(param_domain.equals("TenantOne")){
        caller.type("APIPublisherLogin.tf_UserName",TenantOnePublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",TenantOnePublisherUserTwoPassword);
        } else {
        caller.type("APIPublisherLogin.tf_UserName",AdminPublisherUserTwo);
        //Type password
        caller.type("APIPublisherLogin.tf_PassWord",AdminPublisherUserTwoPassword);
        }
        //click login
        caller.click("APIPublisherLogin.btn_Login");
        //Waiting for content to load
        caller.pause("2000");
        //Waiting for content to load
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        //Checking for added document
        caller.checkElementPresent("Browse_Doc.ele_lblOther","param_docName_PARAM:" + DocNameFive,false,"");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocNameFive);
        caller.pause("3000");
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("2000");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + APIVersion,false,"");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.checkElementPresent("Browse_Doc.ele_lblOther","param_docName_PARAM:" + DocNameFive,false,"");
        caller.writeToReport("End of  Executing APIM-111");	
    }
    /**
     *  Business component APIM_362.
     */
    public final static void APIM_362(final SeleniumTestBase caller, final String param_publisherURL, final String param_APIName, final String param_storeURL, final String param_roleStore, final String param_tenantOrAdmin) throws Exception {
        caller.writeToReport("Start of executing APIM_362");
        //APIM-362: A user should be able to assign a scope to a subscribed application which the key is already generated and generate the token again for a scope
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"4000");
        //go to API
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("3000");
        //type API name
        String varAPIName = caller.retrieveString("keyAPIName");
        caller.type("APIPublisherHome.tf_APISearch",varAPIName);
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPIName);
        caller.click("APIPublisherBrowse.lnk_Edit");
        //waiting for content load
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_NextImplement");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_NextManage");
        //waiting for content load
        caller.pause("2000");
        //Add scope for particular role
        caller.click("Scopes.btn_AddScope");
        //waiting for content load
        caller.pause("2000");
        //Type API SCope
        String varScopeKeyThree = "ScopeKeyThree"+caller.generateData("String",3);
        caller.type("Scopes.tf_ScopeKey",varScopeKeyThree);
        //Type API SCope name
        String varScopeNameThree = "ScopeNameThree"+caller.generateData("String",3);
        caller.type("Scopes.tf_ScopeName",varScopeNameThree);
        caller.type("Scopes.tf_Role",param_roleStore);
        //waiting for content load
        caller.pause("3000");
        caller.click("Scopes.btn_SubmitScope");
        //waiting for content load
        caller.pause("3000");
        String varScopeKeyOne = caller.retrieveString("keyScopeKeyOne");
        caller.click("Scopes.ele_lblScopeKeyRight","ScopeKey_PARAM:" + varScopeKeyOne);
        caller.select("Scopes.ele_ddScope",varScopeNameThree);
        caller.click("Scopes.btn_Right");
        caller.click("APIPublisherBrowse.btn_SaveAndPublish");
        //waiting for content load
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_Close");
        //Navigate to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_tenantOrAdmin);
        //go to my subscription
        caller.click("APIStoreHome.lnk_MySubcription");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreMySubcription.lnk_ScopeProductionKey");
        //waiting for content load
        caller.pause("2000");
        //Select scopes
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreMySubcription.chk_KeyPopUpProduction","param_checkNoProduction_PARAM:1");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreMySubcription.btn_scopeSelectButtonPopUpProduction");
        //waiting for content load
        caller.pause("2000");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        //waiting for content load
        caller.pause("2000");
        //Retrive previous  generated Token
        String varAccssTokenGenProd = caller.retrieveString("keyAccssTokenGenProd");
        //Store Access token
        String varMultiScopeTokenReGenProd = caller.getStringProperty("APIStoreMySubcription.ele_lblAccessTokenProduction","TEXT:");
        //Verify access token is regenarated(acess token is different from previous)
        if(!(varAccssTokenGenProd.equals(varMultiScopeTokenReGenProd))){
        caller.writeToReport("Token is regenaerated");
        } else {
        caller.writeToReport("Token is not  regenaerated");
        }
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreMySubcription.lnk_ScopeSandBox");
        //waiting for content load
        caller.pause("2000");
        //Select scopes
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreMySubcription.chk_KeyPopUpSandbox","param_checkNoSandbox_PARAM:1");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreMySubcription.btn_scopeSelectButtonPopUpSandbox");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        //waiting for content load
        caller.pause("2000");
        //Retrive previous  generated Token
        String varAccssTokenGenSand = caller.retrieveString("keyAccssTokenGenSand");
        //Store Access token
        String varMultiScopeTokenReGenSand = caller.getStringProperty("APIStoreMySubcription.ele_lblAccessTokenProduction","TEXT:");
        //Verify access token is regenarated(acess token is different from previous)
        if(!(varAccssTokenGenSand.equals(varMultiScopeTokenReGenSand))){
        caller.writeToReport("Token is regenaerated");
        } else {
        caller.writeToReport("Token is not  regenaerated");
        }
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //waiting for content load
        caller.pause("2000");
        caller.writeToReport("End of executing APIM_362");	
    }
    /**
     *  Business component APIM_361.
     */
    public final static void APIM_361(final SeleniumTestBase caller, final String param_APIName, final String param_storeURL, final String param_verbMethodNamePost, final String param_publisherURL, final String param_roleStore, final String param_tenantOrAdmin) throws Exception {
        caller.writeToReport("Start of executing APIM_361");
        //APIM-361: A user should be able to assign multiple scopes to a subscribed application and generate token
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"4000");
        //go to API
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("3000");
        String varAPIName = caller.retrieveString("keyAPIName");
        caller.type("APIPublisherHome.tf_APISearch",varAPIName);
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPIName);
        caller.click("APIPublisherBrowse.lnk_Edit");
        //waiting for content load
        caller.pause("2000");
        //waiting for content load
        caller.pause("7000");
        caller.type("APIPublisherAdd.tf_URLPattern",param_APIName+"/"+caller.generateData("String",5));
        caller.click("APIPublisherAdd.chk_Post");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherAdd.btn_Add");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_NextImplement");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_NextManage");
        //waiting for content load
        caller.pause("2000");
        //Add scope for particular role
        caller.click("Scopes.btn_AddScope");
        //Type API SCope
        String varScopeKeyTwo = "ScopeKeyTwo"+caller.generateData("String",3);
        caller.type("Scopes.tf_ScopeKey",varScopeKeyTwo);
        //Type API SCope name
        String varScopeNameTwo = "ScopeNameTwo"+caller.generateData("String",3);
        caller.type("Scopes.tf_ScopeName",varScopeNameTwo);
        caller.type("Scopes.tf_Role",param_roleStore);
        //waiting for content load
        caller.pause("3000");
        caller.click("Scopes.btn_SubmitScope");
        //waiting for content load
        caller.pause("3000");
        caller.click("Scopes.btn_Scope","param_verbMethodName_PARAM:" + param_verbMethodNamePost);
        caller.select("Scopes.ele_ddScope",varScopeNameTwo);
        caller.click("Scopes.btn_Right");
        caller.click("APIPublisherBrowse.btn_SaveAndPublish");
        //waiting for content load
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_Close");
        //Navigate to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_tenantOrAdmin);
        //go to my subscription
        caller.click("APIStoreHome.lnk_MySubcription");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreMySubcription.lnk_ScopeProductionKey");
        //waiting for content load
        caller.pause("2000");
        String varScopeKeyOne = caller.retrieveString("keyScopeKeyOne");
        caller.pause("2000");
        //Select scopes
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreMySubcription.chk_KeyPopUpProduction","param_checkNoProduction_PARAM:1");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreMySubcription.chk_KeyPopUpProduction","param_checkNoProduction_PARAM:2");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreMySubcription.btn_scopeSelectButtonPopUpProduction");
        //waiting for content load
        caller.pause("2000");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        //waiting for content load
        caller.pause("2000");
        //Retrive previous  generated Token
        String varAccssTokenGenProd = caller.retrieveString("keyAccssTokenGenProd");
        //Store Access token
        String varMultiScopeTokenReGenProd = caller.getStringProperty("APIStoreMySubcription.ele_lblAccessTokenProduction","TEXT:");
        //Verify access token is regenarated(acess token is different from previous)
        if(!(varAccssTokenGenProd.equals(varMultiScopeTokenReGenProd))){
        caller.writeToReport("Token is regenaerated");
        } else {
        caller.writeToReport("Token is not  regenaerated");
        }
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreMySubcription.lnk_ScopeSandBox");
        //waiting for content load
        caller.pause("2000");
        //Select scopes
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreMySubcription.chk_KeyPopUpSandbox","param_checkNoSandbox_PARAM:1");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreMySubcription.chk_KeyPopUpSandbox","param_checkNoSandbox_PARAM:2");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreMySubcription.btn_scopeSelectButtonPopUpSandbox");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        //waiting for content load
        caller.pause("2000");
        //Retrive previous  generated Token
        String varAccssTokenGenSand = caller.retrieveString("keyAccssTokenGenSand");
        //Store Access token
        String varMultiScopeTokenReGenSand = caller.getStringProperty("APIStoreMySubcription.ele_lblAccessTokenProduction","TEXT:");
        //Verify access token is regenarated(acess token is different from previous)
        if(!(varAccssTokenGenSand.equals(varMultiScopeTokenReGenSand))){
        caller.writeToReport("Token is regenaerated");
        } else {
        caller.writeToReport("Token is not  regenaerated");
        }
        caller.writeToReport("End of executing APIM_361");	
    }
    /**
     *  Business component APIM_360.
     */
    public final static void APIM_360(final SeleniumTestBase caller, final String param_APIName, final String param_storeRole, final String param_verbMethodNameGet, final String param_storeURL, final String param_APIContext, final String param_APIVersion, final String param_tagName, final String param_productionEndPoint, final String param_sandBoxEndPoint, final String param_appName, final String param_TenantOrAdmin, final String param_tenantOneOrAdminStoreOne) throws Exception {
        caller.writeToReport("Start of executing APIM_360");
        //Go for create new API up to create state
        caller.click("APIPublisherHome.lnk_Add");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        //waiting for content load
        caller.pause("2000");
        //start design stage
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Type API Name
        String varAPIName = param_APIName+caller.generateData("int",3);
        caller.store("keyAPIName","String",varAPIName);
        caller.type("APIPublisherAdd.tf_APIName",varAPIName);
        //Type API contest
        String varAPIContext = param_APIContext+caller.generateData("int",4);
        caller.type("APIPublisherAdd.tf_APIContext",varAPIContext);
        String varAPIVersion = param_APIVersion+caller.generateData("int",2);
        caller.store("keyAPIVersion","String",varAPIVersion);
        caller.type("APIPublisherAdd.tf_APIVersion",varAPIVersion);
        //Type valid image path
        //Type
        //object=APIPublisherAdd.btn_BrowseImage
        //text=@param_APIImagePath
        caller.type("APIPublisherAdd.tf_Tags",param_tagName);
        caller.fireEvent("KEY%key=\n","2000");
        //waiting for content load
        caller.pause("6000");
        //click save and verify warning
        caller.type("APIPublisherAdd.tf_URLPattern",varAPIName+"/"+varAPIContext);
        caller.click("APIPublisherAdd.chk_Get");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherAdd.btn_Add");
        caller.checkElementPresent("APIPublisherAdd.btn_Save",false,"");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherAdd.btn_Save");
        //waiting for content load
        caller.pause("4000");
        //Go to implement stage
        caller.checkElementPresent("APIPublisherAdd.lnk_NextImplement",false,"");
        //waiting for content load
        caller.pause("4000");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //waiting for content load
        caller.pause("6000");
        caller.click("APIPublisherBrowse.ele_lblManagedAPI");
        //waiting for content load
        caller.pause("3000");
        caller.type("APIPublisherBrowse.tf_ProductionEndPoint",param_productionEndPoint);
        caller.type("APIPublisherBrowse.tf_SandBoxEndPoint",param_sandBoxEndPoint);
        caller.click("APIPublisherBrowse.btn_SaveManagedAPI");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_NextManage");
        //waiting for content load
        caller.pause("4000");
        //Start manage stage
        caller.click("APIPublisherAdd.dd_tireAvailabilityConfig");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherAdd.chk_tireSelectionUnlimited");
        //Add scope for particular role
        caller.click("Scopes.btn_AddScope");
        //Type API SCope key
        String varScopeKeyOne = "ScopeKeyOne"+caller.generateData("String",3);
        //Store vatiable
        caller.store("keyScopeKeyOne","String",varScopeKeyOne);
        caller.type("Scopes.tf_ScopeKey",varScopeKeyOne);
        //Type API SCope
        String varScopeNameOne = "ScopeNameOne"+caller.generateData("String",4);
        caller.type("Scopes.tf_ScopeName",varScopeNameOne);
        //giving ROLE which logging to Store
        caller.type("Scopes.tf_Role",param_storeRole);
        //waiting for content load
        caller.pause("3000");
        caller.click("Scopes.btn_SubmitScope");
        //waiting for content load
        caller.pause("6000");
        //click GET method
        caller.checkElementPresent("Scopes.btn_Scope","param_verbMethodName_PARAM:" + param_verbMethodNameGet,false,"");
        caller.click("Scopes.btn_Scope","param_verbMethodName_PARAM:" + param_verbMethodNameGet);
        caller.select("Scopes.ele_ddScope",varScopeNameOne);
        caller.click("Scopes.btn_Right");
        //waiting for content load
        caller.pause("3000");
        //save and publish
        caller.click("APIPublisherBrowse.btn_SaveAndPublish");
        //waiting for content load
        caller.pause("4000");
        caller.checkElementPresent("APIPublisherAdd.ele_lblFinalClose",false,"");
        caller.click("APIPublisherAdd.ele_lblFinalClose");
        //Navigate to store with user with role given in selecting scope
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_tenantOneOrAdminStoreOne);
        //waiting for content load
        caller.pause("5000");
        //create new aplication
        //Go to my app and create app
        caller.click("APIStoreHome.lnk_MyApplication");
        //Wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreMyApllication.ele_lblNewAppliacation",false,"");
        //Type aplication name
        //Type API SCope
        String varAppNameOne = param_appName+caller.generateData("int",4);
        caller.store("keyAPPName","String",varAppNameOne);
        caller.type("APIStoreMyApllication.tf_ApplicationName",varAppNameOne);
        caller.click("APIStoreMyApllication.btn_AddApplication");
        //waiting for content load
        caller.pause("4000");
        //Go to published  API
        caller.click("APIStoreHome.lnk_APIs");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + varAPIName);
        //waiting for content load
        caller.pause("2000");
        //Subscribe API
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",varAppNameOne);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_StayOnThisPage");
        //waiting for content load
        caller.pause("2000");
        //go to my subscription
        caller.click("APIStoreHome.lnk_MySubcription");
        //click genarate key of production
        //waiting for content load
        caller.pause("2000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",varAppNameOne);
        //waiting for content load
        caller.pause("4000");
        caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction",false,"");
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //waiting for content load
        caller.pause("7000");
        //Store Access token
        String varAccessTokenProd = caller.getStringProperty("APIStoreMySubcription.ele_lblAccessTokenProduction","TEXT:");
        //waiting for content load
        caller.pause("2000");
        //Verify concumer key of production
        caller.checkElementPresent("APIStoreMySubcription.ele_lblConsumerKeyProduction",false,"");
        //waiting for content load
        caller.pause("3000");
        //Verify concumer secret key of production
        caller.checkElementPresent("APIStoreMySubcription.ele_lblConsumerSecretTokenProduction",false,"");
        //waiting for content load
        caller.pause("2000");
        //Verify Acsess Token of production
        caller.checkElementPresent("APIStoreMySubcription.ele_lblAccessTokenProduction",false,"");
        //waiting for content load
        caller.pause("2000");
        //Click generate button of sandbox
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //waiting for content load
        caller.pause("7000");
        //Store Access token
        String varAccessTokenSand = caller.getStringProperty("APIStoreMySubcription.ele_lblAccessTokenProduction","TEXT:");
        //Verify concumer key of production
        caller.checkElementPresent("APIStoreMySubcription.ele_lblConsumerKeySandbox",false,"");
        //waiting for content load
        caller.pause("3000");
        //Verify concumer secret key of production
        caller.checkElementPresent("APIStoreMySubcription.ele_lblConsumerSecretTokenSandBox",false,"");
        //waiting for content load
        caller.pause("2000");
        //Verify Acsess Token of production
        caller.checkElementPresent("APIStoreMySubcription.ele_lblAccessTokenSandBox",false,"");
        //waiting for content load
        caller.pause("4000");
        caller.click("APIStoreMySubcription.lnk_ScopeProductionKey");
        //waiting for content load
        caller.pause("5000");
        //Select scopes
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreMySubcription.chk_KeyPopUpProduction","param_checkNoProduction_PARAM:1");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreMySubcription.btn_scopeSelectButtonPopUpProduction");
        //waiting for content load
        caller.pause("2000");
        //Regenerate key
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        //waiting for content load
        caller.pause("7000");
        //Store Access token
        String varAccessTokenReGenProd = caller.getStringProperty("APIStoreMySubcription.ele_lblAccessTokenProduction","TEXT:");
        caller.store("keyAccssTokenGenProd","String","varAccessTokenReGenProd");
        //Verify access token is regenarated(acess token is different from previous)
        if(!(varAccessTokenProd.equals(varAccessTokenReGenProd))){
        caller.writeToReport("Token is regenaerated");
        } else {
        caller.writeToReport("Token is not  regenaerated");
        }
        //waiting for content load
        caller.pause("4000");
        caller.click("APIStoreMySubcription.lnk_ScopeSandBox");
        //waiting for content load
        caller.pause("3000");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreMySubcription.chk_KeyPopUpSandbox","param_checkNoSandbox_PARAM:1");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreMySubcription.btn_scopeSelectButtonPopUpSandbox");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        //waiting for content load
        caller.pause("5000");
        //Store Access token
        String varAccessTokenReGenSand = caller.getStringProperty("APIStoreMySubcription.ele_lblAccessTokenProduction","TEXT:");
        //Store the value in variable
        caller.store("keyAccssTokenGenSand","String","varAccessTokenReGenSand");
        //Verify access token is regenarated(acess token is different from previous)
        if(!(varAccessTokenSand.equals(varAccessTokenReGenSand))){
        caller.writeToReport("Token is regenaerated");
        } else {
        caller.writeToReport("Token is not  regenaerated");
        }
        caller.writeToReport("End of executing APIM_360");	
    }
    /**
     *  Business component APIM_60.
     */
    public final static void APIM_60(final SeleniumTestBase caller, final String param_storeURL, final String param_APIName, final String param_serverNameDomainTwo, final String param_serverNameDomainOne, final String param_APIvisibility, final String param_APIContext, final String param_APIVersion, final String param_APIImagePath, final String param_TagName, final String param_productionEndpoint, final String param_sandboxEndpoint, final String param_publisherURL, final String param_tenantOrAdminStoreOne, final String param_tenantOrAdminPublisherOne, final String param_tenantOrAdminStoreTwo) throws Exception {
        caller.writeToReport("Start of TC APIM-60");
        //APIM-60: Published APIs with public visibility can be viewed by all users.
        //Loging to the publisher using the created credentials
        lib_Common.bc_PublisherLogin(caller, param_publisherURL,param_tenantOrAdminPublisherOne);
        //Create api to publish with PUBLIC visibiliy
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.pause("1000");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //genarate api name
        String APIName = param_APIName+"_"+caller.generateData("int",3);
        caller.store("key_APIName","String",APIName);
        //Type API Name
        caller.type("APIPublisherAdd.tf_APIName",APIName);
        //Type API context
        String APIcontext = param_APIContext+"_"+caller.generateData("int",3);
        caller.type("APIPublisherAdd.tf_APIContext",APIcontext);
        //Type API version
        caller.type("APIPublisherAdd.tf_APIVersion",param_APIVersion);
        //storeAPI version
        caller.store("var_APIVersion","String",param_APIVersion);
        caller.pause("2000");
        caller.select("APIPublisherBrowse.ele_ddVisibility",param_APIvisibility);
        caller.pause("2000");
        //Pass image name to upload the image
        /*
        //Type valid image path
        SetVariable
         name=java.io.File file
         type=java.io.File file
         paramValue=new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator +param_APIImagePath)
        SetVariable
         name=entirePath
         type=String
         paramValue=file.getAbsolutePath()

        //Select the location of the image
        Type
         object=APIPublisherAdd.btn_BrowseImage
         text=@entirePath
        */
        //Genarate Tag Name
        String TagName = param_TagName+"_"+caller.generateData("int",3);
        //Type API tag
        caller.type("APIPublisherAdd.tf_Tags",TagName);
        caller.pause("1000");
        caller.fireEvent("KEY%key=\n","2000");
        //waiting for content load check the save button availability
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(caller.checkElementPresent("APIPublisherAdd.btn_Save")){
        //click save and verify warning
        caller.click("APIPublisherAdd.btn_Save");
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Could not find the object 'APIPublisherAdd.btn_Save'");
        }
        //waiting for content load
        caller.pause("2000");
        }
        }
        //waiting for content load and check the popup availability
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(caller.checkElementPresent("APIPublisherAdd.ele_lblDefaultResourceMessage")){
        caller.click("APIPublisherAdd.btn_Yes");
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Could not find the object 'APIPublisherAdd.ele_lblDefaultResourceMessage'");
        }
        //waiting for content load
        caller.pause("2000");
        }
        }
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //waiting for content load
        caller.pause("4000");
        lib_Common.bc_ImplementStage(caller, param_productionEndpoint,param_sandboxEndpoint);
        lib_Common.bc_APIManageStage(caller);
        //Previous API Already having PUBLIC visibility to  API
        //Navigate to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        //waiting for content load
        caller.pause("4000");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait for content load
        caller.pause("4000");
        //Verify API is visible when not loging to store
        caller.checkElementPresent("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        //Verify API is visible when  loging  with current tenant domain user to store
        lib_Common.bc_StoreLogin(caller, param_tenantOrAdminStoreOne);
        //Wait for content load
        caller.pause("3000");
        //Verify API is visible when  loging  with same tenant domain user to store
        caller.checkElementPresent("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        //Verify API is visible when  loging  with other tenant domain user to store
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //login with second tenant
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublicApiStore");
        caller.pause("2000");
        lib_Common.bc_SelectServer(caller, param_serverNameDomainTwo);
        lib_Common.bc_StoreLogin(caller, param_tenantOrAdminStoreTwo);
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_PublicApiStore");
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        //Wait for content load
        caller.pause("2000");
        //Verify API is Not visible for other tenants  when give API visibility as Public
        caller.checkObjectProperty("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + APIName,"ELEMENTPRESENT","true",false,"");
        caller.writeToReport("End of TC APIM-60");	
    }
    /**
     *  Business component APIM_61.
     */
    public final static void APIM_61(final SeleniumTestBase caller, final String param_publisherURL, final String param_APIName, final String param_serverNameDomainTwo, final String param_storeURL, final String param_serverNameDomainOne, final String param_tenantOrAdminStoreOne, final String param_APIContext, final String param_APIVersion, final String param_APIvisibility, final String param_tagName, final String param_tenantOrAdminStoreTwo, final String param_tenantOrAdminPublisherOne, final String param_productionEndpoint, final String param_sandboxEndpoint) throws Exception {
        caller.writeToReport("Start of TC APIM-61");
        //APIM-61: publish an API given 'visible to my domain' -users belong to other tenantsshould not be able to view
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        lib_Common.bc_PublisherLogin(caller, param_publisherURL,param_tenantOrAdminPublisherOne);
        //API creation
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.pause("1000");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //genarate api name
        String APIName = param_APIName+"_"+caller.generateData("int",3);
        caller.store("key_APIName","String",APIName);
        //Type API Name
        caller.type("APIPublisherAdd.tf_APIName",APIName);
        //Type API context
        String APIcontext = param_APIContext+"_"+caller.generateData("int",3);
        caller.type("APIPublisherAdd.tf_APIContext",APIcontext);
        //Type API version
        caller.type("APIPublisherAdd.tf_APIVersion",param_APIVersion);
        //storeAPI version
        caller.store("var_APIVersion","String",param_APIVersion);
        caller.pause("2000");
        caller.select("APIPublisherBrowse.ele_ddVisibility",param_APIvisibility);
        caller.pause("2000");
        //Uncomment this incase if using image
        /*
        //Type valid image path
        SetVariable
         name=java.io.File file
         type=java.io.File file
         paramValue=new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator +param_APIImagePath)
        SetVariable
         name=entirePath
         type=String
         paramValue=file.getAbsolutePath()

        //Select the location of the image
        Type
         object=APIPublisherAdd.btn_BrowseImage
         text=@entirePath
        */
        //Genarate Tag Name
        String TagName = param_tagName+"_"+caller.generateData("int",3);
        //Type API tag
        caller.type("APIPublisherAdd.tf_Tags",TagName);
        caller.pause("1000");
        caller.fireEvent("KEY%key=\n","2000");
        //waiting for content load and
        //check the button availability
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(caller.checkElementPresent("APIPublisherAdd.btn_Save")){
        //click save and verify warning
        caller.click("APIPublisherAdd.btn_Save");
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Could not find the object 'APIPublisherAdd.btn_Save'");
        }
        //waiting for content load
        caller.pause("2000");
        }
        }
        //waiting for content load and
        //check the popup availability
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(caller.checkElementPresent("APIPublisherAdd.ele_lblDefaultResourceMessage")){
        caller.click("APIPublisherAdd.btn_Yes");
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Could not find the object 'APIPublisherAdd.ele_lblDefaultResourceMessage'");
        }
        //waiting for content load
        caller.pause("2000");
        }
        }
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //waiting for content load
        caller.pause("4000");
        lib_Common.bc_ImplementStage(caller, param_productionEndpoint,param_sandboxEndpoint);
        lib_Common.bc_APIManageStage(caller);
        //End of API Creation
        //Verification with visibilty of own tenant ----------------------------------  APIM_66
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        lib_Common.bc_StoreLogin(caller, param_tenantOrAdminStoreOne);
        //Verify API is visible for same tenant  when give API visibility as my domain
        caller.checkObjectProperty("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + APIName,"ELEMENTPRESENT","true",false,"");
        //To Log in with other tenat domain user
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //waiting for content load
        //End of Verification with visibilty of own tenant -------------------------- APIM_66
        caller.pause("2000");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameDomainTwo);
        lib_Common.bc_StoreLogin(caller, param_tenantOrAdminStoreTwo);
        caller.click("APIStoreHome.lnk_PublicApiStore");
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        //waiting for content load
        caller.pause("2000");
        //Verify API is Not visible for other tenants  when give API visibility as my domain
        caller.checkObjectProperty("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + APIName,"ELEMENTPRESENT","false",false,"");
        caller.writeToReport("End of TC APIM-61");	
    }
    /**
     *  Business component APIM_62.
     */
    public final static void APIM_62(final SeleniumTestBase caller, final String param_publisherURL, final String param_APIName, final String param_storeURL, final String param_publisherOneOfTenantOneOrAdmin, final String param_APIContext, final String param_APIVersion, final String param_APIvisibility, final String param_tagName, final String param_productionEndpoint, final String param_sandboxEndpoint, final String param_serverNameDomainOne, final String param_storeOneOfTenantOneOrAdmin, final String param_roleNameOfTenantOneStoreOne, final String param_storeTwoOfTenantOneOrAdmin) throws Exception {
        caller.writeToReport("Start of TC APIM-62");
        //APIM-62: published api with visibility restricted to a role should visible to users with the particular role.
        lib_Common.bc_PublisherLogin(caller, param_publisherURL,param_publisherOneOfTenantOneOrAdmin);
        //Start of API Creation
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.pause("1000");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //genarate api name
        String APIName = param_APIName+"_"+caller.generateData("int",3);
        caller.store("key_APIName","String",APIName);
        //Type API Name
        caller.type("APIPublisherAdd.tf_APIName",APIName);
        //Type API context
        String APIcontext = param_APIContext+"_"+caller.generateData("int",3);
        caller.type("APIPublisherAdd.tf_APIContext",APIcontext);
        //Type API version
        caller.type("APIPublisherAdd.tf_APIVersion",param_APIVersion);
        //storeAPI version
        caller.store("var_APIVersion","String",param_APIVersion);
        caller.pause("2000");
        caller.select("APIPublisherBrowse.ele_ddVisibility",param_APIvisibility);
        caller.pause("2000");
        caller.type("APIPublisherBrowse.tf_VisibilityToRole",param_roleNameOfTenantOneStoreOne);
        //Uncomment this incase if using image
        /*
        //Type valid image path
        SetVariable
         name=java.io.File file
         type=java.io.File file
         paramValue=new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator +param_APIImagePath)
        SetVariable
         name=entirePath
         type=String
         paramValue=file.getAbsolutePath()

        //Select the location of the image
        Type
         object=APIPublisherAdd.btn_BrowseImage
         text=@entirePath
        */
        //Genarate Tag Name
        String TagName = param_tagName+"_"+caller.generateData("int",3);
        //Type API tag
        caller.type("APIPublisherAdd.tf_Tags",TagName);
        caller.pause("1000");
        caller.fireEvent("KEY%key=\n","2000");
        //waiting for content load and
        //check the button availability
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(caller.checkElementPresent("APIPublisherAdd.btn_Save")){
        //click save and verify warning
        caller.click("APIPublisherAdd.btn_Save");
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Could not find the object 'APIPublisherAdd.btn_Save'");
        }
        //waiting for content load
        caller.pause("2000");
        }
        }
        //waiting for content load and
        //check the popup availability
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(caller.checkElementPresent("APIPublisherAdd.ele_lblDefaultResourceMessage")){
        caller.click("APIPublisherAdd.btn_Yes");
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Could not find the object 'APIPublisherAdd.ele_lblDefaultResourceMessage'");
        }
        //waiting for content load
        caller.pause("2000");
        }
        }
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //waiting for content load
        caller.pause("4000");
        lib_Common.bc_ImplementStage(caller, param_productionEndpoint,param_sandboxEndpoint);
        lib_Common.bc_APIManageStage(caller);
        //End of API Creation
        String var_APINameWithSimilarRole = caller.retrieveString("key_APIName");
        //Loging user with role given in visibility
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        //Verify API is visible when  loging  with user role given in API visibility
        lib_Common.bc_StoreLogin(caller, param_storeOneOfTenantOneOrAdmin);
        //waiting for content load
        caller.pause("2000");
        //Verify API is  visible fo ruser with  when give API visibility as my domain
        caller.checkObjectProperty("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + var_APINameWithSimilarRole,"ELEMENTPRESENT","true",false,"");
        //waiting for content load
        caller.pause("2000");
        //logout the store one user and to login with store two user
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //waiting for content load
        caller.pause("2000");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        lib_Common.bc_StoreLogin(caller, param_storeTwoOfTenantOneOrAdmin);
        //Verify API is not  visible when  loging when user not mention in select visibility to role user to store
        //waiting for content load
        caller.pause("2000");
        //Verify API is Not visible for other tenants  when give API visibility as my domain
        caller.checkObjectProperty("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + var_APINameWithSimilarRole,"ELEMENTPRESENT","false",false,"");
        caller.writeToReport("End of TC APIM-62");	
    }
    /**
     *  Business component APIM_64.
     */
    public final static void APIM_64(final SeleniumTestBase caller, final String param_APIName, final String param_serverNameDomainTwo, final String param_storeURL, final String param_publisherURL, final String param_serverNameDomainOne, final String param_storeOneOfTenantOneOrAdmin, final String param_storeOneOfTenantTwoOrAdmin) throws Exception {
        caller.writeToReport("Start Of TC APIM-64");
        //APIM-64: API with visibility restricted to a role should not be visible to users belong to other tenants
        //Tenant One Store One And Tenant Two Store One Roles Sould be with Similar Name
        //logout of the store
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //waiting for content load
        caller.pause("1000");
        caller.click("APIStoreHome.lnk_PublicApiStore");
        //waiting for content load
        caller.pause("2000");
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        lib_Common.bc_StoreLogin(caller, param_storeOneOfTenantOneOrAdmin);
        //API Visible when logged in with Tenant one of a role name
        caller.checkObjectProperty("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + param_APIName,"ELEMENTPRESENT","true",false,"");
        //waiting for content load
        caller.pause("2000");
        //logout of the store
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //waiting for content load
        caller.pause("1000");
        caller.click("APIStoreHome.lnk_PublicApiStore");
        //waiting for content load
        caller.pause("2000");
        lib_Common.bc_SelectServer(caller, param_serverNameDomainTwo);
        //Verify API is not  visible when  loging  with  same user role given in API visibility with other tenant
        lib_Common.bc_StoreLogin(caller, param_storeOneOfTenantTwoOrAdmin);
        //waiting for content load
        caller.pause("1000");
        caller.click("APIStoreHome.lnk_PublicApiStore");
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        //waiting for content load
        caller.pause("2000");
        //Verify API is   not visible for user
        caller.checkObjectProperty("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + param_APIName,"ELEMENTPRESENT","false",false,"");
        caller.writeToReport("End Of TC APIM-64");	
    }
    /**
     *  Business component APIM_65.
     */
    public final static void APIM_65(final SeleniumTestBase caller, final String param_publisherURL, final String param_multipleVisibility, final String param_storeURL, final String param_APIName, final String param_storeOneOfTenantOneOrAdmin, final String param_storeTwoOfTenantOneOrAdmin, final String param_serverNameDomainOne) throws Exception {
        caller.writeToReport("Start of TC APIM-65");
        //APIM-65: publish an api with visibility restricted to multiple roles-only users with allowed roles can view.
        //Navigate to publisher URL
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        //go to API
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("3000");
        caller.type("APIPublisherHome.tf_APISearch",param_APIName);
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + param_APIName);
        caller.click("APIPublisherBrowse.lnk_Edit");
        //waiting for content load
        caller.pause("2000");
        //Type Multiple user roles entered at this instance where the role names of Tenant One Store One and Tenant One Store Two
        caller.type("APIPublisherBrowse.tf_VisibilityToRole",param_multipleVisibility);
        caller.click("APIPublisherAdd.btn_Save");
        caller.click("APIPublisherBrowse.btn_NextImplement");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_NextManage");
        //waiting for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.btn_SaveAndPublish");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_Close");
        //waiting for content load
        caller.pause("2000");
        //Loging user with role one given in visibility
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //waiting for content load
        caller.pause("2000");
        //Verify API is   visible when  loging  with   user role  given  in multiplr role in API visibility
        lib_Common.bc_StoreLogin(caller, param_storeOneOfTenantOneOrAdmin);
        //waiting for content load
        caller.pause("2000");
        //Check that the api name is present for tenet one
        caller.checkObjectProperty("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + param_APIName,"ELEMENTPRESENT","true",false,"");
        //Log out
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublicApiStore");
        //waiting for content load
        caller.pause("2000");
        //Verify API is visible when  loging  with   user role given in API visibility with other tenant
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        lib_Common.bc_StoreLogin(caller, param_storeTwoOfTenantOneOrAdmin);
        //waiting for content load
        caller.pause("2000");
        //Verify API is  visible for user
        caller.checkObjectProperty("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + param_APIName,"ELEMENTPRESENT","true",false,"");
        caller.writeToReport("End of TC APIM-65");	
    }
    /**
     *  Business component APIM_66.
     */
    public final static void APIM_66(final SeleniumTestBase caller, final String param_publisherURL, final String param_APIName, final String param_VisibileToMyDomain, final String param_serverNameDomainOne, final String param_storeURL, final String param_storeUsernameTwoDomainOne, final String param_storePasswordTwoDomainOne, final String param_storeUsernameOneDomainOne, final String param_storePasswordOneDomainOne) throws Exception {
        //APIM-66: Publish an API given 'visible to my domain' -users belong to same tenant should be able to view.
        //APIM-66: This Test case is merged with APIM-61
        /*
        //Navigate to publisher URL
        NavigateToURL
         url=APIPublisherLogin
         param_publisherURL=@param_publisherURL
         ms=3000
        //go to API
        Click
         object=APIPublisherHome.lnk_Browse
        //waiting for content load
        Pause
         ms=3000
        Type
         object=APIPublisherHome.tf_APISearch
         text=@param_APIName
        Click
         object=APIPublisherHome.btn_Search
        //waiting for content load
        Pause
         ms=2000
        Click
         object=APIPublisherBrowse.lnk_APIName
         param_APIName=@param_APIName
        Click
         object=APIPublisherBrowse.lnk_Edit
        //waiting for content load
        Pause
         ms=2000
        //Select restricted to role
        Select
         object=APIPublisherBrowse.ele_ddVisibility
         selectLocator=@param_VisibileToMyDomain
        Click
         object=APIPublisherAdd.btn_Save
        Click
         object=APIPublisherBrowse.btn_NextImplement
        //waiting for content load
        Pause
         ms=2000
        Click
         object=APIPublisherBrowse.btn_NextManage
        //waiting for content load
        Pause
         ms=2000
        Click
         object=APIPublisherBrowse.btn_SaveAndPublish
        //waiting for content load
        Pause
         ms=2000
        Click
         object=APIPublisherBrowse.btn_Close
        //waiting for content load
        Pause
         ms=2000
        //Loging user with Same domain
        Call
         businessComponent=lib_Common.bc_NavigateToStore
         param_serverName=@param_serverNameDomainOne
         param_storeURL=@param_storeURL
        Click
         object=APIStoreHome.lnk_LogOutDropDown
        //waiting for content load
        Pause
         ms=2000
        Click
         object=APIStoreHome.btn_Logout
        //waiting for content load
        Pause
         ms=2000
        //waiting for content load
        Pause
         ms=2000
        //Verify API visible
        Call
         businessComponent=lib_Common.bc_APIStoreLogin
         param_username=@param_storeUsernameTwoDomainOne
         param_password=@param_storePasswordTwoDomainOne
        //waiting for content load
        Pause
         ms=2000
        //Verify API is  visible fo ruser with  when give API visibility as my domain
        CheckObjectProperty
         object=APIStoreAPIs.lnk_APIName
         param_APIName=@param_APIName
         propertyname=ELEMENTPRESENT
         expectedValue=true
         stopOnFailure=false
         customErrorMessage=
        //waiting for content load
        Pause
         ms=2000
        //Loging user with Same domain
        Call
         businessComponent=lib_Common.bc_NavigateToStore
         param_serverName=@param_serverNameDomainOne
         param_storeURL=@param_storeURL
        //waiting for content load
        Pause
         ms=2000
        //Log out
        Click
         object=APIStoreHome.lnk_LogOutDropDown
        //waiting for content load
        Pause
         ms=2000
        Click
         object=APIStoreHome.btn_Logout
        //waiting for content load
        Pause
         ms=2000
        //waiting for content load
        Pause
         ms=2000
        //Verify API visible
        Call
         businessComponent=lib_Common.bc_APIStoreLogin
         param_username=@param_storeUsernameTwoDomainOne
         param_password=@param_storePasswordTwoDomainOne
        //waiting for content load
        Pause
         ms=2000
        //Verify API is  visible fo ruser with  when give API visibility as my domain
        CheckObjectProperty
         object=APIStoreAPIs.lnk_APIName
         param_APIName=@param_APIName
         propertyname=ELEMENTPRESENT
         expectedValue=true
         stopOnFailure=false
         customErrorMessage=
        */	
    }
    /**
     *  Business component APIM_67.
     */
    public final static void APIM_67(final SeleniumTestBase caller, final String param_APIName, final String param_subscriptionAvailableToCurrentTenantOnly, final String param_storeURL, final String param_aplicationName, final String param_APIContext, final String param_APIVersion, final String param_tagName, final String param_ProductionEndPoint, final String param_SandBoxEndpoint, final String param_TenantOneOrAdmin, final String param_tenantOneOrAdminStoreOne, final String param_tenantOneOrAdminStoreTwo) throws Exception {
        caller.writeToReport("Start of executing APIM_67");
        //APIM-67: API with subscription available only to current tenant, allows current tenant user to subscribe
        //Go for create new API up to create state
        caller.click("APIPublisherHome.lnk_Add");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        //start design stage
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Type API Name
        String varAPIName = param_APIName+caller.generateData("int",3);
        caller.store("keyAPIName","String",varAPIName);
        caller.type("APIPublisherAdd.tf_APIName",varAPIName);
        //Type API contest
        String varAPIContext = param_APIContext+caller.generateData("int",4);
        caller.type("APIPublisherAdd.tf_APIContext",varAPIContext);
        String varAPIVersion = param_APIVersion+caller.generateData("int",2);
        caller.store("keyAPIVersion","String",varAPIVersion);
        caller.type("APIPublisherAdd.tf_APIVersion",varAPIVersion);
        caller.type("APIPublisherAdd.tf_Tags",param_tagName);
        caller.fireEvent("KEY%key=\n","2000");
        //waiting for content load
        caller.pause("6000");
        //click save and verify warning
        caller.type("APIPublisherAdd.tf_URLPattern",varAPIName+"/"+varAPIContext);
        caller.click("APIPublisherAdd.chk_Post");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherAdd.btn_Add");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherAdd.btn_Save");
        //waiting for content load
        caller.pause("6000");
        //Go to implement stage
        caller.checkElementPresent("APIPublisherAdd.lnk_NextImplement",false,"");
        //waiting for content load
        caller.pause("6000");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //waiting for content load
        caller.pause("7000");
        caller.click("APIPublisherBrowse.ele_lblManagedAPI");
        caller.pause("3000");
        caller.type("APIPublisherBrowse.tf_ProductionEndPoint",param_ProductionEndPoint);
        caller.type("APIPublisherBrowse.tf_SandBoxEndPoint",param_SandBoxEndpoint);
        caller.click("APIPublisherBrowse.btn_SaveManagedAPI");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_NextManage");
        //waiting for content load
        caller.pause("4000");
        //Start manage stage
        caller.click("APIPublisherAdd.dd_tireAvailabilityConfig");
        //waiting for content load
        caller.pause("3000");
        caller.select("APIPublisherBrowse.ele_ddSubscription",param_subscriptionAvailableToCurrentTenantOnly);
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherAdd.chk_tireSelectionUnlimited");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherAdd.btn_SavePublish");
        //waiting for content load
        caller.pause("8000");
        caller.checkElementPresent("APIPublisherAdd.ele_lblFinalClose",false,"");
        caller.click("APIPublisherAdd.ele_lblFinalClose");
        //Go to API Store to create new Application
        //waiting for content load
        caller.pause("3000");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenantOneOrAdmin);
        //Login to API Store
        lib_Common.bc_StoreLogin(caller, param_tenantOneOrAdminStoreOne);
        //waiting for content load
        caller.pause("5000");
        //Create new Application
        caller.click("APIStoreHome.lnk_MyApplication");
        String varAPPName = param_aplicationName+caller.generateData("int",5);
        caller.store("keyAPPName","String",varAPPName);
        caller.type("APIStoreMyApllication.tf_ApplicationName",varAPPName);
        caller.type("APIStoreMyApllication.tf_CallBackURL","application/x-www-form-urlencoded");
        caller.type("APIStoreMyApllication.tf_Discription","test_dec");
        caller.click("APIStoreMyApllication.btn_AddApplication");
        //waiting for content load
        caller.pause("7000");
        //Go to API window to Subscribe API to an application
        caller.click("APIStoreHome.lnk_APIs");
        //waiting for content load
        caller.pause("4000");
        caller.type("APIStoreHome.tf_APISearchStore",varAPIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + varAPIName,false,"");
        caller.click("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + varAPIName);
        //waiting for content load
        caller.pause("7000");
        caller.checkElementPresent("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",false,"");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",varAPPName);
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_StayOnThisPage");
        caller.checkElementPresent("APIStoreAPIs.btn_Subscribe",false,"");
        //Go API store with anothe user with same domain
        //Navigate to store with same domain store user
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenantOneOrAdmin);
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("2000");
        lib_Common.bc_StoreLogin(caller, param_tenantOneOrAdminStoreTwo);
        caller.pause("3000");
        //Go to Public API
        caller.click("APIStoreAPIs.lnk_PublicApiStore");
        lib_Common.bc_SelectServer(caller, param_TenantOneOrAdmin);
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",varAPIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("3000");
        caller.click("APIStoreAPIs.lnk_APINameSearch","param_APIName_PARAM:" + varAPIName);
        //Verify Subscribe is avilale
        caller.checkObjectProperty("APIStoreAPIs.btn_Subscribe","ELEMENTPRESENT","true",false,"");
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("2000");
        caller.writeToReport("End of executing APIM_67");	
    }
    /**
     *  Business component APIM_68.
     */
    public final static void APIM_68(final SeleniumTestBase caller, final String param_APIName, final String param_storeURL, final String param_AppName, final String param_TenantTwoOrAdmin, final String param_tenantTwoOrAdminStoreOne, final String param_TenantOneOrAdmin) throws Exception {
        caller.writeToReport("Start of executing APIM_68");
        //APIM-68: API with subscription available only to current tenant, not allow other tenant users to subscribe.
        //Navigate API store with 2nd domain store user
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenantTwoOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_tenantTwoOrAdminStoreOne);
        //waiting for content load
        caller.pause("3000");
        //Go to Public API
        caller.click("APIStoreAPIs.lnk_PublicApiStore");
        lib_Common.bc_SelectServer(caller, param_TenantOneOrAdmin);
        caller.click("APIStoreHome.lnk_APIs");
        //waiting for content load
        caller.pause("2000");
        String varAPIName = caller.retrieveString("keyAPIName");
        caller.type("APIStoreHome.tf_APISearchStore",varAPIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreAPIs.lnk_APINameSearch","param_APIName_PARAM:" + varAPIName);
        //Verify Subscribe is avilale
        caller.checkObjectProperty("APIStoreAPIs.btn_Subscribe","ELEMENTPRESENT","false",false,"");
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //waiting for content load
        caller.pause("2000");
        caller.writeToReport("End of executing APIM_68");	
    }
    /**
     *  Business component APIM_71.
     */
    public final static void APIM_71(final SeleniumTestBase caller, final String param_publisherURL, final String param_APIName, final String param_subscriptionAvailableToAllTenantOnly, final String param_storeURL, final String param_TenantTwoOrAdmin, final String param_tenantTwoOrAdminStoreOne, final String param_TenantOneOrAdmin) throws Exception {
        caller.writeToReport("Start of executing APIM_71");
        //APIM-71: APIs with subscription available to all tenants should allow users in other tenants to subscribe.
        //Navigate to publisher URL
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.pause("2000");
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("3000");
        String varAPIName = caller.retrieveString("keyAPIName");
        caller.type("APIPublisherHome.tf_APISearch",varAPIName);
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPIName);
        caller.click("APIPublisherBrowse.lnk_Edit");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_NextImplement");
        //waiting for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.btn_Manage");
        //waiting for content load
        caller.pause("4000");
        caller.select("APIPublisherBrowse.ele_ddSubscription",param_subscriptionAvailableToAllTenantOnly);
        //waiting for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.btn_SaveAndPublish");
        //waiting for content load
        caller.pause("7000");
        caller.click("APIPublisherBrowse.btn_Close");
        //waiting for content load
        caller.pause("2000");
        //Loging user with other domain
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenantTwoOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_tenantTwoOrAdminStoreOne);
        //waiting for content load
        caller.pause("2000");
        //Go to Public API
        caller.click("APIStoreAPIs.lnk_PublicApiStore");
        lib_Common.bc_SelectServer(caller, param_TenantOneOrAdmin);
        //Go to API
        caller.click("APIStoreHome.lnk_APIs");
        caller.type("APIStoreHome.tf_APISearchStore",varAPIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("3000");
        caller.click("APIStoreAPIs.lnk_APINameSearch","param_APIName_PARAM:" + varAPIName);
        caller.checkObjectProperty("APIStoreAPIs.btn_Subscribe","ELEMENTPRESENT","true",false,"");
        caller.writeToReport("End of executing APIM_71");	
    }
    /**
     *  Business component APIM_72.
     */
    public final static void APIM_72(final SeleniumTestBase caller, final String param_publisherURL, final String param_APIName, final String param_subscriptionAvailableToSpecificTenantOnly, final String param_specifiedTenanatName, final String param_storeURL, final String param_TenantTwoOrAdmin, final String param_tenantTwoOrAdminStoreOne, final String param_TenantOneOrAdmin, final String param_tenantTwoOrAdminStoreTwo, final String param_TenantThreeOrAdmin, final String param_tenantThreeOrAdminStoreTwo) throws Exception {
        caller.writeToReport("Start of executing APIM_72");
        //APIM-72: API with subscription available to specific tenants should allow subscription to specified tenants
        //Navigate to publisher URL
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        //go to API
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("3000");
        String varAPIName = caller.retrieveString("keyAPIName");
        caller.type("APIPublisherHome.tf_APISearch",varAPIName);
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPIName);
        caller.click("APIPublisherBrowse.lnk_Edit");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_NextImplement");
        //waiting for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.btn_Manage");
        //waiting for content load
        caller.pause("4000");
        caller.select("APIPublisherBrowse.ele_ddSubscription",param_subscriptionAvailableToSpecificTenantOnly);
        //waiting for content load
        caller.pause("4000");
        caller.type("APIPublisherBrowse.tf_Tenantname",param_specifiedTenanatName);
        //waiting for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.btn_SaveAndPublish");
        //waiting for content load
        caller.pause("7000");
        caller.click("APIPublisherBrowse.btn_Close");
        //waiting for content load
        caller.pause("2000");
        //Verify API is visible when  logged  with  STORE_01 tenent name which given for API visibility(specified tenant name)
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenantTwoOrAdmin);
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //waiting for content load
        caller.pause("2000");
        lib_Common.bc_StoreLogin(caller, param_tenantTwoOrAdminStoreOne);
        caller.pause("2000");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_PublicApiStore");
        caller.pause("2000");
        lib_Common.bc_SelectServer(caller, param_TenantOneOrAdmin);
        caller.pause("1000");
        caller.click("APIStoreHome.lnk_APIs");
        caller.type("APIStoreHome.tf_APISearchStore",varAPIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_APINameSearch","param_APIName_PARAM:" + varAPIName);
        //Verify Subscribe is avilale
        caller.checkObjectProperty("APIStoreAPIs.btn_Subscribe","ELEMENTPRESENT","true",false,"");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //waiting for content load
        caller.pause("2000");
        //Verify API is visible when  logged  with  STORE_02 tenent name which given for API visibility(specified tenant name)
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_TenantTwoOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_tenantTwoOrAdminStoreTwo);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_PublicApiStore");
        caller.pause("2000");
        lib_Common.bc_SelectServer(caller, param_TenantOneOrAdmin);
        caller.pause("1000");
        caller.click("APIStoreHome.lnk_APIs");
        caller.type("APIStoreHome.tf_APISearchStore",varAPIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_APINameSearch","param_APIName_PARAM:" + varAPIName);
        caller.checkObjectProperty("APIStoreAPIs.btn_Subscribe","ELEMENTPRESENT","true",false,"");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //waiting for content load
        caller.pause("2000");
        //Verify API is not  visible when  loging  with   user role one given in API visibility with other tenanTenant-//Navigate store with 3rd user credentials
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_TenantThreeOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_tenantThreeOrAdminStoreTwo);
        //waiting for content load
        caller.pause("2000");
        //Go to Public API
        caller.click("APIStoreAPIs.lnk_PublicApiStore");
        //waiting for content load
        caller.pause("2000");
        lib_Common.bc_SelectServer(caller, param_TenantOneOrAdmin);
        //Go to API
        caller.click("APIStoreHome.lnk_APIs");
        caller.type("APIStoreHome.tf_APISearchStore",varAPIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_APINameSearch","param_APIName_PARAM:" + varAPIName);
        //Verify Subscribe is avilale
        caller.checkObjectProperty("APIStoreAPIs.btn_Subscribe","ELEMENTPRESENT","false",false,"");
        //waiting for content load
        caller.pause("2000");
        caller.writeToReport("End of executing APIM_72");	
    }
    /**
     *  Business component APIM2_4.
     */
    public final static void APIM2_4(final SeleniumTestBase caller, final String param_publisherURL, final String param_storeURL, final String param_APIName, final String param_APIContext, final String param_APIVersionOne, final String param_APIVersionTwo, final String param_APIvisibility, final String param_APIImagePath, final String param_TagName, final String param_productionEndpoint, final String param_sandboxEndpoint, final String param_provider, final String param_numberOfUsersZero, final String param_statusCreated, final String param_statusPublished, final String param_publisherOneOfTenantOneOrAdmin, final String param_storeOneOfTenantOneOrAdmin, final String param_serverNameDomainOne, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_keyWordYes, final String param_keyWordNo, final String param_IsProviderAdmin, final String param_IsProviderTenant) throws Exception {
        caller.writeToReport("Start Of TC APIM_4");
        //Creation of API
        //Loging to the publisher using the created credentials
        lib_Common.bc_PublisherLogin(caller, param_publisherURL,param_publisherOneOfTenantOneOrAdmin);
        lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke(caller, param_APIName,param_APIContext,param_APIVersionOne,param_APIvisibility,param_APIImagePath,param_TagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        String APIcontext = caller.retrieveString("key_apiContextDesign");
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_keyWordYes,param_sandboxEndpoint,param_keyWordNo,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_keyWordYes,param_keyWordNo,"");
        String APIName = caller.retrieveString("key_APINameDesign");
        //waiting for content load
        caller.pause("2000");
        lib_Common.bc_APIPublisherSearch(caller, APIName,APIName,param_APIVersionOne);
        //Click API name with specific version 1.0.0
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne + "_PARAM," + "param_APIName_PARAM:" + APIName);
        //waiting for content load
        caller.pause("2000");
        //verify that the overview page contains the create button
        caller.checkElementPresent("Browse_Overview.btn_CreateNewVersion",false,"");
        caller.click("Browse_Overview.btn_CreateNewVersion");
        //Wait for content load
        caller.pause("2000");
        //verify that to version tab has expanded successfully and its contents are available
        caller.checkElementPresent("Browse_Overview.tf_ToVersion",false,"");
        caller.checkElementPresent("Browse_Overview.chk_DefaultVersion",false,"");
        caller.checkElementPresent("Browse_Overview.btn_Done",false,"");
        //Type new version - version two
        caller.type("Browse_Overview.tf_ToVersion",param_APIVersionTwo);
        //Wait for content load
        caller.pause("1000");
        caller.click("Browse_Overview.chk_DefaultVersion");
        //Wait for content load
        caller.pause("1000");
        caller.click("Browse_Overview.btn_Done");
        //Cannot verify the new version added message due to application bug
        //Wait for content load
        caller.pause("2000");
        //Verify redirected to browse page
        caller.checkElementPresent("APIPublisherHome.lnk_Browse",false,"");
        lib_Common.bc_APIPublisherSearch(caller, APIName,APIName,param_APIVersionTwo);
        caller.click("APIPublisherHome.btn_Search");
        //Verify the overall api details in browse page
        caller.checkElementPresent("APIPublisherBrowse.lnk_APINameOverall","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_APIVersionTwo + "_PARAM," + "param_provider_PARAM:" + param_provider + "_PARAM," + "param_numberOfUsers_PARAM:" + param_numberOfUsersZero + "_PARAM," + "param_status_PARAM:" + param_statusCreated,false,"");
        caller.click("APIPublisherBrowse.lnk_APINameOverall","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_APIVersionTwo + "_PARAM," + "param_provider_PARAM:" + param_provider + "_PARAM," + "param_numberOfUsers_PARAM:" + param_numberOfUsersZero + "_PARAM," + "param_status_PARAM:" + param_statusCreated);
        //Wait for content load
        caller.pause("2000");
        //verify the availability of Lifestyle tab
        caller.checkElementPresent("APIPublisherBrowse.btn_Lifecycle",false,"");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //Wait for content load
        caller.pause("2000");
        caller.select("browseLifecycle.ele_ddSelectState",param_statusPublished);
        //Wait for content load
        caller.pause("1000");
        //check weather Propagate Changes To API Gateway is un-checked
        if(caller.checkElementPresent("browseLifecycle.chk_PropagateChangesToAPIGateway")){
        caller.click("browseLifecycle.chk_PropagateChangesToAPIGateway");
        //Wait for content load
        caller.pause("1000");
        }
        caller.click("browseLifecycle.btn_Update");
        caller.checkElementPresent("browseLifecycle.ele_lblUpdateSuccessMessage",false,"");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        lib_Common.bc_StoreLogin(caller, param_storeOneOfTenantOneOrAdmin);
        //Wait for content load
        caller.pause("2000");
        lib_Common.bc_APIStoreSearch(caller, APIName,APIName,param_APIVersionTwo);
        caller.checkElementPresent("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersionTwo);
        if(param_IsProviderTenant.equals("Yes")){
        String var_providerDomain[] = param_provider.split("[@]");
        //Wait for content load
        caller.pause("2000");
        //verify sandbox and production url with and witout version
        caller.checkElementPresent("APIStoreAPIs.ele_lblProductionUrlWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersionTwo,false,"");
        caller.checkElementPresent("APIStoreAPIs.ele_lblProductionDefaultUrl","param_provider_PARAM:" + var_providerDomain[1] + "_PARAM," + "param_APIName_PARAM:" + APIName,false,"");
        caller.checkElementPresent("APIStoreAPIs.ele_lblSandboxUrlWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersionTwo,false,"");
        caller.checkElementPresent("APIStoreAPIs.ele_lblSandboxDefaultUrl","param_provider_PARAM:" + var_providerDomain[1] + "_PARAM," + "param_APIName_PARAM:" + APIName,false,"");
        //verify the API with previous version is available and verify the default url
        lib_Common.bc_APIStoreSearch(caller, APIName,APIName,param_APIVersionOne);
        //verify the  availability of API with older version
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersionOne,false,"");
        caller.click("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersionOne);
        //Wait for content load
        caller.pause("2000");
        //verify sandbox and production url with version and non availability of Default api
        caller.checkElementPresent("APIStoreAPIs.ele_lblProductionUrlWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersionOne,false,"");
        if(caller.checkElementPresent("APIStoreAPIs.ele_lblProductionDefaultUrl","param_provider_PARAM:" +var_providerDomain[1]+"_PARAM"+"param_APIName_PARAM:" + APIName)){
        caller.fail("Default production url is available under API innitial version");
        }
        caller.checkElementPresent("APIStoreAPIs.ele_lblSandboxUrlWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersionOne,false,"");
        if(caller.checkElementPresent("APIStoreAPIs.ele_lblSandboxDefaultUrl","param_provider_PARAM:" + var_providerDomain[1]+"_PARAM"+"param_APIName_PARAM:" + APIName)){
        caller.fail("Default sandbox url is available under API innitial version");
        }
        }
        if(param_IsProviderAdmin.equals("Yes")){
        //Wait for content load
        caller.pause("2000");
        //verify sandbox and production url with and witout version
        caller.checkElementPresent("APIStoreAPIs.ele_lblProductionUrlWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersionTwo,false,"");
        caller.checkElementPresent("APIStoreAPIs.ele_lblProductionDefaultUrl","param_provider_PARAM:" + param_provider + "_PARAM," + "param_APIName_PARAM:" + APIName,false,"");
        caller.checkElementPresent("APIStoreAPIs.ele_lblSandboxUrlWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersionTwo,false,"");
        caller.checkElementPresent("APIStoreAPIs.ele_lblSandboxDefaultUrl","param_provider_PARAM:" + param_provider + "_PARAM," + "param_APIName_PARAM:" + APIName,false,"");
        //verify the API with previous version is available and verify the default url
        lib_Common.bc_APIStoreSearch(caller, APIName,APIName,param_APIVersionOne);
        //verify the  availability of API with older version
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersionOne,false,"");
        caller.click("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersionOne);
        //Wait for content load
        caller.pause("2000");
        //verify sandbox and production url with version and non availability of Default api
        caller.checkElementPresent("APIStoreAPIs.ele_lblProductionUrlWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersionOne,false,"");
        if(caller.checkElementPresent("APIStoreAPIs.ele_lblProductionDefaultUrl","param_provider_PARAM:" +param_provider+"_PARAM"+"param_APIName_PARAM:" + APIName)){
        caller.fail("Default production url is available under API innitial version");
        }
        caller.checkElementPresent("APIStoreAPIs.ele_lblSandboxUrlWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersionOne,false,"");
        if(caller.checkElementPresent("APIStoreAPIs.ele_lblSandboxDefaultUrl","param_provider_PARAM:" + param_provider+"_PARAM"+"param_APIName_PARAM:" + APIName)){
        caller.fail("Default sandbox url is available under API innitial version");
        }
        }
        caller.writeToReport("End Of TC APIM_4");
        lib_Common.bc_DeleteAPI(caller, APIName,param_publisherURL);	
    }
    /**
     *  Business component APIM2_5.
     */
    public final static void APIM2_5(final SeleniumTestBase caller, final String param_APIName, final String param_APIContext, final String param_APIVersionOne, final String param_APIvisibility, final String param_APIImagePath, final String param_TagName, final String param_productionEndpointInitialSection, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_StoreURL, final String param_PublisherURL, final String param_serverNameDomainOne, final String param_storeOneOfTenantOneOrAdmin, final String param_APIVersionTwo, final String param_applicationName, final String param_discription, final String param_IsRequiedThrottlingTier, final String param_throttlingTier, final String param_IsRequiedCallBackURL, final String param_callBackURL, final String param_IsTierTypeChanged, final String param_tiertype, final String param_keyTypeToInvoke, final String param_IsPostExecuted, final String param_buttonNamePost, final String param_postPayloadContext, final String param_postCustomerNameFromPayloadContext, final String param_ResponseCodeTwoHundred, final String param_postResponseHeaders, final String param_IsGetExecuted, final String param_buttonNameGet, final String param_getCustomerName, final String param_getResponseHeaders, final String param_IsPutExecuted, final String param_buttonNamePut, final String param_putCustomerName, final String param_ResponseBodyNoContent, final String param_getCustomerNameForPutVerification, final String param_getResponseHeadersForPutVerification, final String param_IsHeadExecuted, final String param_buttonNameHead, final String param_ResponseHeadersNull, final String param_IsDeleteExecuted, final String param_buttonNameDelete, final String param_deleteResponseHeaders, final String param_getResponseCodeTwoHundredAndFourForDeleteVerification, final String param_statusPublished, final String param_true, final String param_false) throws Exception {
        caller.writeToReport("Start Of TC APIM_5");
        //creation of three different API names
        //genarate api name one
        String var_APINameOne = param_APIName+"_"+caller.generateData("int",4);
        //genarate api name two
        String var_APINameTwo = param_APIName+"_"+caller.generateData("int",4);
        //genarate api name three
        String var_APINameThree = param_APIName+"_"+caller.generateData("int",4);
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_PublisherURL,"2000");
        //Creation of API
        //creating api with api name one
        lib_Common.bc_APIPublisher_AddAPI_DesignPhase_WitoutAutoGenAPINameAndContext(caller, var_APINameOne,var_APINameOne+"/"+"{version}"+"/"+"test",param_APIVersionOne,param_APIvisibility,param_APIImagePath,param_TagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpointInitialSection,"no","","no","");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, "no","no","");
        lib_Common.bc_APIPublisherSearch(caller, var_APINameOne,var_APINameOne,param_APIVersionOne);
        //***create new api version for api1
        //Click API name with specific version
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne + "_PARAM," + "param_APIName_PARAM:" + var_APINameOne);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_Overview");
        //waiting for content load
        caller.pause("2000");
        //verify that the overview page contains the create button
        caller.checkElementPresent("Browse_Overview.btn_CreateNewVersion",false,"");
        caller.click("Browse_Overview.btn_CreateNewVersion");
        //Wait for content load
        caller.pause("2000");
        //verify that to version tab has expanded successfully and its contents are available
        caller.checkElementPresent("Browse_Overview.tf_ToVersion",false,"");
        caller.checkElementPresent("Browse_Overview.chk_DefaultVersion",false,"");
        caller.checkElementPresent("Browse_Overview.btn_Done",false,"");
        //Type new version
        caller.type("Browse_Overview.tf_ToVersion",param_APIVersionTwo);
        //Wait for content load
        caller.pause("1000");
        caller.click("Browse_Overview.chk_DefaultVersion");
        //Wait for content load
        caller.pause("1000");
        caller.click("Browse_Overview.btn_Done");
        //Wait for content load
        caller.pause("2000");
        lib_Common.bc_APIPublisherSearch(caller, var_APINameOne,var_APINameOne,param_APIVersionTwo);
        caller.click("APIPublisherHome.ele_lblApiNamewithVersion","param_version_PARAM:" + param_APIVersionTwo + "_PARAM," + "param_ApiName_PARAM:" + var_APINameOne);
        //verify the availability of Lifestyle tab
        caller.checkElementPresent("APIPublisherBrowse.btn_Lifecycle",false,"");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //Wait for content load
        caller.pause("2000");
        caller.select("browseLifecycle.ele_ddSelectState",param_statusPublished);
        //Wait for content load
        caller.pause("1000");
        if(caller.checkElementPresent("browseLifecycle.chk_PropagateChangesToAPIGatewayTrueOrFalse","param_TrueOrFalse_PARAM:" + param_false)){
        caller.click("browseLifecycle.chk_PropagateChangesToAPIGatewayTrueOrFalse","param_TrueOrFalse_PARAM:" + param_false);
        //Wait for content load
        caller.pause("1000");
        }
        if(caller.checkElementPresent("browseLifecycle.chk_deprecateOldVersionsTrueOrFalse","param_TrueOrFalse_PARAM:" + param_true)){
        caller.click("browseLifecycle.chk_deprecateOldVersionsTrueOrFalse","param_TrueOrFalse_PARAM:" + param_true);
        //Wait for content load
        caller.pause("1000");
        }
        if(caller.checkElementPresent("browseLifecycle.chk_requireResubscriptionTrueOrFalse","param_TrueOrFalse_PARAM:" + param_true)){
        caller.click("browseLifecycle.chk_requireResubscriptionTrueOrFalse","param_TrueOrFalse_PARAM:" + param_true);
        //Wait for content load`
        caller.pause("1000");
        }
        caller.click("browseLifecycle.btn_Update");
        //verify the success message
        caller.checkElementPresent("browseLifecycle.ele_lblUpdateSuccessMessage",false,"");
        //Wait for content load
        caller.pause("1000");
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherHome.lnk_Browse");
        //creating api with api name two
        String var_version = "{version}";
        lib_Common.bc_APIPublisher_AddAPI_DesignPhase_WitoutAutoGenAPINameAndContext(caller, var_APINameTwo,var_version+"/"+var_APINameTwo,param_APIVersionOne,param_APIvisibility,param_APIImagePath,param_TagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpointInitialSection,"no","","no","");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, "no","no","");
        lib_Common.bc_APIPublisherSearch(caller, var_APINameTwo,var_APINameTwo,param_APIVersionOne);
        //*****************************************************create new api version for api2
        //Click API name with specific version
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + var_APINameTwo + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne + "_PARAM," + "param_APIName_PARAM:" + var_APINameTwo);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_Overview");
        //waiting for content load
        caller.pause("2000");
        //verify that the overview page contains the create button
        caller.checkElementPresent("Browse_Overview.btn_CreateNewVersion",false,"");
        caller.click("Browse_Overview.btn_CreateNewVersion");
        //Wait for content load
        caller.pause("2000");
        //verify that to version tab has expanded successfully and its contents are available
        caller.checkElementPresent("Browse_Overview.tf_ToVersion",false,"");
        caller.checkElementPresent("Browse_Overview.chk_DefaultVersion",false,"");
        caller.checkElementPresent("Browse_Overview.btn_Done",false,"");
        //Type new version
        caller.type("Browse_Overview.tf_ToVersion",param_APIVersionTwo);
        //Wait for content load
        caller.pause("1000");
        caller.click("Browse_Overview.chk_DefaultVersion");
        //Wait for content load
        caller.pause("1000");
        caller.click("Browse_Overview.btn_Done");
        //Wait for content load
        caller.pause("2000");
        lib_Common.bc_APIPublisherSearch(caller, var_APINameTwo,var_APINameTwo,param_APIVersionTwo);
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherHome.ele_lblApiNamewithVersion","param_version_PARAM:" + param_APIVersionTwo + "_PARAM," + "param_ApiName_PARAM:" + var_APINameTwo);
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_Edit");
        //wait for content load
        caller.pause("3000");
        //verify that the next implement button has appeared
        caller.checkElementPresent("APIPublisherBrowse.btn_NextImplement",false,"");
        caller.click("APIPublisherBrowse.btn_NextImplement");
        //wait for content load
        caller.pause("4000");
        //verify that the next button has appeared
        caller.checkElementPresent("APIPublisherBrowse.btn_NextManage",false,"");
        caller.click("APIPublisherBrowse.btn_NextManage");
        //wait for content load
        caller.pause("4000");
        //verify that the save button has appeared
        caller.checkElementPresent("APIPublisherBrowse.btn_SaveAndPublish",false,"");
        caller.click("APIPublisherBrowse.btn_SaveAndPublish");
        //wait for content load
        caller.pause("3000");
        //verify that the popup has appeared
        caller.checkElementPresent("APIPublisherBrowse.btn_Close",false,"");
        caller.click("APIPublisherBrowse.btn_Close");
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherHome.lnk_Browse");
        //*****************************************************
        //creating api with api name three
        lib_Common.bc_APIPublisher_AddAPI_DesignPhase_WitoutAutoGenAPINameAndContext(caller, var_APINameThree,var_APINameThree+"/"+"test"+"/"+"{version}",param_APIVersionOne,param_APIvisibility,param_APIImagePath,param_TagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpointInitialSection,"no","","no","");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, "no","no","");
        //*****************************************************create new api version for api3
        lib_Common.bc_APIPublisherSearch(caller, var_APINameThree,var_APINameThree,param_APIVersionOne);
        //Click API name with specific version
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + var_APINameThree + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne + "_PARAM," + "param_APIName_PARAM:" + var_APINameThree);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_Overview");
        //waiting for content load
        caller.pause("2000");
        //verify that the overview page contains the create button
        caller.checkElementPresent("Browse_Overview.btn_CreateNewVersion",false,"");
        caller.click("Browse_Overview.btn_CreateNewVersion");
        //Wait for content load
        caller.pause("2000");
        //verify that to version tab has expanded successfully and its contents are available
        caller.checkElementPresent("Browse_Overview.tf_ToVersion",false,"");
        caller.checkElementPresent("Browse_Overview.chk_DefaultVersion",false,"");
        caller.checkElementPresent("Browse_Overview.btn_Done",false,"");
        //Type new version
        caller.type("Browse_Overview.tf_ToVersion",param_APIVersionTwo);
        //Wait for content load
        caller.pause("1000");
        caller.click("Browse_Overview.chk_DefaultVersion");
        //Wait for content load
        caller.pause("1000");
        caller.click("Browse_Overview.btn_Done");
        //Wait for content load
        caller.pause("2000");
        lib_Common.bc_APIPublisherSearch(caller, var_APINameThree,var_APINameThree,param_APIVersionTwo);
        caller.click("APIPublisherHome.ele_lblApiNamewithVersion","param_version_PARAM:" + param_APIVersionTwo + "_PARAM," + "param_ApiName_PARAM:" + var_APINameThree);
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_Edit");
        //wait for content load
        caller.pause("3000");
        //verify that the next implement button has appeared
        caller.checkElementPresent("APIPublisherBrowse.btn_NextImplement",false,"");
        caller.click("APIPublisherBrowse.btn_NextImplement");
        //wait for content load
        caller.pause("4000");
        //verify that the next button has appeared
        caller.checkElementPresent("APIPublisherBrowse.btn_NextManage",false,"");
        caller.click("APIPublisherBrowse.btn_NextManage");
        //wait for content load
        caller.pause("4000");
        //verify that the save button has appeared
        caller.checkElementPresent("APIPublisherBrowse.btn_SaveAndPublish",false,"");
        caller.click("APIPublisherBrowse.btn_SaveAndPublish");
        //wait for content load
        caller.pause("3000");
        //verify that the popup has appeared
        caller.checkElementPresent("APIPublisherBrowse.btn_Close",false,"");
        caller.click("APIPublisherBrowse.btn_Close");
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherHome.lnk_Browse");
        //*****************************************************
        //End of creation of API
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_StoreURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        lib_Common.bc_APIStoreSearch(caller, var_APINameOne,var_APINameOne,param_APIVersionTwo);
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersionTwo,false,"");
        lib_Common.bc_APIStoreSearch(caller, var_APINameTwo,var_APINameTwo,param_APIVersionTwo);
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + var_APINameTwo + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersionTwo,false,"");
        lib_Common.bc_APIStoreSearch(caller, var_APINameThree,var_APINameThree,param_APIVersionTwo);
        //wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + var_APINameThree + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersionTwo,false,"");
        lib_Common.bc_APIStoreSearch(caller, var_APINameOne,var_APINameOne,param_APIVersionOne);
        caller.click("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersionOne);
        //wait for content load
        caller.pause("2000");
        //verify the availability of api1 url
        caller.checkElementPresent("APIStoreAPIs.ele_lblProductionUrlGeneral","param_rearUrlPattern_PARAM:" + var_APINameOne+"/"+param_APIVersionOne+"/test",false,"");
        //verify the availability of default api1 url
        lib_Common.bc_APIStoreSearch(caller, var_APINameTwo,var_APINameTwo,param_APIVersionTwo);
        caller.click("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + var_APINameTwo + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersionTwo);
        //wait for content load
        caller.pause("2000");
        //verify the availability of api2 url
        caller.checkElementPresent("APIStoreAPIs.ele_lblProductionUrlGeneral","param_rearUrlPattern_PARAM:" + param_APIVersionTwo+"/"+var_APINameTwo,false,"");
        //verify the availability of default api2 url
        lib_Common.bc_APIStoreSearch(caller, var_APINameThree,var_APINameThree,param_APIVersionTwo);
        caller.click("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + var_APINameThree + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersionTwo);
        //wait for content load
        caller.pause("2000");
        //verify the availability of api3 url
        caller.checkElementPresent("APIStoreAPIs.ele_lblProductionUrlGeneral","param_rearUrlPattern_PARAM:" + var_APINameThree+"/test/"+param_APIVersionTwo,false,"");
        //verify the availability of default api3 url
        caller.checkElementPresent("APIStoreAPIs.ele_lblProductionUrlGeneral","param_rearUrlPattern_PARAM:" + var_APINameThree+"/test",false,"");
        caller.click("APIStoreHome.lnk_APIs");
        //wait for content load
        caller.pause("2000");
        //autogen app name
        String varAppName = param_applicationName+"_"+caller.generateData("int",3);
        lib_Common.bc_APIStore_CreateApplication(caller, varAppName,param_discription,param_IsRequiedThrottlingTier,param_throttlingTier,param_IsRequiedCallBackURL,param_callBackURL);
        lib_Common.bc_APIStore_APIs_SubscribeAPI(caller, var_APINameTwo,param_APIVersionTwo,varAppName,param_IsTierTypeChanged,param_tiertype);
        lib_Common.bc_APIStore_MySubscription(caller, varAppName,var_APINameTwo,param_APIVersionTwo);
        lib_Common.bc_APIStore_InvokeAPI(caller, var_APINameTwo,param_APIVersionTwo,varAppName,param_keyTypeToInvoke,param_IsPostExecuted,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_ResponseCodeTwoHundred,param_postResponseHeaders,param_IsGetExecuted,param_buttonNameGet,param_getCustomerName,param_ResponseCodeTwoHundred,param_getResponseHeaders,param_IsPutExecuted,param_buttonNamePut,param_putCustomerName,param_ResponseBodyNoContent,param_ResponseCodeTwoHundred,param_buttonNameGet,param_getCustomerNameForPutVerification,param_ResponseCodeTwoHundred,param_getResponseHeadersForPutVerification,param_IsHeadExecuted,param_buttonNameHead,param_ResponseBodyNoContent,param_ResponseCodeTwoHundred,param_ResponseHeadersNull,param_IsDeleteExecuted,param_buttonNameDelete,param_ResponseBodyNoContent,param_ResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGet,param_ResponseBodyNoContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_ResponseHeadersNull);
        caller.writeToReport("End Of TC APIM_5");	
    }
    /**
     *  Business component APIM2_527.
     */
    public final static void APIM2_527(final SeleniumTestBase caller, final String param_APIName, final String paramAPIContest, final String param_tag, final String param_ProductionEndPontJaxRS, final String param_TenantOrAdmin, final String param_storeURL, final String param_Description) throws Exception {
        //APIM2-527:  Create API and Add Various Tags
        caller.writeToReport("Start  Executing APIM2-527");
        //create API
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Type API Name
        String varAPINameOne = param_APIName+caller.generateData("int",2);
        caller.type("APIPublisherAdd.tf_APIName",varAPINameOne);
        //Store API name in to variables
        caller.store("keyAPIName","String",varAPINameOne);
        //auto generate contest
        String APIcontest = paramAPIContest+caller.generateData("int",2);
        caller.store("keyAPIcontest","String",APIcontest);
        //Type API contest
        caller.type("APIPublisherAdd.tf_APIContext",APIcontest);
        //Setting variable for API version
        String APIversion = "v1.0."+caller.generateData("int",1);
        //Type API Version
        caller.type("APIPublisherAdd.tf_APIVersion",APIversion);
        //waiting for content load
        caller.pause("2000");
        //Type API Description
        caller.type("APIPublisherAdd.tf_Discription",param_Description);
        //waiting for content load
        caller.pause("2000");
        String varAPItagOne = param_tag+caller.generateData("int",3);
        caller.store("keyAPItagOne","String",varAPItagOne);
        //Type API tag One
        caller.type("APIPublisherAdd.tf_Tags",varAPItagOne);
        caller.pause("2000");
        caller.fireEvent("KEY%key=\n","3000");
        String varAPItagTwo = param_tag+caller.generateData("int",3);
        caller.store("keyAPItagTwo","String",varAPItagTwo);
        //Type API tag two
        caller.type("APIPublisherAdd.tf_Tags",varAPItagTwo);
        caller.pause("2000");
        caller.fireEvent("KEY%key=\n","3000");
        String varAPItagThree = param_tag+caller.generateData("int",3);
        //Type API tag Three
        caller.type("APIPublisherAdd.tf_Tags",varAPItagThree);
        caller.pause("2000");
        caller.fireEvent("KEY%key=\n","3000");
        caller.click("APIPublisherAdd.btn_Save");
        //wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Yes");
        //waite for content load
        caller.pause("5000");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //API Manage Section
        caller.pause("8000");
        //Go to browse page
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",varAPINameOne);
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameOne);
        caller.click("APIPublisherBrowse.lnk_Edit");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        caller.click("APIPublisherBrowse.ele_lblManagedAPI");
        caller.type("APIPublisherBrowse.tf_ProductionEndPoint",param_ProductionEndPontJaxRS);
        caller.click("APIPublisherBrowse.btn_SaveManagedAPI");
        //waiting for content load
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_NextManage");
        //waiting for content load
        caller.pause("2000");
        lib_Common.bc_SelectTiers(caller);
        caller.click("APIPublisherBrowse.btn_SaveAndPublish");
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_Close");
        caller.pause("4000");
        //Navigate to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Select the domain
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //waiting for content load
        caller.pause("3000");
        //Verify The Added Tags in the Store
        caller.checkElementPresent("APIStoreAPIs.lnk_tags","tags_PARAM:" + varAPItagOne,false,"");
        //waiting for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreAPIs.lnk_tags","tags_PARAM:" + varAPItagTwo,false,"");
        //waiting for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreAPIs.lnk_tags","tags_PARAM:" + varAPItagThree,false,"");
        //waiting for content load
        caller.pause("2000");
        //Click on the each tag
        caller.click("APIStoreAPIs.lnk_tags","tags_PARAM:" + varAPItagOne);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_tags","tags_PARAM:" + varAPItagTwo);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_tags","tags_PARAM:" + varAPItagThree);
        //waiting for content load
        caller.pause("2000");
        //Login to API Store
        lib_Common.bc_StoreLogin(caller, param_TenantOrAdmin);
        //Click on the each tag  even after logging into the Store
        caller.click("APIStoreAPIs.lnk_tags","tags_PARAM:" + varAPItagOne);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_tags","tags_PARAM:" + varAPItagTwo);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.lnk_tags","tags_PARAM:" + varAPItagThree);
        //waiting for content load
        caller.pause("2000");
        //logout from the store
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //waiting for content load
        caller.pause("2000");
        caller.writeToReport("End of Execution APIM2-527");	
    }
    /**
     *  Business component APIM2_6.
     */
    public final static void APIM2_6(final SeleniumTestBase caller, final String param_APIName, final String param_APIVersionOne, final String param_APIVersionThree, final String param_storeURL, final String param_serverNameDomainOne, final String param_storeOneOfTenantOneOrAdmin, final String param_statusPublished, final String param_publisherURL, final String param_provider, final String param_numberOfUsersOne, final String param_statusDepriciated, final String param_numberOfUsersZero, final String param_discription, final String param_keyTypeToInvoke, final String param_IsPostExecuted, final String param_buttonNamePost, final String param_postPayloadContext, final String param_postCustomerNameFromPayloadContext, final String param_ResponseCodeTwoHundred, final String param_postResponseHeaders, final String param_IsGetExecuted, final String param_buttonNameGet, final String param_getCustomerName, final String param_getResponseHeaders, final String param_IsPutExecuted, final String param_buttonNamePut, final String param_putCustomerName, final String param_ResponseBodyNoContent, final String param_buttonNameGetForPutVerification, final String param_getCustomerNameForPutVerification, final String param_getResponseHeadersForPutVerification, final String param_IsHeadExecuted, final String param_buttonNameHead, final String param_ResponseHeadersNull, final String param_IsDeleteExecuted, final String param_buttonNameDelete, final String param_deleteResponseHeaders, final String param_buttonNameGetForDeleteVerification, final String param_getResponseCodeTwoHundredAndFourForDeleteVerification, final String param_true, final String param_false, final String param_applicationName, final String param_APIContext, final String param_APIVisibility, final String param_APIImageName, final String param_TagName, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_productionEndpoint, final String param_sandboxEndpoint, final String param_yes, final String param_no, final String param_applicationDescription, final String param_publisherOneOfTenantOne) throws Exception {
        caller.writeToReport("Start Of TC APIM_6");
        //-------------------------------------------------------Start of precondition
        //Creation of the parent API
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        lib_Common.bc_PublisherLogin(caller, param_publisherURL,param_publisherOneOfTenantOne);
        lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke(caller, param_APIName,param_APIContext,param_APIVersionOne,param_APIVisibility,param_APIImageName,param_TagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        String var_APINameDesign = caller.retrieveString("key_APINameDesign");
        caller.store("key_APINameParentAPI","String",var_APINameDesign);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_yes,param_sandboxEndpoint,param_no,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_yes,param_no,"");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        lib_Common.bc_StoreLogin(caller, param_storeOneOfTenantOneOrAdmin);
        //Wait for content load
        caller.pause("2000");
        //Store a specific application name for the test case
        String varStoreApplicationName = param_applicationName+caller.generateData("int",3);
        caller.store("key_ApplicationNameParentAPI","String",varStoreApplicationName);
        //Create a new application to be subscribed by the original API
        lib_Common.bc_APIStore_CreateApplication(caller, varStoreApplicationName,param_applicationDescription,param_no,"",param_no,"");
        lib_Common.bc_APIStore_APIs_SubscribeAPI(caller, var_APINameDesign,param_APIVersionOne,varStoreApplicationName,param_no,"");
        //------------------------------------------------------------------------
        //**********************************************
        //make a copy of the parent api
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",var_APINameDesign);
        //Wait for content load
        caller.pause("2000");
        caller.click("APIPublisherHome.btn_Search");
        //Wait for content load
        caller.pause("2000");
        //Click API name with specific version
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + var_APINameDesign + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne + "_PARAM," + "param_APIName_PARAM:" + var_APINameDesign);
        //waiting for content load
        caller.pause("2000");
        //verify that the overview page contains the create button
        caller.checkElementPresent("Browse_Overview.btn_CreateNewVersion",false,"");
        caller.click("Browse_Overview.btn_CreateNewVersion");
        //Wait for content load
        caller.pause("2000");
        //verify that to version tab has expanded successfully and its contents are available
        caller.checkElementPresent("Browse_Overview.tf_ToVersion",false,"");
        caller.checkElementPresent("Browse_Overview.chk_DefaultVersion",false,"");
        caller.checkElementPresent("Browse_Overview.btn_Done",false,"");
        //Type new version
        caller.type("Browse_Overview.tf_ToVersion",param_APIVersionThree);
        //Wait for content load
        caller.pause("1000");
        caller.click("Browse_Overview.chk_DefaultVersion");
        //Wait for content load
        caller.pause("1000");
        caller.click("Browse_Overview.btn_Done");
        //Wait for content load
        caller.pause("2000");
        //Verify redirected to browse page
        caller.checkElementPresent("APIPublisherHome.lnk_Browse",false,"");
        caller.click("APIPublisherHome.lnk_Browse");
        //Click API name with specific new version
        caller.type("APIPublisherHome.tf_APISearch",var_APINameDesign);
        //Wait for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.btn_Search");
        //Wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + var_APINameDesign + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionThree + "_PARAM," + "param_APIName_PARAM:" + var_APINameDesign,false,"");
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + var_APINameDesign + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionThree + "_PARAM," + "param_APIName_PARAM:" + var_APINameDesign);
        //Wait for content load
        caller.pause("2000");
        //verify the availability of Lifestyle tab
        caller.checkElementPresent("APIPublisherBrowse.btn_Lifecycle",false,"");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //Wait for content load
        caller.pause("2000");
        caller.select("browseLifecycle.ele_ddSelectState",param_statusPublished);
        //Wait for content load
        caller.pause("1000");
        if(!caller.checkElementPresent("browseLifecycle.chk_PropagateChangesToAPIGatewayTrueOrFalse","param_TrueOrFalse_PARAM:" + param_true)){
        caller.click("browseLifecycle.chk_PropagateChangesToAPIGatewayTrueOrFalse","param_TrueOrFalse_PARAM:" + param_false);
        //Wait for content load
        caller.pause("1000");
        }
        if(caller.checkElementPresent("browseLifecycle.chk_requireResubscriptionTrueOrFalse","param_TrueOrFalse_PARAM:" + param_true)){
        caller.click("browseLifecycle.chk_requireResubscriptionTrueOrFalse","param_TrueOrFalse_PARAM:" + param_true);
        //Wait for content load
        caller.pause("1000");
        }
        if(!caller.checkElementPresent("browseLifecycle.chk_deprecateOldVersionsTrueOrFalse","param_TrueOrFalse_PARAM:" + param_true)){
        caller.click("browseLifecycle.chk_deprecateOldVersionsTrueOrFalse","param_TrueOrFalse_PARAM:" + param_false);
        //Wait for content load
        caller.pause("1000");
        }
        caller.click("browseLifecycle.btn_Update");
        //verify the success message
        caller.checkElementPresent("browseLifecycle.ele_lblUpdateSuccessMessage",false,"");
        //Wait for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",var_APINameDesign);
        //Wait for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.btn_Search");
        //Wait for content load
        caller.pause("2000");
        //verify that the older version of API has been DEPRICIATED and the copy gets PUBLISHED
        caller.checkElementPresent("APIPublisherBrowse.lnk_APINameOverall","param_APIName_PARAM:" + var_APINameDesign + "_PARAM," + "param_version_PARAM:" + param_APIVersionOne + "_PARAM," + "param_provider_PARAM:" + param_provider + "_PARAM," + "param_numberOfUsers_PARAM:" + param_numberOfUsersOne + "_PARAM," + "param_status_PARAM:" + param_statusDepriciated,false,"");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APINameOverall","param_APIName_PARAM:" + var_APINameDesign + "_PARAM," + "param_version_PARAM:" + param_APIVersionThree + "_PARAM," + "param_provider_PARAM:" + param_provider + "_PARAM," + "param_numberOfUsers_PARAM:" + param_numberOfUsersOne + "_PARAM," + "param_status_PARAM:" + param_statusPublished,false,"");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        //Wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        //Wait for content load
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",var_APINameDesign);
        //Wait for content load
        caller.pause("1000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + var_APINameDesign + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersionThree,false,"");
        //Wait for content load
        caller.pause("1000");
        //Wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_MySubcription");
        //Wait for content load
        caller.pause("1000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",varStoreApplicationName);
        //verify the landed page is my subscriptions and the original API is Depriciated and the copy is published
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIs",false,"");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsDeprecated","param_APIName_PARAM:" + var_APINameDesign + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne,false,"");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsPublished","param_APIName_PARAM:" + var_APINameDesign + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionThree,false,"");
        //Invoke the original API
        lib_Common.bc_APIStore_MySubscription(caller, varStoreApplicationName,var_APINameDesign,param_APIVersionOne);
        lib_Common.bc_APIStore_InvokeAPI(caller, var_APINameDesign,param_APIVersionOne,varStoreApplicationName,param_keyTypeToInvoke,param_IsPostExecuted,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_ResponseCodeTwoHundred,param_postResponseHeaders,param_IsGetExecuted,param_buttonNameGet,param_getCustomerName,param_ResponseCodeTwoHundred,param_getResponseHeaders,param_IsPutExecuted,param_buttonNamePut,param_putCustomerName,param_ResponseBodyNoContent,param_ResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_ResponseCodeTwoHundred,param_getResponseHeadersForPutVerification,param_IsHeadExecuted,param_buttonNameHead,param_ResponseBodyNoContent,param_ResponseCodeTwoHundred,param_ResponseHeadersNull,param_IsDeleteExecuted,param_buttonNameDelete,param_ResponseBodyNoContent,param_ResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_ResponseBodyNoContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_ResponseHeadersNull);
        //Invoke the copy
        lib_Common.bc_APIStore_MySubscription(caller, varStoreApplicationName,var_APINameDesign,param_APIVersionThree);
        //Wait for content load
        caller.pause("1000");
        lib_Common.bc_APIStore_InvokeAPI(caller, var_APINameDesign,param_APIVersionThree,varStoreApplicationName,param_keyTypeToInvoke,param_IsPostExecuted,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_ResponseCodeTwoHundred,param_postResponseHeaders,param_IsGetExecuted,param_buttonNameGet,param_getCustomerName,param_ResponseCodeTwoHundred,param_getResponseHeaders,param_IsPutExecuted,param_buttonNamePut,param_putCustomerName,param_ResponseBodyNoContent,param_ResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_ResponseCodeTwoHundred,param_getResponseHeadersForPutVerification,param_IsHeadExecuted,param_buttonNameHead,param_ResponseBodyNoContent,param_ResponseCodeTwoHundred,param_ResponseHeadersNull,param_IsDeleteExecuted,param_buttonNameDelete,param_ResponseBodyNoContent,param_ResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_ResponseBodyNoContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_ResponseHeadersNull);
        caller.writeToReport("End Of TC APIM_6");	
    }
    /**
     *  Business component APIM2_528.
     */
    public final static void APIM2_528(final SeleniumTestBase caller, final String param_APIName, final String paramAPIContest, final String param_tag, final String param_ProductionEndPontJaxRS, final String param_TenantOrAdmin, final String param_storeURL, final String param_Description, final String param_publisherURL) throws Exception {
        //APIM2-528:  To ensure that it is possible to assign the same tag to multiple APIs and search them via that tag
        caller.writeToReport("Start  Executing APIM2-528");
        //Navigate to Publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        //create API
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Type API Name
        String varAPINameTwo = param_APIName+caller.generateData("int",2);
        caller.type("APIPublisherAdd.tf_APIName",varAPINameTwo);
        //Store API name in to variables
        caller.store("keyAPINameTwo","String",varAPINameTwo);
        //auto generate contest
        String APIcontest = paramAPIContest+caller.generateData("int",2);
        caller.store("keyAPIcontest","String",APIcontest);
        //Type API contest
        caller.type("APIPublisherAdd.tf_APIContext",APIcontest);
        //Setting variable for API version
        String APIversion = "v1.0."+caller.generateData("int",1);
        //Type API Version
        caller.type("APIPublisherAdd.tf_APIVersion",APIversion);
        //waiting for content load
        caller.pause("2000");
        //Type API Description
        caller.type("APIPublisherAdd.tf_Discription",param_Description);
        //waiting for content load
        caller.pause("2000");
        String varAPItagOnex = caller.retrieveString("keyAPItagOne");
        //Type API tag One
        caller.type("APIPublisherAdd.tf_Tags",varAPItagOnex);
        caller.pause("2000");
        caller.fireEvent("KEY%key=\n","3000");
        String APItagTwo = param_tag+caller.generateData("int",3);
        //Type API tag two
        caller.type("APIPublisherAdd.tf_Tags",APItagTwo);
        caller.pause("2000");
        caller.fireEvent("KEY%key=\n","3000");
        String APItagThree = param_tag+caller.generateData("int",3);
        //Type API tag Three
        caller.type("APIPublisherAdd.tf_Tags",APItagThree);
        caller.pause("2000");
        caller.fireEvent("KEY%key=\n","3000");
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherAdd.btn_Save");
        //wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Yes");
        //waite for content load
        caller.pause("5000");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //API Manage Section
        caller.pause("8000");
        //Go to browse page
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameTwo);
        caller.click("APIPublisherBrowse.lnk_Edit");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        caller.click("APIPublisherBrowse.ele_lblManagedAPI");
        caller.type("APIPublisherBrowse.tf_ProductionEndPoint",param_ProductionEndPontJaxRS);
        caller.click("APIPublisherBrowse.btn_SaveManagedAPI");
        //waiting for content load
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_NextManage");
        //waiting for content load
        caller.pause("2000");
        lib_Common.bc_SelectTiers(caller);
        caller.click("APIPublisherBrowse.btn_SaveAndPublish");
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_Close");
        caller.pause("4000");
        //Navigate to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Select the domain
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //waiting for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreAPIs.lnk_tags","tags_PARAM:" + varAPItagOnex,false,"");
        caller.click("APIStoreAPIs.lnk_tags","tags_PARAM:" + varAPItagOnex);
        //waiting for content load
        caller.pause("2000");
        //Login in to the API store as a Subscriber user
        lib_Common.bc_StoreLogin(caller, param_TenantOrAdmin);
        caller.checkElementPresent("APIStoreAPIs.lnk_tags","tags_PARAM:" + varAPItagOnex,false,"");
        caller.click("APIStoreAPIs.lnk_tags","tags_PARAM:" + varAPItagOnex);
        //waiting for content load
        caller.pause("2000");
        //logout from the store
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //waiting for content load
        caller.pause("2000");
        caller.writeToReport("End of Execution APIM2-528");	
    }
    /**
     *  Business component APIM2_7.
     */
    public final static void APIM2_7(final SeleniumTestBase caller, final String param_APIName, final String param_applicationName, final String param_APIVersionOne, final String param_APIVersionFour, final String param_statusPublished, final String param_storeURL, final String param_publisherURL, final String param_serverNameDomainOne, final String param_storeOneOfTenantOneOrAdmin, final String param_provider, final String param_storeApplicationName, final String param_discriptionForApplication, final String param_keyTypeToInvoke, final String param_IsPostExecuted, final String param_buttonNamePost, final String param_postPayloadContext, final String param_postCustomerNameFromPayloadContext, final String param_responseCodeTwoHundred, final String param_postResponseHeaders, final String param_IsGetExecuted, final String param_buttonNameGet, final String param_getCustomerName, final String param_getResponseHeaders, final String param_IsPutExecuted, final String param_buttonNamePut, final String param_putCustomerName, final String param_responseBodyNoContent, final String param_getCustomerNameForPutVerification, final String param_getResponseHeadersForPutVerification, final String param_IsHeadExecuted, final String param_buttonNameHead, final String param_responseHeadersNull, final String param_IsDeleteExecuted, final String param_buttonNameDelete, final String param_deleteResponseHeaders, final String param_getResponseCodeTwoHundredAndFourForDeleteVerification, final String param_true, final String param_false) throws Exception {
        caller.writeToReport("Start Of TC APIM_7");
        //Old api subscribed to an application
        //Store a specific application name for the test case with api of version four
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",param_APIName);
        //Wait for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.btn_Search");
        //Wait for content load
        caller.pause("2000");
        //Verify redirected to browse page
        caller.checkElementPresent("APIPublisherHome.lnk_Browse",false,"");
        //Click API name with specific new version
        caller.checkElementPresent("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne + "_PARAM," + "param_APIName_PARAM:" + param_APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne + "_PARAM," + "param_APIName_PARAM:" + param_APIName);
        //Wait for content load
        caller.pause("2000");
        //verify the availability of Lifestyle tab
        caller.checkElementPresent("APIPublisherBrowse.btn_Lifecycle",false,"");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //Wait for content load
        caller.pause("2000");
        caller.select("browseLifecycle.ele_ddSelectState",param_statusPublished);
        //Wait for content load
        caller.pause("2000");
        caller.click("browseLifecycle.btn_Update");
        //verify the success message
        caller.checkElementPresent("browseLifecycle.ele_lblUpdateSuccessMessage",false,"");
        //Wait for content load
        caller.pause("2000");
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",param_APIName);
        //Wait for content load
        caller.pause("2000");
        caller.click("APIPublisherHome.btn_Search");
        //Wait for content load
        caller.pause("2000");
        //Click API name with specific version
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne + "_PARAM," + "param_APIName_PARAM:" + param_APIName);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_Overview");
        //waiting for content load
        caller.pause("2000");
        //verify that the overview page contains the create button
        caller.checkElementPresent("Browse_Overview.btn_CreateNewVersion",false,"");
        caller.click("Browse_Overview.btn_CreateNewVersion");
        //Wait for content load
        caller.pause("2000");
        //verify that to version tab has expanded successfully and its contents are available
        caller.checkElementPresent("Browse_Overview.tf_ToVersion",false,"");
        caller.checkElementPresent("Browse_Overview.chk_DefaultVersion",false,"");
        caller.checkElementPresent("Browse_Overview.btn_Done",false,"");
        //Type new version
        caller.type("Browse_Overview.tf_ToVersion",param_APIVersionFour);
        //Wait for content load
        caller.pause("1000");
        caller.click("Browse_Overview.chk_DefaultVersion");
        //Wait for content load
        caller.pause("1000");
        caller.click("Browse_Overview.btn_Done");
        //Wait for content load
        caller.pause("2000");
        //Verify redirected to browse page
        caller.checkElementPresent("APIPublisherHome.lnk_Browse",false,"");
        caller.type("APIPublisherHome.tf_APISearch",param_APIName);
        //Wait for content load
        caller.pause("2000");
        caller.click("APIPublisherHome.btn_Search");
        //Wait for content load
        caller.pause("2000");
        //Click API name with specific new version
        caller.checkElementPresent("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionFour + "_PARAM," + "param_APIName_PARAM:" + param_APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionFour + "_PARAM," + "param_APIName_PARAM:" + param_APIName);
        //Wait for content load
        caller.pause("2000");
        //verify the availability of Lifestyle tab
        caller.checkElementPresent("APIPublisherBrowse.btn_Lifecycle",false,"");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //Wait for content load
        caller.pause("2000");
        //Wait for content load
        caller.pause("2000");
        caller.select("browseLifecycle.ele_ddSelectState",param_statusPublished);
        //Wait for content load
        caller.pause("1000");
        //check weather Propagate Changes To API Gateway is checked
        if(!caller.checkElementPresent("browseLifecycle.chk_PropagateChangesToAPIGatewayTrueOrFalse","param_TrueOrFalse_PARAM:" + param_true)){
        caller.click("browseLifecycle.chk_PropagateChangesToAPIGatewayTrueOrFalse","param_TrueOrFalse_PARAM:" + param_false);
        //Wait for content load
        caller.pause("1000");
        }
        if(!caller.checkElementPresent("browseLifecycle.chk_requireResubscriptionTrueOrFalse","param_TrueOrFalse_PARAM:" + param_true)){
        caller.click("browseLifecycle.chk_requireResubscriptionTrueOrFalse","param_TrueOrFalse_PARAM:" + param_false);
        //Wait for content load
        caller.pause("1000");
        }
        if(caller.checkElementPresent("browseLifecycle.chk_deprecateOldVersionsTrueOrFalse","param_TrueOrFalse_PARAM:" + param_true)){
        caller.click("browseLifecycle.chk_deprecateOldVersionsTrueOrFalse","param_TrueOrFalse_PARAM:" + param_true);
        //Wait for content load
        caller.pause("1000");
        }
        caller.click("browseLifecycle.btn_Update");
        //verify the success message
        caller.checkElementPresent("browseLifecycle.ele_lblUpdateSuccessMessage",false,"");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        /*
        Call
         businessComponent=lib_Common.bc_StoreLogin
         param_TenanrOrAdmin=@param_storeOneOfTenantOneOrAdmin
        */
        //Wait for content load
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",param_APIName);
        //Wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //Wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //Wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersionAndProvider","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionFour + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        caller.click("APIStoreHome.lnk_MySubcription");
        //Wait for content load
        caller.pause("2000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_applicationName);
        //Wait for content load
        caller.pause("2000");
        //verify the non availability of new api under the application subscribed by old api
        if(caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsPublished","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionFour)){
        caller.fail("Created API copy resides within the original API subscription");
        }
        //invoke the original api
        lib_Common.bc_APIStore_MySubscription(caller, param_applicationName,param_APIName,param_APIVersionOne);
        lib_Common.bc_APIStore_InvokeAPI(caller, param_APIName,param_APIVersionOne,param_applicationName,param_keyTypeToInvoke,param_IsPostExecuted,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_responseCodeTwoHundred,param_postResponseHeaders,param_IsGetExecuted,param_buttonNameGet,param_getCustomerName,param_responseCodeTwoHundred,param_getResponseHeaders,param_IsPutExecuted,param_buttonNamePut,param_putCustomerName,param_responseBodyNoContent,param_responseCodeTwoHundred,param_buttonNameGet,param_getCustomerNameForPutVerification,param_responseCodeTwoHundred,param_getResponseHeadersForPutVerification,param_IsHeadExecuted,param_buttonNameHead,param_responseBodyNoContent,param_responseCodeTwoHundred,param_responseHeadersNull,param_IsDeleteExecuted,param_buttonNameDelete,param_responseBodyNoContent,param_responseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGet,param_responseBodyNoContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_responseHeadersNull);
        //invoke the copied api
        lib_Common.bc_APIStore_APIs_SubscribeAPI(caller, param_APIName,param_APIVersionFour,param_applicationName,"no","");
        lib_Common.bc_APIStore_MySubscription(caller, param_applicationName,param_APIName,param_APIVersionFour);
        lib_Common.bc_APIStore_InvokeAPI(caller, param_APIName,param_APIVersionFour,param_applicationName,param_keyTypeToInvoke,param_IsPostExecuted,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_responseCodeTwoHundred,param_postResponseHeaders,param_IsGetExecuted,param_buttonNameGet,param_getCustomerName,param_responseCodeTwoHundred,param_getResponseHeaders,param_IsPutExecuted,param_buttonNamePut,param_putCustomerName,param_responseBodyNoContent,param_responseCodeTwoHundred,param_buttonNameGet,param_getCustomerNameForPutVerification,param_responseCodeTwoHundred,param_getResponseHeadersForPutVerification,param_IsHeadExecuted,param_buttonNameHead,param_responseBodyNoContent,param_responseCodeTwoHundred,param_responseHeadersNull,param_IsDeleteExecuted,param_buttonNameDelete,param_responseBodyNoContent,param_responseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGet,param_responseBodyNoContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_responseHeadersNull);
        caller.writeToReport("End Of TC APIM_7");	
    }
    /**
     *  Business component APIM2_8.
     */
    public final static void APIM2_8(final SeleniumTestBase caller, final String param_publisherURL, final String param_storeURL, final String param_APIName, final String param_APIVersionOne, final String param_APIVersionFive, final String param_statusPublished, final String param_statusDeprecated, final String param_serverNameDomainOne, final String param_storeOneOfTenantOneOrAdmin, final String param_provider, final String param_applicationName, final String param_keyTypeToInvoke, final String param_IsPostExecuted, final String param_buttonNamePost, final String param_postPayloadContext, final String param_postCustomerNameFromPayloadContext, final String param_responseCodeTwoHundred, final String param_postResponseHeaders, final String param_IsGetExecuted, final String param_buttonNameGet, final String param_getCustomerName, final String param_getResponseHeaders, final String param_IsPutExecuted, final String param_buttonNamePut, final String param_putCustomerName, final String param_responseBodyNoContent, final String param_getCustomerNameForPutVerification, final String param_getResponseHeadersForPutVerification, final String param_IsHeadExecuted, final String param_buttonNameHead, final String param_responseHeadersNull, final String param_IsDeleteExecuted, final String param_buttonNameDelete, final String param_deleteResponseHeaders, final String param_getResponseCodeTwoHundredAndFourForDeleteVerification, final String param_true, final String param_false) throws Exception {
        caller.writeToReport("Start Of TC APIM_8");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",param_APIName);
        //Wait for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.btn_Search");
        //Wait for content load
        caller.pause("2000");
        //Click API name with specific version
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne + "_PARAM," + "param_APIName_PARAM:" + param_APIName);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_Overview");
        //waiting for content load
        caller.pause("2000");
        //verify that the overview page contains the create button
        caller.checkElementPresent("Browse_Overview.btn_CreateNewVersion",false,"");
        caller.click("Browse_Overview.btn_CreateNewVersion");
        //Wait for content load
        caller.pause("2000");
        //verify that to version tab has expanded successfully and its contents are available
        caller.checkElementPresent("Browse_Overview.tf_ToVersion",false,"");
        caller.checkElementPresent("Browse_Overview.chk_DefaultVersion",false,"");
        caller.checkElementPresent("Browse_Overview.btn_Done",false,"");
        //Type new version
        caller.type("Browse_Overview.tf_ToVersion",param_APIVersionFive);
        //Wait for content load
        caller.pause("1000");
        caller.click("Browse_Overview.chk_DefaultVersion");
        //Wait for content load
        caller.pause("1000");
        caller.click("Browse_Overview.btn_Done");
        //Wait for content load
        caller.pause("2000");
        //Verify redirected to browse page
        caller.checkElementPresent("APIPublisherHome.lnk_Browse",false,"");
        caller.type("APIPublisherHome.tf_APISearch",param_APIName);
        //Wait for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.btn_Search");
        //Wait for content load
        caller.pause("2000");
        //Click API name with specific new version
        caller.checkElementPresent("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionFive + "_PARAM," + "param_APIName_PARAM:" + param_APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionFive + "_PARAM," + "param_APIName_PARAM:" + param_APIName);
        //Wait for content load
        caller.pause("2000");
        //verify the availability of Lifestyle tab
        caller.checkElementPresent("APIPublisherBrowse.btn_Lifecycle",false,"");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //Wait for content load
        caller.pause("2000");
        //Wait for content load
        caller.pause("2000");
        caller.select("browseLifecycle.ele_ddSelectState",param_statusPublished);
        //Wait for content load
        caller.pause("1000");
        //check weather Propagate Changes To API Gateway is un-checked
        if(!caller.checkElementPresent("browseLifecycle.chk_PropagateChangesToAPIGatewayTrueOrFalse","param_TrueOrFalse_PARAM:" + param_true)){
        caller.click("browseLifecycle.chk_PropagateChangesToAPIGatewayTrueOrFalse","param_TrueOrFalse_PARAM:" + param_false);
        //Wait for content load
        caller.pause("1000");
        }
        //verify the availability of depriciate old version and requireResubscription check boxes
        if(!caller.checkElementPresent("browseLifecycle.chk_deprecateOldVersionsTrueOrFalse","param_TrueOrFalse_PARAM:" + param_true)){
        caller.click("browseLifecycle.chk_deprecateOldVersionsTrueOrFalse","param_TrueOrFalse_PARAM:" + param_false);
        //Wait for content load
        caller.pause("1000");
        }
        if(!caller.checkElementPresent("browseLifecycle.chk_requireResubscriptionTrueOrFalse","param_TrueOrFalse_PARAM:" + param_true)){
        caller.click("browseLifecycle.chk_requireResubscriptionTrueOrFalse","param_TrueOrFalse_PARAM:" + param_false);
        //Wait for content load
        caller.pause("1000");
        }
        caller.click("browseLifecycle.btn_Update");
        //verify the success message
        caller.checkElementPresent("browseLifecycle.ele_lblUpdateSuccessMessage",false,"");
        //Wait for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Wait for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",param_APIName);
        //Wait for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.btn_Search");
        //Wait for content load
        caller.pause("2000");
        //verify that original version is deprecated
        caller.checkElementPresent("APIPublisherHome.ele_lblApiNameWithVersionAndStatus","param_version_PARAM:" + param_APIVersionOne + "_PARAM," + "param_ApiName_PARAM:" + param_APIName + "_PARAM," + "param_ApiStatus_PARAM:" + param_statusDeprecated,false,"");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        //Wait for content load
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",param_APIName);
        //Wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //Wait for content load
        caller.pause("2000");
        //verify the availability of new api copy under recently added section
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersionAndProvider","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionFive + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //verify the old API is unavailable under API's
        if(caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersionOne)){
        caller.fail("Deprecated original api is available under api list");
        }
        /*
        Call
         businessComponent=lib_Common.bc_StoreLogin
         param_TenanrOrAdmin=@param_storeOneOfTenantOneOrAdmin
        */
        //Wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_applicationName);
        //verify that the api deprecated is available
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsDeprecated","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne,false,"");
        //verify the non availability of new api
        if(caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsPublished","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionFive)){
        caller.fail("New APi is available under Original API subscription");
        }
        lib_Common.bc_APIStore_APIs_SubscribeAPI(caller, param_APIName,param_APIVersionFive,param_applicationName,"no","");
        lib_Common.bc_APIStore_MySubscription(caller, param_applicationName,param_APIName,param_APIVersionOne);
        //invoke the original API
        lib_Common.bc_APIStore_InvokeAPI(caller, param_APIName,param_APIVersionOne,param_applicationName,param_keyTypeToInvoke,param_IsPostExecuted,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_responseCodeTwoHundred,param_postResponseHeaders,param_IsGetExecuted,param_buttonNameGet,param_getCustomerName,param_responseCodeTwoHundred,param_getResponseHeaders,param_IsPutExecuted,param_buttonNamePut,param_putCustomerName,param_responseBodyNoContent,param_responseCodeTwoHundred,param_buttonNameGet,param_getCustomerNameForPutVerification,param_responseCodeTwoHundred,param_getResponseHeadersForPutVerification,param_IsHeadExecuted,param_buttonNameHead,param_responseBodyNoContent,param_responseCodeTwoHundred,param_responseHeadersNull,param_IsDeleteExecuted,param_buttonNameDelete,param_responseBodyNoContent,param_responseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGet,param_responseBodyNoContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_responseHeadersNull);
        //refresh the session
        lib_Common.bc_APIStore_MySubscription(caller, param_applicationName,param_APIName,param_APIVersionFive);
        //invoke the new API
        lib_Common.bc_APIStore_InvokeAPI(caller, param_APIName,param_APIVersionFive,param_applicationName,param_keyTypeToInvoke,param_IsPostExecuted,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_responseCodeTwoHundred,param_postResponseHeaders,param_IsGetExecuted,param_buttonNameGet,param_getCustomerName,param_responseCodeTwoHundred,param_getResponseHeaders,param_IsPutExecuted,param_buttonNamePut,param_putCustomerName,param_responseBodyNoContent,param_responseCodeTwoHundred,param_buttonNameGet,param_getCustomerNameForPutVerification,param_responseCodeTwoHundred,param_getResponseHeadersForPutVerification,param_IsHeadExecuted,param_buttonNameHead,param_responseBodyNoContent,param_responseCodeTwoHundred,param_responseHeadersNull,param_IsDeleteExecuted,param_buttonNameDelete,param_responseBodyNoContent,param_responseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGet,param_responseBodyNoContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_responseHeadersNull);
        caller.writeToReport("End Of TC APIM_8");	
    }
    /**
     *  Business component APIM2_529.
     */
    public final static void APIM2_529(final SeleniumTestBase caller, final String param_tag, final String param_TenantOrAdmin, final String param_storeURL, final String param_publisherURL) throws Exception {
        //APIM2-529:  To ensure that it is possible to assign tags to an already published API.
        caller.writeToReport("Start  Executing APIM2-529");
        //Navigate to Publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        String varAPINameTwox = caller.retrieveString("keyAPINameTwo");
        //Go to browse page
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content to load
        caller.pause("2000");
        //Go to Edit API section
        lib_Common.bc_EditAPI(caller, varAPINameTwox);
        String APItagFour = param_tag+caller.generateData("int",3);
        //Type API tag Four
        caller.type("APIPublisherAdd.tf_Tags",APItagFour);
        caller.fireEvent("KEY%key=\n","3000");
        //waiting for content to load
        caller.pause("2000");
        //Save the API with newly added tag
        caller.click("APIPublisherAdd.btn_Save");
        //waiting for content to load
        caller.pause("3000");
        //Navigate to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Select the domain
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //Verify the newly added API
        //waiting for content to load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreAPIs.lnk_tags","tags_PARAM:" + APItagFour,false,"");
        //waiting for content to load
        caller.pause("2000");
        //click on the newly added API
        caller.click("APIStoreAPIs.lnk_tags","tags_PARAM:" + APItagFour);
        //Login to API Store
        lib_Common.bc_StoreLogin(caller, param_TenantOrAdmin);
        //waiting for content to load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreAPIs.lnk_tags","tags_PARAM:" + APItagFour,false,"");
        //waiting for content to load
        caller.pause("2000");
        //click on the newly added API
        caller.click("APIStoreAPIs.lnk_tags","tags_PARAM:" + APItagFour);
        //waiting for content to load
        caller.pause("2000");
        //logout from the store
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //waiting for content load
        caller.pause("2000");
        caller.writeToReport("End of execution APIM2-529");	
    }
    /**
     *  Business component APIM2_530.
     */
    public final static void APIM2_530(final SeleniumTestBase caller, final String param_TenantOrAdmin, final String param_storeURL, final String param_publisherURL, final String param_index) throws Exception {
        //APIM2-530:  To ensure that it is possible to assign tags to an already published API.
        caller.writeToReport("Start  Executing APIM2-530");
        //Navigate to Publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        String varAPINameTwox = caller.retrieveString("keyAPINameTwo");
        String varAPItagTwoy = caller.retrieveString("keyAPItagTwo");
        //Go to browse page
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content to load
        caller.pause("2000");
        //Go to Edit API section
        lib_Common.bc_EditAPI(caller, varAPINameTwox);
        //waiting for content to load
        caller.pause("4000");
        //Delete the tag
        caller.click("APIPublisherAdd.ele_lblCloseTag","param_index_PARAM:" + param_index);
        //waiting for content to load
        caller.pause("3000");
        //save the api
        caller.click("APIPublisherAdd.btn_Save");
        //Navigate to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Select the server
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //waiting for content to load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreAPIs.lnk_tags","tags_PARAM:" + varAPItagTwoy,false,"");
        //click on the newly added API
        caller.click("APIStoreAPIs.lnk_tags","tags_PARAM:" + varAPItagTwoy);
        //waiting for content to load
        caller.pause("2000");
        caller.writeToReport("End of Execution APIM2-530");	
    }
    /**
     *  Business component APIM2_531.
     */
    public final static void APIM2_531(final SeleniumTestBase caller, final String param_APIName, final String paramAPIContest, final String param_tag, final String param_ProductionEndPontJaxRS, final String param_TenantOrAdmin, final String param_storeURL, final String param_Description, final String param_publisherURL, final String param_index) throws Exception {
        //APIM2-527:  Create API and Add Various Tags
        caller.writeToReport("Start  Executing APIM2-531");
        //Navigate to Publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        //create API
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Type API Name
        String varAPINameThree = param_APIName+caller.generateData("int",3);
        caller.store("keyAPINameThree","String",varAPINameThree);
        caller.type("APIPublisherAdd.tf_APIName",varAPINameThree);
        //Store API name in to variables
        //auto generate contest
        String APIcontest = paramAPIContest+caller.generateData("int",2);
        caller.store("keyAPIcontest","String",APIcontest);
        //Type API contest
        caller.type("APIPublisherAdd.tf_APIContext",APIcontest);
        //Setting variable for API version
        String APIversion = "v1.0."+caller.generateData("int",1);
        //Type API Version
        caller.type("APIPublisherAdd.tf_APIVersion",APIversion);
        //waiting for content load
        caller.pause("2000");
        //Type API Description
        caller.type("APIPublisherAdd.tf_Discription",param_Description);
        //waiting for content load
        caller.pause("2000");
        String APItagFive = param_tag+caller.generateData("int",4);
        //Type API tag One
        caller.type("APIPublisherAdd.tf_Tags",APItagFive);
        //wait for content load
        caller.pause("2000");
        caller.fireEvent("KEY%key=\n","3000");
        //wait for content load
        caller.pause("2000");
        String APItagSix = param_tag+caller.generateData("int",4);
        //Type API tag
        caller.type("APIPublisherAdd.tf_Tags",APItagSix);
        //wait for content load
        caller.pause("2000");
        caller.fireEvent("KEY%key=\n","3000");
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherAdd.btn_Save");
        //wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Yes");
        //waite for content load
        caller.pause("5000");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //API Manage Section
        caller.pause("8000");
        //Go to browse page
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",varAPINameThree);
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameThree);
        caller.click("APIPublisherBrowse.lnk_Edit");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        caller.click("APIPublisherBrowse.ele_lblManagedAPI");
        caller.type("APIPublisherBrowse.tf_ProductionEndPoint",param_ProductionEndPontJaxRS);
        caller.click("APIPublisherBrowse.btn_SaveManagedAPI");
        //waiting for content load
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_NextManage");
        //waiting for content load
        caller.pause("2000");
        lib_Common.bc_SelectTiers(caller);
        caller.click("APIPublisherBrowse.btn_SaveAndPublish");
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_Close");
        caller.pause("4000");
        //Go to browse page
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content to load
        caller.pause("2000");
        //Go to Edit API section
        lib_Common.bc_EditAPI(caller, varAPINameThree);
        //waiting for content to load
        caller.pause("4000");
        //Delete the tag
        caller.click("APIPublisherAdd.ele_lblCloseTag","param_index_PARAM:" + param_index);
        //waiting for content to load
        caller.pause("3000");
        //save the api
        caller.click("APIPublisherAdd.btn_Save");
        //waiting for content to load
        caller.pause("2000");
        //Navigate to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //waiting for content to load
        caller.pause("3000");
        //Select the domain
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //waiting for content load
        caller.pause("3000");
        //check whether the tag is avilable or not in the tags field
        caller.checkObjectProperty("APIStoreAPIs.lnk_tags","tags_PARAM:" + APItagSix,"ELEMENTPRESENT","false",false,"");
        //waiting for content to load
        caller.pause("3000");
        //Login to API Store
        lib_Common.bc_StoreLogin(caller, param_TenantOrAdmin);
        //waiting for content to load
        caller.pause("3000");
        //check whether the tag is avilable or not in the tags field
        caller.checkObjectProperty("APIStoreAPIs.lnk_tags","tags_PARAM:" + APItagSix,"ELEMENTPRESENT","false",false,"");
        caller.writeToReport("End of Execution APIM2-531");	
    }
    /**
     *  Business component APIM2_459.
     */
    public final static void APIM2_459(final SeleniumTestBase caller, final String param_APIName, final String param_APIContest, final String param_APIVersion, final String param_APIImageName, final String param_tag, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_productionEndpoint, final String param_keyNo, final String param_newVersion, final String param_statusCreated, final String param_APIStatePublished, final String param_numberOfUsers, final String param_statusPublished, final String param_storeURL, final String param_TenantOrAdmin, final String param_ApplicationName, final String param_tierType, final String param_keyTypeToInvokeSandbox, final String param_keyYes, final String param_buttonNamePost, final String param_postPayloadContext, final String param_postCustomerNameFromPayloadContext, final String param_postResponseCodeTwoHundred, final String param_postResponseHeaders, final String param_buttonNameGet, final String param_getCustomerName, final String param_buttonNamePut, final String param_putCustomerName, final String param_putResponseBodyNoContent, final String param_buttonNameGetForPutVerification, final String param_getCustomerNameForPutVerification, final String param_getResponseCodeTwoHundredForPutVerification, final String param_getResponseHeadersForPutVerification, final String param_buttonNameHead, final String param_headResponseBodyNoContent, final String param_headResponseHeadersNull, final String param_buttonNameDelete, final String param_deleteResponseBodyNoContent, final String param_deleteResponseHeaders, final String param_buttonNameGetForDeleteVerification, final String param_noContent, final String param_getResponseCodeTwoHundredAndFourForDeleteVerification, final String param_getResponseHeadersNullForDeleteVerification, final String param_keyTypeToInvoke, final String param_TenantOneOrAdminStoreOne, final String param_APIVisibility, final String param_publisherURL, final String param_sandboxEndpoint) throws Exception {
        //Publish API using "lifecycle" tab in browse page of API and Invoking it using API console
        caller.writeToReport("Start of executing APIM2_459");
        //Creating New API
        lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke(caller, param_APIName,param_APIContest,param_APIVersion,param_APIVisibility,param_APIImageName,param_tag,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_keyYes,param_sandboxEndpoint,param_keyNo,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_keyNo,param_keyNo,"");
        //End of creation of API
        //Retrieve API name and the version.
        String APIName = caller.retrieveString("key_APINameDesign");
        String APIversion = caller.retrieveString("key_APIVersion");
        //Navigate to Publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Check for the published API
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        //wait till api display
        caller.pause("5000");
        caller.click("APIPublisherHome.btn_Search");
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIversion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIversion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName + "_PARAM," + "param_status_PARAM:" + param_statusPublished,false,"");
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIversion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName);
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIversion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIversion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_status_PARAM:" + param_statusPublished,false,"");
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIversion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName);
        }
        caller.pause("3000");
        //wait for content load
        caller.click("APIPublisherBrowse.lnk_Overview");
        //creating new copy of published API
        caller.click("APIPublisherBrowse.btn_CreateNewVersion");
        caller.checkElementPresent("APIPublisherBrowse.tf_NewVersion",false,"");
        caller.type("APIPublisherBrowse.tf_NewVersion",param_newVersion);
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_done");
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("5000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIversion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName + "_PARAM," + "param_status_PARAM:" + param_statusCreated,false,"");
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName);
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIversion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_status_PARAM:" + param_statusCreated,false,"");
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName);
        }
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //wait for content load
        caller.pause("5000");
        //Select the Published Status
        caller.select("APIPublisherBrowse.ele_ddState",param_APIStatePublished);
        caller.pause("2000");
        //Click on update button
        caller.click("APIPublisherBrowse.btn_UpdateState");
        //check the successfull message
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStateChangeMessage",false,"");
        //Goto API brouws
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("5000");
        caller.click("APIPublisherHome.btn_Search");
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIversion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_newVersion + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName + "_PARAM," + "param_status_PARAM:" + param_statusPublished,false,"");
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIversion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_newVersion + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_status_PARAM:" + param_statusPublished,false,"");
        }
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //wait for content load
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        //Search  the API Copy without login
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait
        caller.pause("2000");
        //Checking API details
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        caller.checkElementPresent("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersionAndProvider","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_provider_PARAM:" + varPublisherUserName,false,"");
        caller.click("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion);
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        caller.checkElementPresent("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersionAndProvider","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_provider_PARAM:" + varPublisherAdminUserName,false,"");
        caller.click("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion);
        }
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_TenantOneOrAdminStoreOne);
        //API Subcription
        //Go to My Subcription window to Generate keys
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion);
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_ApplicationName);
        caller.select("APIStoreAPIs.ele_ddtierToSubscribe",param_tierType);
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_MySubcription");
        //verify that the landed page is My Subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_ddApplicationWithSubscription",false,"");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        //wait for content load
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        }
        //wait for content load
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        }
        //wait for content load
        caller.pause("2000");
        //wait for content load
        caller.pause("1000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        if(param_TenantOneOrAdminStoreOne.equals("TenantOneStoreOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        caller.pause("2000");
        //Check the Subcribed API Details
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        caller.click("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType);
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_statusPublished,false,"");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        } else if(param_TenantOneOrAdminStoreOne.equals("AdminStoreOne")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        caller.click("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType);
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_statusPublished,false,"");
        }
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        caller.pause("3000");
        lib_Common.bc_APIStore_InvokeAPI(caller, APIName,param_newVersion,param_ApplicationName,param_keyTypeToInvokeSandbox,param_keyYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNameGet,param_getCustomerName,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_postResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_keyYes,param_buttonNameHead,param_headResponseBodyNoContent,param_postResponseCodeTwoHundred,param_headResponseHeadersNull,param_keyYes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_postResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_noContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        caller.pause("3000");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        lib_Common.bc_APIStore_InvokeAPI(caller, APIName,param_newVersion,param_ApplicationName,param_keyTypeToInvoke,param_keyYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNameGet,param_getCustomerName,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_postResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_keyYes,param_buttonNameHead,param_headResponseBodyNoContent,param_postResponseCodeTwoHundred,param_headResponseHeadersNull,param_keyYes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_postResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_noContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        caller.pause("3000");
        caller.writeToReport("End of executing tc APIM2_459");	
    }
    /**
     *  Business component APIM_774.
     */
    public final static void APIM_774(final SeleniumTestBase caller, final String param_userNameAdmin, final String param_passwordAdmin, final String param_topicSubject, final String param_topicDescription, final String param_storeURL, final String param_serverName) throws Exception {
        //APIM2-774:  Create a forum topic in the API store
        caller.writeToReport("Start  Executing APIM2-774");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Waiting for content load
        caller.pause("3000");
        //click on carbon super
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + param_serverName);
        caller.click("APIStoreHome.lnk_login");
        //verify the login popup
        caller.checkElementPresent("APIStoreHome.tf_username",false,"");
        //log in
        caller.type("APIStoreHome.tf_username",param_userNameAdmin);
        caller.type("APIStoreHome.tf_password",param_passwordAdmin);
        caller.click("APIStoreHome.btn_login");
        caller.pause("2000");
        caller.click("APIStoreSignUp.btn_Forum");
        caller.pause("2000");
        //create new topic
        caller.click("APIStoreForums.btn_CreateNewTopic");
        caller.type("APIStoreForums.tf_TopicSubject",param_topicSubject);
        caller.type("APIStoreForums.tf_TopicDescription",param_topicDescription);
        caller.click("APIStoreForums.btn_CreateTopic");
        caller.pause("3000");
        caller.writeToReport("End of  Executing APIM2-774");	
    }
    /**
     *  Business component APIM2_445.
     */
    /**
     *  Business component APIM2_445.
     */
    public final static void APIM2_445(final SeleniumTestBase caller) throws Exception {
    	
    }
    /**
     *  Business component APIM2_446.
     */
    public final static void APIM2_446(final SeleniumTestBase caller, final String param_APIName, final String param_APIContext, final String param_APIVersionOne, final String param_tagName, final String param_ProductionEndPoint, final String param_SandBoxEndpoint, final String param_APIStateRetired, final String param_TenantOrAdminPublisherOne, final String param_storeURL, final String param_TenantOrAdmin, final String param_TenantOrAdminStoreOne, final String param_numberOfUsers, final String param_APIStatePublished, final String param_PublisherURL, final String param_APIvisibility, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_yes, final String param_no, final String param_defaultApplication) throws Exception {
        caller.writeToReport("Start of executing APIM_446");
        //Create new API up to Published state
        lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke(caller, param_APIName,param_APIContext,param_APIVersionOne,param_APIvisibility,"",param_tagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_ProductionEndPoint,param_no,"",param_no,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_no,param_no,"");
        //Navigate to store for subsription and generate keys for sandbox and production end points
        String varAPINameDesign = caller.retrieveString("key_APINameDesign");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"4000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //waiting for content load
        caller.pause("2000");
        lib_Common.bc_StoreLogin(caller, param_TenantOrAdminStoreOne);
        //waiting for content load
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",varAPINameDesign);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + varAPINameDesign);
        //waiting for content load
        caller.pause("3000");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_defaultApplication);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        //waiting for content load
        caller.pause("4000");
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        //waiting for content load
        caller.pause("3000");
        //Generate Keys for the Subscription
        caller.click("APIStoreHome.lnk_MySubcription");
        //wait for page load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_ddApplicationWithSubscription",false,"");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsPublished","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne,false,"");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_defaultApplication);
        //wait for page load
        caller.pause("4000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        }
        //wait for content load
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        }
        //wait for content load
        caller.pause("3000");
        //Navigate to publisher for change the state of the API in to RETIRED
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_PublisherURL,"3000");
        //wait for content load
        caller.pause("2000");
        //Verify the details of the subscribed API in the' My Subscriptions' page
        //Change state in to RETIRED
        caller.click("APIPublisherHome.lnk_Browse");
        //wait for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",varAPINameDesign);
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameDesign);
        //wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //wait for content load
        caller.pause("2000");
        caller.select("APIPublisherBrowse.ele_ddState",param_APIStateRetired);
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_retiredVerificationPopUp");
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_UpdateState");
        //wait for content load
        caller.pause("4000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStateChangeMessage",false,"");
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("3000");
        caller.type("APIPublisherHome.tf_APISearch",varAPINameDesign);
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("3000");
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "param_version_PARAM:" + param_APIVersionOne + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_APIVersionOne + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "param_version_PARAM:" + param_APIVersionOne + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_APIVersionOne + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        }
        //Navigate To store to verify the API is not visible in the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"4000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //waiting for content load
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",varAPINameDesign);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("5000");
        if(! caller.checkElementPresent("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + varAPINameDesign)){
        }
        if(!  caller.checkElementPresent("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "param_version_PARAM:" + param_APIVersionOne)){
        }
        //waiting for content load
        caller.pause("2000");
        //Verify the inactive Status of the API on the MYSubscriptiptions page
        caller.click("APIStoreHome.lnk_MySubcription");
        //waiting for content load
        caller.pause("3000");
        if(!  caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsPublished","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne)){
        }
        caller.writeToReport("End of executing APIM_446");	
    }
    /**
     *  Business component APIM2_443.
     */
    public final static void APIM2_443(final SeleniumTestBase caller, final String param_APIName, final String param_APIContext, final String param_APIVersionOne, final String param_tagName, final String param_ProductionEndPoint, final String param_SandBoxEndpoint, final String param_APIStatePublished, final String param_storeURL, final String param_TenantOrAdmin, final String param_TenantOrAdminStoreOne, final String param_defaultApplication, final String param_PublisherURL, final String param_TenantOrAdminPublisherOne, final String param_APIStateDeprecated, final String param_numberOfUsers, final String param_yes, final String param_urlPatternForGetDeleteAndHead, final String param_urlPatternForPostAndPut, final String param_APIvisibility, final String param_no, final String param_keyTypeToInvokeProduction, final String param_keyTypeToInvokeSandbox, final String param_buttonNamePost, final String param_postPayloadContext, final String param_postCustomerNameFromPayloadContext, final String param_postResponseCodeTwoHundred, final String param_postResponseHeaders, final String param_buttonNameGet, final String param_getCustomerName, final String param_getResponseCodeTwoHundred, final String param_getResponseHeaders, final String param_buttonNamePut, final String param_putCustomerName, final String param_putResponseBodyNoContent, final String param_putResponseCodeTwoHundred, final String param_buttonNameGetForPutVerification, final String param_getCustomerNameForPutVerification, final String param_getResponseCodeTwoHundredForPutVerification, final String param_getResponseHeadersForPutVerification, final String param_buttonNameHead, final String param_headResponseCodeTwoHundred, final String param_headResponseHeadersNull, final String param_buttonNameDelete, final String param_deleteResponseBodyNoContent, final String param_deleteResponseCodeTwoHundred, final String param_deleteResponseHeaders, final String param_buttonNameGetForDeleteVerification, final String param_getResponseBodyNoContentForDeleteVerification, final String param_getResponseCodeTwoHundredAndFourForDeleteVerification, final String param_getResponseHeadersNullForDeleteVerification) throws Exception {
        caller.writeToReport("Start of executing APIM_443");
        //Create new API up to Published state
        lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke(caller, param_APIName,param_APIContext,param_APIVersionOne,param_APIvisibility,"",param_tagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_ProductionEndPoint,param_yes,param_SandBoxEndpoint,param_no,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_no,param_no,"");
        //Navigate to store for subsription and generate keys for sandbox and production end points
        String varAPINameDesign = caller.retrieveString("key_APINameDesign");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"4000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //waiting for content load
        caller.pause("2000");
        lib_Common.bc_StoreLogin(caller, param_TenantOrAdminStoreOne);
        //waiting for content load
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",varAPINameDesign);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + varAPINameDesign);
        //waiting for content load
        caller.pause("3000");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_defaultApplication);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        //waiting for content load
        caller.pause("4000");
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        //waiting for content load
        caller.pause("3000");
        //Generate Keys for the Subscription
        caller.click("APIStoreHome.lnk_MySubcription");
        //wait for page load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_ddApplicationWithSubscription",false,"");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsPublished","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne,false,"");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_defaultApplication);
        //wait for page load
        caller.pause("4000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        }
        //wait for content load
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        }
        //wait for content load
        caller.pause("3000");
        //Navigate to publisher for change the state of the API in to deprecated
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_PublisherURL,"3000");
        //wait for content load
        caller.pause("2000");
        //Verify the details of the subscribed API in the' My Subscriptions' page
        //Change state in to deprecated
        caller.click("APIPublisherHome.lnk_Browse");
        //wait for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",varAPINameDesign);
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameDesign);
        //wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //wait for content load
        caller.pause("2000");
        caller.select("APIPublisherBrowse.ele_ddState",param_APIStateDeprecated);
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_UpdateState");
        //wait for content load
        caller.pause("4000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStateChangeMessage",false,"");
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("3000");
        caller.type("APIPublisherHome.tf_APISearch",varAPINameDesign);
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("3000");
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_APIVersionOne + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "param_version_PARAM:" + param_APIVersionOne + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName + "_PARAM," + "param_status_PARAM:" + param_APIStateDeprecated,false,"");
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_APIVersionOne + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "param_version_PARAM:" + param_APIVersionOne + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_status_PARAM:" + param_APIStateDeprecated,false,"");
        }
        //Navigate To store to verify the API is not visible in the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"4000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //waiting for content load
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",varAPINameDesign);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("5000");
        if(! caller.checkElementPresent("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + varAPINameDesign)){
        }
        if(!  caller.checkElementPresent("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "param_version_PARAM:" + param_APIVersionOne)){
        }
        //waiting for content load
        caller.pause("2000");
        //Verify the inactive Status of the API on the MYSubscriptiptions page
        caller.click("APIStoreHome.lnk_MySubcription");
        //waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsDeprecated","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne,false,"");
        //Invoke API@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
        lib_Common.bc_APIStore_InvokeAPI(caller, varAPINameDesign,param_APIVersionOne,param_defaultApplication,param_keyTypeToInvokeProduction,param_yes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_yes,param_buttonNameGet,param_getCustomerName,param_getResponseCodeTwoHundred,param_getResponseHeaders,param_yes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_putResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_yes,param_buttonNameHead,param_putResponseBodyNoContent,param_headResponseCodeTwoHundred,param_headResponseHeadersNull,param_yes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_deleteResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_getResponseBodyNoContentForDeleteVerification,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        //wait for content load
        caller.pause("3000");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"4000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //wait for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("4000");
        lib_Common.bc_APIStore_InvokeAPI(caller, varAPINameDesign,param_APIVersionOne,param_defaultApplication,param_keyTypeToInvokeSandbox,param_yes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_yes,param_buttonNameGet,param_getCustomerName,param_getResponseCodeTwoHundred,param_getResponseHeaders,param_yes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_putResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_yes,param_buttonNameHead,param_putResponseBodyNoContent,param_headResponseCodeTwoHundred,param_headResponseHeadersNull,param_yes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_deleteResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_getResponseBodyNoContentForDeleteVerification,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        //waiting for content load
        caller.pause("4000");
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //waiting for content load
        caller.pause("3000");
        caller.writeToReport("End of executing APIM_446");	
    }
    /**
     *  Business component APIM2_609.
     */
    public final static void APIM2_609(final SeleniumTestBase caller, final String param_TenantOrAdminStoreTwo, final String param_APIName, final String param_APIContext, final String param_APIVersionOne, final String param_tagName, final String param_ProductionEndPoint, final String param_SandBoxEndpoint, final String param_APIStatePublished, final String param_storeURL, final String param_TenantOrAdmin, final String param_TenantOrAdminPublisherOne, final String param_APIStateDeprecated, final String param_APIvisibility, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_no, final String param_yes, final String param_numberOfUsers, final String param_publisherURL) throws Exception {
        caller.writeToReport("Start of executing APIM2_609");
        //Create new API up to Published state
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"4000");
        lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke(caller, param_APIName,param_APIContext,param_APIVersionOne,param_APIvisibility,"",param_tagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_ProductionEndPoint,param_yes,param_SandBoxEndpoint,param_no,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_no,param_no,"");
        //Change state in to deprecated
        String varAPINameDesign = caller.retrieveString("key_APINameDesign");
        caller.click("APIPublisherHome.lnk_Browse");
        //wait for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",varAPINameDesign);
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameDesign);
        //wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //wait for content load
        caller.pause("2000");
        caller.select("APIPublisherBrowse.ele_ddState",param_APIStateDeprecated);
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_UpdateState");
        //wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStateChangeMessage",false,"");
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",varAPINameDesign);
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("2000");
        //Verify the API Name/Version/Creator/Number of uers/API status
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_APIVersionOne + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "param_version_PARAM:" + param_APIVersionOne + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName + "_PARAM," + "param_status_PARAM:" + param_APIStateDeprecated,false,"");
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_APIVersionOne + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "param_version_PARAM:" + param_APIVersionOne + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_status_PARAM:" + param_APIStateDeprecated,false,"");
        }
        //Navigate to store for subsription
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"4000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //waiting for content load
        caller.pause("2000");
        lib_Common.bc_StoreLogin(caller, param_TenantOrAdminStoreTwo);
        //waiting for content load
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",varAPINameDesign);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        if(! caller.checkElementPresent("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + varAPINameDesign)){
        }
        //waiting for content load
        caller.writeToReport("End of executing APIM2_609");	
    }
    /**
     *  Business component APIM2_441.
     */
    public final static void APIM2_441(final SeleniumTestBase caller, final String param_APIStateBlocked, final String param_APIName, final String param_APIContext, final String param_APIVersionOne, final String param_APIvisibility, final String param_tagName, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String aram_ProductionEndPoint, final String param_no, final String param_sandboxEndpoint, final String param_yes, final String param_storeURL, final String param_TenantOrAdmin, final String param_TenantOrAdminStoreOne, final String param_defaultApplication, final String param_PublisherURL, final String param_TenantOrAdminPublisherOne, final String param_numberOfUsers, final String param_ProductionEndPoint, final String param_APIStateBlockedSimple) throws Exception {
        caller.writeToReport("Start of executing APIM_441");
        //Create new API up to Published state
        lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke(caller, param_APIName,param_APIContext,param_APIVersionOne,param_APIvisibility,"",param_tagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_ProductionEndPoint,param_yes,param_sandboxEndpoint,param_no,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_no,param_no,"");
        //Navigate to store for subsription and generate keys for sandbox and production end points
        String varAPINameDesign = caller.retrieveString("key_APINameDesign");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"4000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //waiting for content load
        caller.pause("2000");
        lib_Common.bc_StoreLogin(caller, param_TenantOrAdminStoreOne);
        //waiting for content load
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",varAPINameDesign);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + varAPINameDesign);
        //waiting for content load
        caller.pause("3000");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_defaultApplication);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        //waiting for content load
        caller.pause("4000");
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        //waiting for content load
        caller.pause("3000");
        //Generate Keys for the Subscription
        caller.click("APIStoreHome.lnk_MySubcription");
        //wait for page load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_ddApplicationWithSubscription",false,"");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsPublished","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne,false,"");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_defaultApplication);
        //wait for page load
        caller.pause("4000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        }
        //wait for content load
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        }
        //wait for content load
        caller.pause("3000");
        //Navigate to publisher for change the state of the API in to deprecated
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_PublisherURL,"3000");
        //wait for content load
        caller.pause("2000");
        //Change state in to deprecated
        caller.click("APIPublisherHome.lnk_Browse");
        //wait for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",varAPINameDesign);
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameDesign);
        //wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //wait for content load
        caller.pause("2000");
        caller.select("APIPublisherBrowse.ele_ddState",param_APIStateBlocked);
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_UpdateState");
        //wait for content load
        caller.pause("4000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStateChangeMessage",false,"");
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("3000");
        caller.type("APIPublisherHome.tf_APISearch",varAPINameDesign);
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("3000");
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_APIVersionOne + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "param_version_PARAM:" + param_APIVersionOne + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName + "_PARAM," + "param_status_PARAM:" + param_APIStateBlocked,false,"");
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_APIVersionOne + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "param_version_PARAM:" + param_APIVersionOne + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_status_PARAM:" + param_APIStateBlocked,false,"");
        }
        //Navigate To store to verify the API is not visible in the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"4000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //waiting for content load
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",varAPINameDesign);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("5000");
        if(! caller.checkElementPresent("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + varAPINameDesign)){
        }
        if(!  caller.checkElementPresent("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "param_version_PARAM:" + param_APIVersionOne)){
        }
        //waiting for content load
        caller.pause("2000");
        //Verify the inactive Status of the API on the MYSubscriptiptions page
        caller.click("APIStoreHome.lnk_MySubcription");
        //waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsBlocked","param_Blocked_PARAM:" + param_APIStateBlockedSimple,false,"");
        caller.writeToReport("End of executing APIM_441");	
    }
    /**
     *  Business component APIM2_429.
     */
    public final static void APIM2_429(final SeleniumTestBase caller, final String param_APIStatePrototyped, final String param_APIStatePrototypedSimple, final String param_APIName, final String param_APIContext, final String param_APIVersionOne, final String param_APIvisibility, final String param_tagName, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_ProductionEndPoint, final String param_sandboxEndpoint, final String param_yes, final String param_no, final String param_storeURL, final String param_TenantOrAdmin, final String param_TenantOrAdminStoreOne, final String param_defaultApplication, final String param_PublisherURL, final String param_numberOfUsers, final String param_keyTypeToInvokeProduction, final String param_keyTypeToInvokeSandbox, final String param_buttonNamePost, final String param_postPayloadContext, final String param_postCustomerNameFromPayloadContext, final String param_postResponseCodeTwoHundred, final String param_postResponseHeaders, final String param_buttonNameGet, final String param_getCustomerName, final String param_getResponseCodeTwoHundred, final String param_getResponseHeaders, final String param_buttonNamePut, final String param_putCustomerName, final String param_putResponseBodyNoContent, final String param_headResponseCodeTwoHundred, final String param_headResponseHeadersNull, final String param_buttonNameDelete, final String param_deleteResponseBodyNoContent, final String param_deleteResponseCodeTwoHundred, final String param_deleteResponseHeaders, final String param_buttonNameGetForDeleteVerification, final String param_getResponseBodyNoContentForDeleteVerification, final String param_getResponseCodeTwoHundredAndFourForDeleteVerification, final String param_getResponseHeadersNullForDeleteVerification, final String param_putResponseCodeTwoHundred, final String param_buttonNameGetForPutVerification, final String param_getCustomerNameForPutVerification, final String param_getResponseCodeTwoHundredForPutVerification, final String param_getResponseHeadersForPutVerification, final String param_buttonNameHead, final String param_IsPostExecuted, final String param_keyTypeToInvoke, final String param_IsGetExecuted, final String param_IsPutExecuted, final String param_IsHeadExecuted, final String param_headResponseBodyNoContent, final String param_IsDeleteExecuted) throws Exception {
        caller.writeToReport("Start of executing APIM_429");
        //Create new API up to Published state
        lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke(caller, param_APIName,param_APIContext,param_APIVersionOne,param_APIvisibility,"",param_tagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_ProductionEndPoint,param_yes,param_sandboxEndpoint,param_no,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_no,param_no,"");
        //Navigete store to subscribe API to an APP and generate keys
        String varAPINameDesign = caller.retrieveString("key_APINameDesign");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"4000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_TenantOrAdminStoreOne);
        //waiting for content load
        caller.pause("3000");
        caller.type("APIStoreHome.tf_APISearchStore",varAPINameDesign);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersionOne);
        //waiting for content load
        caller.pause("3000");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_defaultApplication);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        //waiting for content load
        caller.pause("4000");
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        //waiting for content load
        caller.pause("3000");
        //Generate Keys for the Subscription
        caller.click("APIStoreHome.lnk_MySubcription");
        //wait for page load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_ddApplicationWithSubscription",false,"");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsPublished","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne,false,"");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_defaultApplication);
        //wait for page load
        caller.pause("4000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        }
        //wait for content load
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        }
        //wait for content load
        caller.pause("3000");
        //verify the API details on my subscriptions page
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsPublished","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne,false,"");
        //wait for content load
        caller.pause("2000");
        //Navigate to publisher for change the state of the API in to prototyped
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_PublisherURL,"3000");
        //wait for content load
        caller.pause("2000");
        //Verify the details of the subscribed API in the' My Subscriptions' page
        //Change state in to Prototyped
        caller.click("APIPublisherHome.lnk_Browse");
        //wait for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",varAPINameDesign);
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameDesign);
        //wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //wait for content load
        caller.pause("2000");
        caller.select("APIPublisherBrowse.ele_ddState",param_APIStatePrototyped);
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_UpdateState");
        //wait for content load
        caller.pause("4000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStateChangeMessage",false,"");
        //verify the API status is properly updated to prototyped alone with other information
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("4000");
        caller.type("APIPublisherHome.tf_APISearch",varAPINameDesign);
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("3000");
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_APIVersionOne + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "param_version_PARAM:" + param_APIVersionOne + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName + "_PARAM," + "param_status_PARAM:" + param_APIStatePrototyped,false,"");
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_APIVersionOne + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "param_version_PARAM:" + param_APIVersionOne + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_status_PARAM:" + param_APIStatePrototyped,false,"");
        }
        //Navigate To store to verify the API is not visible in the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"4000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_PrototypedAPIs");
        //waiting for content load
        caller.pause("3000");
        if(! caller.checkElementPresent("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + varAPINameDesign)){
        }
        caller.checkElementPresent("APIStorePrototypedAPIs.lnk_APIName","param_APIName_PARAM:" + varAPINameDesign,false,"");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStorePrototypedAPIs.lnk_APIName","param_APIName_PARAM:" + varAPINameDesign);
        //waiting for content load
        caller.pause("4000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_APIStatePrototyped,false,"");
        //Invoke API
        //wait for content load
        caller.pause("2000");
        //check the availability of api console tab in API
        caller.checkElementPresent("APIStoreAPIs.ele_tabAPIConsole",false,"");
        caller.click("APIStoreAPIs.ele_tabAPIConsole");
        //wait for content load
        caller.pause("2000");
        if(param_IsPostExecuted.equals("yes")){
        caller.writeToReport("Start Of Execution Of Post Command");
        //Execution and verification of post command
        caller.click("APIStoreAPIConsole.btn_mainCommandButtons","param_buttonName_PARAM:" + param_buttonNamePost);
        //wait for content load
        caller.pause("1000");
        //verify that the view is expanded
        caller.checkElementPresent("APIStoreAPIConsole.tf_postPayload",false,"");
        caller.type("APIStoreAPIConsole.tf_postPayload",param_postPayloadContext);
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreAPIConsole.btn_postTryOut");
        //wait for content load
        caller.pause("1000");
        //store and retreive the customer id to verify
        String var_CustomerIdPost = caller.getStringProperty("APIStoreAPIConsole.ele_lblPostResponseBodyRetriveId","TEXT:");
        caller.store("key_CustomerId","String",var_CustomerIdPost);
        //verify the response body
        caller.checkElementPresent("APIStoreAPIConsole.ele_lblPostResponseBody","param_idNumber_PARAM:" + var_CustomerIdPost + "_PARAM," + "param_customerName_PARAM:" + param_postCustomerNameFromPayloadContext,false,"");
        //verify the response code
        caller.checkElementPresent("APIStoreAPIConsole.ele_lblPostResponseCode","param_responseCode_PARAM:" + param_postResponseCodeTwoHundred,false,"");
        //verify the response headers
        caller.checkElementPresent("APIStoreAPIConsole.ele_lblPostResponseHeaders","param_responseHeaders_PARAM:" + param_postResponseHeaders,false,"");
        caller.click("APIStoreAPIConsole.btn_mainCommandButtons","param_buttonName_PARAM:" + param_buttonNamePost);
        //wait for content load
        caller.pause("2000");
        caller.writeToReport("End Of Execution Of Post Command");
        }
        if(param_IsGetExecuted.equals("yes")){
        caller.writeToReport("Start Of Execution Of Get Command");
        //Execution and verification of get command
        //retrive the stored id
        String var_CustomerIdGet = caller.retrieveString("key_CustomerId");
        caller.click("APIStoreAPIConsole.btn_mainCommandButtons","param_buttonName_PARAM:" + param_buttonNameGet);
        //wait for content load
        caller.pause("1000");
        //verify that the view is expanded
        caller.checkElementPresent("APIStoreAPIConsole.tf_getId",false,"");
        //type retrived id in the text space
        caller.type("APIStoreAPIConsole.tf_getId",var_CustomerIdGet);
        //wait for content load
        caller.pause("1000");
        caller.click("APIStoreAPIConsole.btn_getTryOut");
        //wait for content load
        caller.pause("2000");
        //verify the response body
        caller.checkElementPresent("APIStoreAPIConsole.ele_lblGetResponseBody","param_idNumber_PARAM:" + var_CustomerIdGet + "_PARAM," + "param_customerName_PARAM:" + param_getCustomerName,false,"");
        //verify the response code
        caller.checkElementPresent("APIStoreAPIConsole.ele_lblGetResponseCode","param_responseCode_PARAM:" + param_getResponseCodeTwoHundred,false,"");
        //verify the response headers
        caller.checkElementPresent("APIStoreAPIConsole.ele_lblGetResponseHeaders","param_responseHeaders_PARAM:" + param_getResponseHeaders,false,"");
        caller.click("APIStoreAPIConsole.btn_mainCommandButtons","param_buttonName_PARAM:" + param_buttonNameGet);
        //wait for content load
        caller.pause("2000");
        caller.writeToReport("End Of Execution Of Get Command");
        }
        if(param_IsPutExecuted.equals("yes")){
        caller.writeToReport("Start Of Execution Of Put Command");
        //Execution and verification of put command
        caller.click("APIStoreAPIConsole.btn_mainCommandButtons","param_buttonName_PARAM:" + param_buttonNamePut);
        //retrive the stored id
        String var_CustomerIdPut = caller.retrieveString("key_CustomerId");
        caller.checkElementPresent("APIStoreAPIConsole.tf_putPayload",false,"");
        caller.type("APIStoreAPIConsole.tf_putPayload","{\"Customer\":{\"id\":\""+var_CustomerIdPut+"\",\"name\":\""+param_putCustomerName+"\"}}");
        //wait for content load
        caller.pause("1000");
        caller.click("APIStoreAPIConsole.btn_putTryOut");
        //wait for content load
        caller.pause("2000");
        //verify the response body
        caller.checkElementPresent("APIStoreAPIConsole.ele_lblPutResponseBody","param_noContent_PARAM:" + param_putResponseBodyNoContent,false,"");
        //verify the response code
        caller.checkElementPresent("APIStoreAPIConsole.ele_lblPutResponseCode","param_responseCode_PARAM:" + param_putResponseCodeTwoHundred,false,"");
        caller.click("APIStoreAPIConsole.btn_mainCommandButtons","param_buttonName_PARAM:" + param_buttonNamePut);
        //wait for content load
        caller.pause("2000");
        caller.writeToReport("Start Of Execution Of Get Command To Verify Succesful Execution Of Put Command");
        //Execution and verification of get command to verify valid put has occoured
        caller.click("APIStoreAPIConsole.btn_mainCommandButtons","param_buttonName_PARAM:" + param_buttonNameGetForPutVerification);
        //wait for content load
        caller.pause("1000");
        //verify that the view is expanded
        caller.checkElementPresent("APIStoreAPIConsole.tf_getId",false,"");
        //type retrived id in the text space
        caller.type("APIStoreAPIConsole.tf_getId",var_CustomerIdPut);
        //wait for content load
        caller.pause("1000");
        caller.click("APIStoreAPIConsole.btn_getTryOut");
        //wait for content load
        caller.pause("2000");
        //verify the response body
        caller.checkElementPresent("APIStoreAPIConsole.ele_lblGetResponseBody","param_idNumber_PARAM:" + var_CustomerIdPut + "_PARAM," + "param_customerName_PARAM:" + param_getCustomerNameForPutVerification,false,"");
        //verify the response code
        caller.checkElementPresent("APIStoreAPIConsole.ele_lblGetResponseCode","param_responseCode_PARAM:" + param_getResponseCodeTwoHundredForPutVerification,false,"");
        //verify the response headers
        caller.checkElementPresent("APIStoreAPIConsole.ele_lblGetResponseHeaders","param_responseHeaders_PARAM:" + param_getResponseHeadersForPutVerification,false,"");
        caller.click("APIStoreAPIConsole.btn_mainCommandButtons","param_buttonName_PARAM:" + param_buttonNameGetForPutVerification);
        //wait for content load
        caller.pause("2000");
        caller.writeToReport("End Of Execution Of Get Command To Verify Succesful Execution Of Put Command");
        caller.writeToReport("End Of Execution Of Put Command");
        }
        if(param_IsHeadExecuted.equals("yes")){
        //Execution and verification of head command
        caller.writeToReport("Start Of Execution Of Head Command");
        //Execution and verification of Head command
        caller.click("APIStoreAPIConsole.btn_mainCommandButtons","param_buttonName_PARAM:" + param_buttonNameHead);
        //retrive the stored id
        String var_CustomerIdHead = caller.retrieveString("key_CustomerId");
        //wait for content load
        caller.pause("2000");
        //verify that the view is expanded
        caller.checkElementPresent("APIStoreAPIConsole.tf_headId",false,"");
        //type retrived id in the text space
        caller.type("APIStoreAPIConsole.tf_headId",var_CustomerIdHead);
        //wait for content load
        caller.pause("1000");
        caller.click("APIStoreAPIConsole.btn_headTryOut");
        //wait for content load
        caller.pause("2000");
        //verify the response body
        caller.checkElementPresent("APIStoreAPIConsole.ele_lblHeadResponseBody","param_nocontent_PARAM:" + param_headResponseBodyNoContent,false,"");
        //verify the response code
        caller.checkElementPresent("APIStoreAPIConsole.ele_lblHeadResponseCode","param_responseCode_PARAM:" + param_headResponseCodeTwoHundred,false,"");
        //verify the response headers
        caller.checkElementPresent("APIStoreAPIConsole.ele_lblHeadResponseHeaders","param_responseHeaders_PARAM:" + param_headResponseHeadersNull,false,"");
        caller.click("APIStoreAPIConsole.btn_mainCommandButtons","param_buttonName_PARAM:" + param_buttonNameHead);
        caller.writeToReport("End Of Execution Of Head Command");
        }
        if(param_IsDeleteExecuted.equals("yes")){
        //Execution and verification of delete command
        caller.writeToReport("Start Of Execution Of Delete Command");
        //Execution and verification of Head command
        caller.click("APIStoreAPIConsole.btn_mainCommandButtons","param_buttonName_PARAM:" + param_buttonNameDelete);
        //retrive the stored id
        String var_CustomerIdDelete = caller.retrieveString("key_CustomerId");
        caller.type("APIStoreAPIConsole.tf_deleteId",var_CustomerIdDelete);
        caller.click("APIStoreAPIConsole.btn_deleteTryOut");
        //wait for content load
        caller.pause("2000");
        //verify the response body
        caller.checkElementPresent("APIStoreAPIConsole.ele_lblDeleteResponseBody","param_noContent_PARAM:" + param_deleteResponseBodyNoContent,false,"");
        //verify the response code
        caller.checkElementPresent("APIStoreAPIConsole.ele_lblDeleteResponseCode","param_responseCode_PARAM:" + param_deleteResponseCodeTwoHundred,false,"");
        //verify the response headers
        caller.checkElementPresent("APIStoreAPIConsole.ele_lblDeleteResponseHeaders","param_responseHeaders_PARAM:" + param_deleteResponseHeaders,false,"");
        caller.click("APIStoreAPIConsole.btn_mainCommandButtons","param_buttonName_PARAM:" + param_buttonNameDelete);
        //wait for content load
        caller.pause("2000");
        caller.writeToReport("Start Of Execution Of Get Command To Verify Succesful Execution Of Delete Command");
        //Execution and verification of get command to verify valid put has occoured
        caller.click("APIStoreAPIConsole.btn_mainCommandButtons","param_buttonName_PARAM:" + param_buttonNameGetForDeleteVerification);
        //wait for content load
        caller.pause("1000");
        //verify that the view is expanded
        caller.checkElementPresent("APIStoreAPIConsole.tf_getId",false,"");
        //type retrived id in the text space
        caller.type("APIStoreAPIConsole.tf_getId",var_CustomerIdDelete);
        //wait for content load
        caller.pause("1000");
        caller.click("APIStoreAPIConsole.btn_getTryOut");
        //wait for content load
        caller.pause("2000");
        //verify the response body
        caller.checkElementPresent("APIStoreAPIConsole.ele_lblGetResponseBodyNoContent","param_noContent_PARAM:" + param_getResponseBodyNoContentForDeleteVerification,false,"");
        //verify the response code
        caller.checkElementPresent("APIStoreAPIConsole.ele_lblGetResponseCode","param_responseCode_PARAM:" + param_getResponseCodeTwoHundredAndFourForDeleteVerification,false,"");
        //verify the response headers
        caller.checkElementPresent("APIStoreAPIConsole.ele_lblGetResponseHeaders","param_responseHeaders_PARAM:" + param_getResponseHeadersNullForDeleteVerification,false,"");
        caller.click("APIStoreAPIConsole.btn_mainCommandButtons","param_buttonName_PARAM:" + param_buttonNameGetForDeleteVerification);
        //wait for content load
        caller.pause("2000");
        caller.writeToReport("End Of Execution Of Get Command To Verify Succesful Execution Of Delete Command");
        caller.writeToReport("End Of Execution Of Delete Command");
        }
        caller.writeToReport("End of executing APIM_429");	
    }
    /**
     *  Business component APIM2_434.
     */
    public final static void APIM2_434(final SeleniumTestBase caller, final String param_APIName, final String param_APIContext, final String param_APIVersionOne, final String param_APIvisibility, final String param_tagName, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_ProductionEndPoint, final String param_sandboxEndpoint, final String param_yes, final String param_no, final String param_PublisherURL, final String param_numberOfUsers, final String param_APIStatePublished, final String param_storeURL, final String param_TenantOrAdmin, final String param_defaultApplication, final String param_keyTypeToInvokeProduction, final String param_keyTypeToInvokeSandbox, final String param_buttonNamePost, final String param_postPayloadContext, final String param_postCustomerNameFromPayloadContext, final String param_postResponseCodeTwoHundred, final String param_postResponseHeaders, final String param_buttonNameGet, final String param_getCustomerName, final String param_getResponseCodeTwoHundred, final String param_getResponseHeaders, final String param_buttonNamePut, final String param_putCustomerName, final String param_putResponseBodyNoContent, final String param_headResponseCodeTwoHundred, final String param_headResponseHeadersNull, final String param_buttonNameDelete, final String param_deleteResponseBodyNoContent, final String param_deleteResponseCodeTwoHundred, final String param_deleteResponseHeaders, final String param_buttonNameGetForDeleteVerification, final String param_getResponseBodyNoContentForDeleteVerification, final String param_getResponseCodeTwoHundredAndFourForDeleteVerification, final String param_getResponseHeadersNullForDeleteVerification, final String param_putResponseCodeTwoHundred, final String param_buttonNameGetForPutVerification, final String param_getCustomerNameForPutVerification, final String param_getResponseCodeTwoHundredForPutVerification, final String param_getResponseHeadersForPutVerification, final String param_buttonNameHead, final String param_TenantOrAdminStoreOne) throws Exception {
        caller.writeToReport("Start of executing APIM_434");
        //Create new API up to Published state
        lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke(caller, param_APIName,param_APIContext,param_APIVersionOne,param_APIvisibility,"",param_tagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_ProductionEndPoint,param_yes,param_sandboxEndpoint,param_no,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_no,param_no,"");
        //Navigate to publisher for change the state of the API in to Published
        String varAPINameDesign = caller.retrieveString("key_APINameDesign");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_PublisherURL,"3000");
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("4000");
        caller.type("APIPublisherHome.tf_APISearch",varAPINameDesign);
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("3000");
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_APIVersionOne + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "param_version_PARAM:" + param_APIVersionOne + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName + "_PARAM," + "param_status_PARAM:" + param_APIStatePublished,false,"");
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_APIVersionOne + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "param_version_PARAM:" + param_APIVersionOne + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_status_PARAM:" + param_APIStatePublished,false,"");
        }
        //Navigate To store to verify the API is visible in the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"4000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_TenantOrAdminStoreOne);
        //waiting for content load
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + varAPINameDesign)){
        }
        caller.checkElementPresent("APIStorePrototypedAPIs.lnk_APIName","param_APIName_PARAM:" + varAPINameDesign,false,"");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStorePrototypedAPIs.lnk_APIName","param_APIName_PARAM:" + varAPINameDesign);
        //waiting for content load
        caller.pause("4000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_APIStatePublished,false,"");
        caller.click("APIStoreHome.lnk_APIs");
        //waiting for content load
        caller.pause("4000");
        caller.type("APIStoreHome.tf_APISearchStore",varAPINameDesign);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersionOne);
        //waiting for content load
        caller.pause("3000");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_defaultApplication);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        //waiting for content load
        caller.pause("4000");
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        //waiting for content load
        caller.pause("4000");
        //Generate Keys for the Subscription
        //wait for page load
        caller.pause("3000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_defaultApplication);
        //wait for page load
        caller.pause("4000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        }
        //wait for content load
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        }
        //wait for content load
        caller.pause("3000");
        //verify the API details on my subscriptions page
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsPublished","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne,false,"");
        //Invoke API
        lib_Common.bc_APIStore_InvokeAPI(caller, varAPINameDesign,param_APIVersionOne,param_defaultApplication,param_keyTypeToInvokeProduction,param_yes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_yes,param_buttonNameGet,param_getCustomerName,param_getResponseCodeTwoHundred,param_getResponseHeaders,param_yes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_putResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_yes,param_buttonNameHead,param_putResponseBodyNoContent,param_headResponseCodeTwoHundred,param_headResponseHeadersNull,param_yes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_deleteResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_getResponseBodyNoContentForDeleteVerification,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        //wait for content load
        caller.pause("3000");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"4000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //wait for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("4000");
        lib_Common.bc_APIStore_InvokeAPI(caller, varAPINameDesign,param_APIVersionOne,param_defaultApplication,param_keyTypeToInvokeSandbox,param_yes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_yes,param_buttonNameGet,param_getCustomerName,param_getResponseCodeTwoHundred,param_getResponseHeaders,param_yes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_putResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_yes,param_buttonNameHead,param_putResponseBodyNoContent,param_headResponseCodeTwoHundred,param_headResponseHeadersNull,param_yes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_deleteResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_getResponseBodyNoContentForDeleteVerification,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        //waiting for content load
        caller.pause("3000");
        caller.writeToReport("End of executing APIM_434");	
    }
    /**
     *  Business component APIM2_788.
     */
    public final static void APIM2_788(final SeleniumTestBase caller, final String param_APIName, final String param_APIContext, final String param_APITag, final String param_Description, final String param_URLPattern, final String param_verbMethodGET, final String param_ProductionEndPontJaxRS, final String param_Comments, final String param_tenantOrAdminStoreOne, final String param_tenantOrAdminPublisherOne, final String param_serverNameDomainOne, final String param_storeURL) throws Exception {
        //APIM2-788: Add a comment to an API in the store
        caller.writeToReport("Start Executing APIM2-788");
        //create API
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Type API Name
        String varAPIName = param_APIName+caller.generateData("int",3);
        caller.type("APIPublisherAdd.tf_APIName",varAPIName);
        //Store API name as a variable
        caller.store("keyAPIName","String",varAPIName);
        //generating context value
        String varAPIContext = param_APIContext+caller.generateData("int",3);
        //Type API context
        caller.type("APIPublisherAdd.tf_APIContext",varAPIContext);
        //Storing Context value
        caller.store("keyAPIContext","String",varAPIContext);
        //Setting variable for API version
        String varAPIVersion = "v1.0."+caller.generateData("int",1);
        //Type API Version
        caller.type("APIPublisherAdd.tf_APIVersion",varAPIVersion);
        //storing version value
        caller.store("keyAPIVersion","String",varAPIVersion);
        //Setting variable for API Tag
        String APITag = param_APITag+caller.generateData("int",3);
        //Type Description
        caller.type("APIPublisherAdd.tf_Discription",param_Description);
        //Type API tags
        caller.type("APIPublisherAdd.tf_Tags",APITag);
        caller.pause("2000");
        caller.fireEvent("KEY%key=\n","2000");
        caller.type("APIPublisherAdd.tf_URLPattern",param_URLPattern);
        //setting the value 'GET'
        caller.click("APIPublisherBrowse.chk_verbMethod","verb_PARAM:" + param_verbMethodGET);
        caller.click("APIPublisherBrowse.btn_Add");
        caller.click("APIPublisherAdd.btn_Save");
        //waite for content load
        caller.pause("3000");
        //wait for content load
        caller.pause("5000");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //API Manage Section
        //wait for content load
        caller.pause("8000");
        //Go to browse page
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",varAPIName);
        caller.pause("2000");
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPIName);
        //click on edit
        caller.click("APIPublisherBrowse.lnk_Edit");
        //click on next implement
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //click on manage API
        caller.click("APIPublisherBrowse.ele_lblManagedAPI");
        //type production end point
        caller.type("APIPublisherBrowse.tf_ProductionEndPoint",param_ProductionEndPontJaxRS);
        //click on save
        caller.click("APIPublisherBrowse.btn_SaveManagedAPI");
        //waiting for content load
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_NextManage");
        //waiting for content load
        caller.pause("2000");
        //selecting tiers
        lib_Common.bc_SelectTiers(caller);
        //save the API
        caller.click("APIPublisherBrowse.btn_SaveAndPublish");
        //waiting for content load
        caller.pause("3000");
        //API is successfully published
        caller.click("APIPublisherBrowse.btn_Close");
        //waiting for content load
        caller.pause("2000");
        //go to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //select the server name
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        //waiting for content load
        caller.pause("3000");
        //log into the store user
        lib_Common.bc_StoreLogin(caller, param_tenantOrAdminStoreOne);
        //select the API
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPIName);
        //type comments
        caller.type("APIStoreHome.tf_CommentsOfAPI",param_Comments);
        //click on add comment button
        caller.click("APIStoreHome.btn_AddComment");
        //waiting for content load
        caller.pause("2000");
        //reload the page
        caller.fireEvent("KEY%key=F5","2000");
        //retrieve store user name
        String varTenantOneStoreUserOne = caller.retrieveString("keyTenantOneStoreUserOne");
        //verifying comment content
        caller.checkElementPresent("APIStoreHome.ele_CommentText","param_comments_PARAM:" + param_Comments,false,"");
        //log out from the store
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //Waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //Waiting for content load
        caller.pause("2000");
        caller.writeToReport("End of  Executing APIM2-788");	
    }
    /**
     *  Business component APIM2_789.
     */
    public final static void APIM2_789(final SeleniumTestBase caller, final String param_storeURL, final String param_serverNameDomainOne) throws Exception {
        //APIM2-789: View API comments without logging in to the store
        caller.writeToReport("Start Executing APIM2-789");
        //go to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //select the server name
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        //retrieve API name
        String varAPIName = caller.retrieveString("keyAPIName");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPIName);
        //verifying login button for the store
        caller.checkElementPresent("APIStoreHome.lnk_login",false,"");
        //verifying comments
        caller.checkElementPresent("APIStoreHome.ele_lblComments",false,"");
        //verifying add comment button is not available
        caller.checkObjectProperty("APIStoreHome.btn_AddComment","ELEMENTPRESENT","false",false,"");
        caller.writeToReport("End of  Executing APIM2-789");	
    }
    /**
     *  Business component APIM_775.
     */
    public final static void APIM_775(final SeleniumTestBase caller, final String param_adminStoreOne, final String param_storeURL, final String param_topicSubject, final String param_topicDescription, final String param_serverName) throws Exception {
        //APIM2-775:  Create a forum topic as a newly registered user
        caller.writeToReport("Start  Executing APIM2-775");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + param_serverName);
        //Waiting for content load
        caller.pause("2000");
        lib_Common.bc_StoreLogin(caller, param_adminStoreOne);
        //Waiting for content load
        caller.pause("2000");
        caller.click("APIStoreSignUp.btn_Forum");
        //Waiting for content load
        caller.pause("2000");
        caller.click("APIStoreForums.btn_CreateNewTopic");
        //create new topic
        caller.type("APIStoreForums.tf_TopicSubject",param_topicSubject);
        //type topic description
        caller.type("APIStoreForums.tf_TopicDescription",param_topicDescription);
        caller.click("APIStoreForums.btn_CreateTopic");
        //Waiting for content load
        caller.pause("3000");
        caller.writeToReport("End Of  Executing APIM2-775");	
    }
    /**
     *  Business component APIM_776.
     */
    public final static void APIM_776(final SeleniumTestBase caller, final String param_storeURL, final String param_adminStoreOne, final String param_topicDescription1, final String param_topicDescription2, final String param_topicDescription3, final String param_serverName) throws Exception {
        //APIM2-776:  Create multiple forum topics
        caller.writeToReport("Start  Executing APIM2-776");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + param_serverName);
        //Waiting for content load
        caller.pause("2000");
        lib_Common.bc_StoreLogin(caller, param_adminStoreOne);
        //Waiting for content load
        caller.pause("2000");
        caller.click("APIStoreSignUp.btn_Forum");
        //Waiting for content load
        caller.pause("2000");
        //create new topic
        caller.click("APIStoreForums.btn_CreateNewTopic");
        String varTopicOne = "TopicOne"+caller.generateData("String",4);
        caller.store("keyTopicOne","String",varTopicOne);
        String varTopicTwo = "TopicTwo"+caller.generateData("String",4);
        caller.store("keyTopicTwo","String",varTopicTwo);
        String varTopicThree = "TopicThree"+caller.generateData("String",4);
        caller.store("keyTopicThree","String",varTopicThree);
        caller.type("APIStoreForums.tf_TopicSubject",varTopicOne);
        caller.type("APIStoreForums.tf_TopicDescription",param_topicDescription1);
        caller.click("APIStoreForums.btn_CreateTopic");
        //Waiting for content load
        caller.pause("3000");
        caller.click("APIStoreSignUp.btn_Forum");
        //Waiting for content load
        caller.pause("2000");
        caller.click("APIStoreForums.btn_CreateNewTopic");
        //Waiting for content load
        caller.pause("2000");
        caller.type("APIStoreForums.tf_TopicSubject",varTopicTwo);
        caller.type("APIStoreForums.tf_TopicDescription",param_topicDescription2);
        caller.click("APIStoreForums.btn_CreateTopic");
        //Waiting for content load
        caller.pause("3000");
        caller.click("APIStoreSignUp.btn_Forum");
        //Waiting for content load
        caller.pause("2000");
        caller.click("APIStoreForums.btn_CreateNewTopic");
        caller.type("APIStoreForums.tf_TopicSubject",varTopicThree);
        caller.type("APIStoreForums.tf_TopicDescription",param_topicDescription3);
        //Waiting for content load
        caller.pause("2000");
        caller.click("APIStoreForums.btn_CreateTopic");
        //Waiting for content load
        caller.pause("8000");
        caller.click("APIStoreSignUp.btn_Forum");
        //verifying topic one
        caller.checkElementPresent("APIStoreForums.lnk_CreatedTopic","param_TopicName_PARAM:" + varTopicOne,false,"");
        caller.click("APIStoreSignUp.btn_Forum");
        //Waiting for content load
        caller.pause("2000");
        //verifying topic two
        caller.checkElementPresent("APIStoreForums.lnk_CreatedTopic","param_TopicName_PARAM:" + varTopicTwo,false,"");
        caller.click("APIStoreSignUp.btn_Forum");
        //Waiting for content load
        caller.pause("2000");
        //verifying topic three
        caller.checkElementPresent("APIStoreForums.lnk_CreatedTopic","param_TopicName_PARAM:" + varTopicThree,false,"");
        caller.writeToReport("End Of  Executing APIM2-776");	
    }
    /**
     *  Business component APIM_780.
     */
    public final static void APIM_780(final SeleniumTestBase caller, final String param_topicReply, final String param_storeURL, final String param_serverNameDomainOne, final String param_serverName) throws Exception {
        //APIM2-780:  Create replies for topic
        caller.writeToReport("Start  Executing APIM2-780");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + param_serverName);
        caller.click("APIStoreSignUp.btn_Forum");
        String varTopicThree = caller.retrieveString("keyTopicThree");
        caller.click("APIStoreForums.lnk_CreatedTopic","param_TopicName_PARAM:" + varTopicThree);
        caller.pause("2000");
        //verifying topic details
        caller.checkElementPresent("APIStoreForums.img_Ratings",false,"");
        caller.checkElementPresent("APIStoreForums.ele_lblReplies",false,"");
        caller.type("APIStoreForums.tf_ReplyTopicField",param_topicReply);
        caller.click("APIStoreForums.btn_ReplyToThread");
        caller.pause("2000");
        //Retrive Admin user name
        String varAdminStoreUserOne = caller.retrieveString("keyAdminStoreUserOne");
        caller.checkElementPresent("APIStoreForums.ele_lblRepliedUser","param_repliedUser_PARAM:" + varAdminStoreUserOne,false,"");
        caller.checkElementPresent("APIStoreForums.btn_ReplyDelete",false,"");
        caller.checkElementPresent("APIStoreForums.btn_ReplyEdit",false,"");
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //Waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //Waiting for content load
        caller.pause("2000");
        caller.writeToReport("End of  Executing APIM2-780");	
    }
    /**
     *  Business component APIM_781.
     */
    public final static void APIM_781(final SeleniumTestBase caller, final String param_storeURL, final String param_replyMessageBody, final String param_serverName) throws Exception {
        //APIM2-780: View topic replies with a user that has not logged in
        caller.writeToReport("Start  Executing APIM2-781");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + param_serverName);
        caller.click("APIStoreSignUp.btn_Forum");
        //retrieve topic name
        String varTopicThree = caller.retrieveString("keyTopicThree");
        caller.click("APIStoreForums.lnk_CreatedTopic","param_TopicName_PARAM:" + varTopicThree);
        //Waiting for content load
        caller.pause("2000");
        String varAdminStoreUserOne = caller.retrieveString("keyAdminStoreUserOne");
        caller.checkElementPresent("APIStoreForums.ele_lblReplyMessageBody","param_replyMessageBody_PARAM:" + param_replyMessageBody,false,"");
        caller.checkElementPresent("APIStoreForums.ele_lblRepliedUser","param_repliedUser_PARAM:" + varAdminStoreUserOne,false,"");
        caller.writeToReport("End Of  Executing APIM2-781");	
    }
    /**
     *  Business component APIM_782.
     */
    public final static void APIM_782(final SeleniumTestBase caller, final String param_adminStoreOne, final String param_serverName, final String param_ReplyContentEdit, final String param_storeURL) throws Exception {
        //APIM2-782:  Edit a topic reply in the forum
        caller.writeToReport("Start  Executing APIM2-782");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + param_serverName);
        //Waiting for content load
        caller.pause("2000");
        //log in the admin user
        lib_Common.bc_StoreLogin(caller, param_adminStoreOne);
        //Waiting for content load
        caller.pause("2000");
        caller.click("APIStoreSignUp.btn_Forum");
        //Waiting for content load
        caller.pause("2000");
        String varTopicThree = caller.retrieveString("keyTopicThree");
        caller.click("APIStoreForums.lnk_CreatedTopic","param_TopicName_PARAM:" + varTopicThree);
        caller.pause("2000");
        //editing the reply
        caller.click("APIStoreForums.btn_ReplyEdit");
        //Waiting for content load
        caller.pause("2000");
        caller.type("APIStoreForums.tf_ReplyTopicField",param_ReplyContentEdit);
        //save the reply
        caller.click("APIStoreForums.btn_ReplyEditSave");
        caller.pause("2000");
        caller.checkElementPresent("APIStoreForums.ele_lblReplyMessageBody","param_replyMessageBody_PARAM:" + param_ReplyContentEdit,false,"");
        caller.writeToReport("End  Executing APIM2-782");	
    }
    /**
     *  Business component APIM2_536.
     */
    public final static void APIM2_536(final SeleniumTestBase caller, final String param_APIName, final String paramAPIContest, final String param_tag, final String param_ProductionEndPontJaxRS, final String param_TenantOrAdmin, final String param_Description, final String param_storeURL) throws Exception {
        //APIM2-536: APIs created given public visibility should be visible to all users.
        caller.writeToReport("Start  Executing APIM2-536");
        //create API
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Type API Name
        String varAPINameOne = param_APIName+caller.generateData("int",2);
        caller.type("APIPublisherAdd.tf_APIName",varAPINameOne);
        //Store API name in to variables
        caller.store("keyAPIName","String",varAPINameOne);
        //auto generate contest
        String APIcontest = paramAPIContest+caller.generateData("int",2);
        caller.store("keyAPIcontest","String",APIcontest);
        //Type API contest
        caller.type("APIPublisherAdd.tf_APIContext",APIcontest);
        //Setting variable for API version
        String APIversion = "v1.0."+caller.generateData("int",1);
        //Type API Version
        caller.type("APIPublisherAdd.tf_APIVersion",APIversion);
        //waiting for content load
        caller.pause("2000");
        //Type API Description
        caller.type("APIPublisherAdd.tf_Discription",param_Description);
        //waiting for content load
        caller.pause("2000");
        String varAPItagOne = param_tag+caller.generateData("int",3);
        caller.store("keyAPItagOne","String",varAPItagOne);
        //Type API tag One
        caller.type("APIPublisherAdd.tf_Tags",varAPItagOne);
        caller.pause("2000");
        caller.fireEvent("KEY%key=\n","3000");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherAdd.btn_Save");
        //wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Yes");
        //waite for content load
        caller.pause("5000");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //API Manage Section
        caller.pause("8000");
        //Go to browse page
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameOne);
        caller.click("APIPublisherBrowse.lnk_Edit");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        caller.click("APIPublisherBrowse.ele_lblManagedAPI");
        caller.type("APIPublisherBrowse.tf_ProductionEndPoint",param_ProductionEndPontJaxRS);
        caller.click("APIPublisherBrowse.btn_SaveManagedAPI");
        //waiting for content load
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_NextManage");
        //waiting for content load
        caller.pause("2000");
        lib_Common.bc_SelectTiers(caller);
        caller.click("APIPublisherBrowse.btn_SaveAndPublish");
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_Close");
        caller.pause("4000");
        //Navigate to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Select the domain
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //Verify the API
        caller.checkElementPresent("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + varAPINameOne,false,"");
        //Login to API Store
        lib_Common.bc_StoreLogin(caller, param_TenantOrAdmin);
        //Verify the API
        caller.checkElementPresent("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + varAPINameOne,false,"");
        caller.writeToReport("End of Execution APIM 536");	
    }
    /**
     *  Business component APIM_783.
     */
    public final static void APIM_783(final SeleniumTestBase caller, final String param_storeURL, final String param_serverName, final String param_adminStoreOne) throws Exception {
        //APIM2-783: Delete a response in the forum topics
        caller.writeToReport("Start  Executing APIM2-783");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + param_serverName);
        //Waiting for content load
        caller.pause("2000");
        caller.click("APIStoreSignUp.btn_Forum");
        caller.pause("2000");
        String varTopicThree = caller.retrieveString("keyTopicThree");
        caller.click("APIStoreForums.lnk_CreatedTopic","param_TopicName_PARAM:" + varTopicThree);
        //Waiting for content load
        caller.pause("2000");
        //deleting the reply
        caller.click("APIStoreForums.btn_ReplyDelete");
        //Waiting for content load
        caller.pause("2000");
        caller.click("APIStoreForums.btn_NoToDeleteReply");
        //Waiting for content load
        caller.pause("2000");
        caller.click("APIStoreForums.btn_ReplyDelete");
        //Waiting for content load
        caller.pause("2000");
        caller.click("APIStoreForums.btn_YesToDeleteReply");
        //Waiting for content load
        caller.pause("3000");
        caller.writeToReport("End  Executing APIM2-783");	
    }
    /**
     *  Business component APIM_784.
     */
    public final static void APIM_784(final SeleniumTestBase caller, final String param_storeURL, final String param_serverName, final String param_adminStoreTwo, final String param_RateStarLevelFour, final String param_StarVerifyFour, final String param_RateStarLevelTwo, final String param_StarVerifyTwo) throws Exception {
        //APIM2-784: Add a rating to the forum topic
        caller.writeToReport("Start  Executing APIM2-784");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + param_serverName);
        //Waiting for content load
        caller.pause("2000");
        caller.click("APIStoreSignUp.btn_Forum");
        //Waiting for content load
        caller.pause("2000");
        String varTopicThree = caller.retrieveString("keyTopicThree");
        caller.click("APIStoreForums.lnk_CreatedTopic","param_TopicName_PARAM:" + varTopicThree);
        //Waiting for content load
        caller.pause("2000");
        //rating the topic
        caller.click("APIStoreForums.ele_RateStarLevel","param_RateStarLevel_PARAM:" + param_RateStarLevelFour);
        caller.pause("2000");
        //verifying the rated topic
        caller.checkElementPresent("APIStoreForums.ele_lblStarVerify","param_StarVerify_PARAM:" + param_StarVerifyFour,false,"");
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //Waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //Waiting for content load
        caller.pause("2000");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + param_serverName);
        //Waiting for content load
        caller.pause("2000");
        //log in admin user
        lib_Common.bc_StoreLogin(caller, param_adminStoreTwo);
        caller.pause("2000");
        caller.click("APIStoreSignUp.btn_Forum");
        caller.pause("2000");
        caller.click("APIStoreForums.lnk_CreatedTopic","param_TopicName_PARAM:" + varTopicThree);
        //Waiting for content load
        caller.pause("2000");
        //rating the topic
        caller.click("APIStoreForums.ele_RateStarLevel","param_RateStarLevel_PARAM:" + param_RateStarLevelTwo);
        //Waiting for content load
        caller.pause("2000");
        //verifying the rated topic
        caller.checkElementPresent("APIStoreForums.ele_lblStarVerify","param_StarVerify_PARAM:" + param_StarVerifyTwo,false,"");
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //Waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //Waiting for content load
        caller.pause("2000");
        caller.writeToReport("End  Executing APIM2-784");	
    }
    /**
     *  Business component APIM2_11.
     */
    public final static void APIM2_11(final SeleniumTestBase caller, final String param_publisherURL, final String param_TenantOrAdmin, final String param_APIStatePublished, final String param_ApplicationName, final String param_newVersion, final String param_storeURL, final String param_TenantOneOrAdminStoreOne, final String param_tierType, final String param_numberOfUsers, final String param_statusDeprecated, final String param_statusPublished, final String param_keyTypeToInvoke, final String param_keywordYes, final String param_buttonNamePost, final String param_postPayloadContext, final String param_postCustomerNameFromPayloadContext, final String param_postResponseCodeTwoHundred, final String param_postResponseHeaders, final String param_buttonNameGet, final String param_getCustomerName, final String param_buttonNamePut, final String param_putCustomerName, final String param_putResponseBodyNoContent, final String param_buttonNameGetForPutVerification, final String param_getCustomerNameForPutVerification, final String param_buttonNameHead, final String param_headResponseHeadersNull, final String param_buttonNameDelete, final String param_deleteResponseHeaders, final String param_buttonNameGetForDeleteVerification, final String param_getResponseCodeTwoHundredAndFourForDeleteVerification, final String param_getResponseHeadersNullForDeleteVerification, final String param_keyTypeToInvokeSandbox, final String param_keyYes, final String param_getResponseCodeTwoHundredForPutVerification, final String param_getResponseHeadersForPutVerification, final String param_deleteResponseBodyNoContent, final String param_noContent, final String param_headResponseBodyNoContent, final String param_publisherOneOfTenantOneOrAdmin, final String param_apiName, final String param_apiContext, final String param_apiVersionOne, final String param_apiVisibilityPublic, final String param_apiImage, final String param_apiTagName, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_productionEndpoint, final String param_sandboxEndpoint, final String param_keyWordNo) throws Exception {
        //Check whether user can publish new copy with both deprecate old version and require resubscription
        caller.writeToReport("Start of testcase APIM2_11");
        lib_Common.bc_PublisherLogin(caller, param_publisherURL,param_publisherOneOfTenantOneOrAdmin);
        lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke(caller, param_apiName,param_apiContext,param_apiVersionOne,param_apiVisibilityPublic,param_apiImage,param_apiTagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_keyYes,param_sandboxEndpoint,param_keyWordNo,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_keyWordNo,param_keyWordNo,"");
        //Navigate to Publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Check for the published API
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        String APIName = caller.retrieveString("key_APINameDesign");
        String APIversion = caller.retrieveString("key_APIVersion");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        //wait till api display
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_TenantOneOrAdminStoreOne);
        //API Subcription
        //Go to My Subcription window to Generate keys
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + APIName);
        //waiting for content load
        caller.pause("3000");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_ApplicationName);
        caller.select("APIStoreAPIs.ele_ddtierToSubscribe",param_tierType);
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        caller.click("APIStoreHome.lnk_MySubcription");
        //verify that the landed page is My Subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_ddApplicationWithSubscription",false,"");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        //wait for content load
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        }
        //wait for content load
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        }
        //wait for content load
        caller.pause("2000");
        //wait for content load
        caller.pause("1000");
        //verify that the api is visible under subscriptions
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsPublished","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion,false,"");
        //Check the Subcribed API Details for tenant User
        if(param_TenantOneOrAdminStoreOne.equals("TenantOneStoreOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        //Check the Subcribed API Details for Admin
        } else if(param_TenantOneOrAdminStoreOne.equals("AdminStoreOne")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        }
        caller.pause("2000");
        //Logout from API store
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("3000");
        //Navigate to Publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Check for the published API
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        //wait till api display
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        //Go inside the API
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        //wait for content load
        caller.click("APIPublisherBrowse.lnk_Overview");
        //creating new copy of published API
        caller.click("APIPublisherBrowse.btn_CreateNewVersion");
        caller.checkElementPresent("APIPublisherBrowse.tf_NewVersion",false,"");
        caller.type("APIPublisherBrowse.tf_NewVersion",param_newVersion);
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_done");
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.pause("3000");
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //wait untill page load
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_newVersion + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName);
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_newVersion + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName);
        }
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //wait for content load
        caller.pause("5000");
        //Select the Published Status
        caller.select("APIPublisherBrowse.ele_ddState",param_APIStatePublished);
        caller.pause("2000");
        caller.click("APIPublisherBrowse.chk_deprecateOldVersion");
        caller.pause("2000");
        //Click on update button
        caller.click("APIPublisherBrowse.btn_UpdateState");
        //check the successfull message
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStateChangeMessage",false,"");
        //Goto API brouws
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.pause("3000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_newVersion + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName + "_PARAM," + "param_status_PARAM:" + param_statusPublished,false,"");
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName);
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_newVersion + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_status_PARAM:" + param_statusPublished,false,"");
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName);
        }
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //wait for content load
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        //Search  the API Copy without login
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait
        caller.pause("2000");
        //Checking API details
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        //check the old API Version
        if(!caller.checkElementPresent("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIversion)){
        caller.writeToReport("Old API version not visible");
        }
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion,false,"");
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        if(!caller.checkElementPresent("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIversion)){
        caller.writeToReport("Old API version not visible");
        }
        //check the old API Version
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion,false,"");
        }
        caller.pause("5000");
        //Login into API  store and check the API Details
        lib_Common.bc_StoreLogin(caller, param_TenantOneOrAdminStoreOne);
        //wait for content load
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        //verify that the api is visible under subscriptions
        if(param_TenantOneOrAdminStoreOne.equals("TenantOneStoreOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsDeprecated","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion,false,"");
        if(!caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType)){
        caller.writeToReport("Old API Not Visible");
        }
        caller.pause("2000");
        caller.click("APIStoreMySubcription.ele_lblSubcribedAPIsDeprecated","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion);
        //wait for page load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_statusDeprecated,false,"");
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        } else if(param_TenantOneOrAdminStoreOne.equals("AdminStoreOne")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsDeprecated","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion,false,"");
        caller.pause("2000");
        if(!caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType)){
        caller.writeToReport("Old API Not Visible");
        }
        caller.pause("2000");
        caller.click("APIStoreMySubcription.ele_lblSubcribedAPIsDeprecated","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion);
        //wait for page load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_statusDeprecated,false,"");
        }
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait
        caller.pause("2000");
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varStoreUserName = caller.retrieveString("keyTenantOneStoreUserOne");
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion,false,"");
        caller.click("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion);
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varStoreAdminUserName = caller.retrieveString("keyAdminStoreUserOne");
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion,false,"");
        caller.click("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion);
        }
        //waiting for content load
        caller.pause("3000");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_ApplicationName);
        caller.select("APIStoreAPIs.ele_ddtierToSubscribe",param_tierType);
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_MySubcription");
        //verify that the landed page is My Subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_ddApplicationWithSubscription",false,"");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        //wait for content load
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        }
        //wait for content load
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        }
        //wait for content load
        caller.pause("2000");
        //wait for content load
        caller.pause("1000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        //verify that the api is visible under subscriptions
        if(param_TenantOneOrAdminStoreOne.equals("TenantOneStoreOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsDeprecated","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion,false,"");
        caller.pause("2000");
        caller.click("APIStoreMySubcription.ele_lblSubcribedAPIsDeprecated","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion);
        //wait for page load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_statusDeprecated,false,"");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        //Check the Subcribed API Details
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        caller.click("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType);
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_statusPublished,false,"");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        caller.pause("2000");
        } else if(param_TenantOneOrAdminStoreOne.equals("AdminStoreOne")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsDeprecated","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion,false,"");
        caller.pause("2000");
        caller.click("APIStoreMySubcription.ele_lblSubcribedAPIsDeprecated","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion);
        //wait for page load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_statusDeprecated,false,"");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        caller.click("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType);
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_statusPublished,false,"");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        }
        caller.pause("3000");
        lib_Common.bc_APIStore_InvokeAPI(caller, APIName,APIversion,param_ApplicationName,param_keyTypeToInvokeSandbox,param_keyYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNameGet,param_getCustomerName,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_postResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_keyYes,param_buttonNameHead,param_headResponseBodyNoContent,param_postResponseCodeTwoHundred,param_headResponseHeadersNull,param_keyYes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_postResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_noContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        lib_Common.bc_APIStore_InvokeAPI(caller, APIName,APIversion,param_ApplicationName,param_keyTypeToInvoke,param_keyYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNameGet,param_getCustomerName,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_postResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_keyYes,param_buttonNameHead,param_headResponseBodyNoContent,param_postResponseCodeTwoHundred,param_headResponseHeadersNull,param_keyYes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_postResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_noContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("3000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        lib_Common.bc_APIStore_InvokeAPI(caller, APIName,param_newVersion,param_ApplicationName,param_keyTypeToInvokeSandbox,param_keyYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNameGet,param_getCustomerName,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_postResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_keyYes,param_buttonNameHead,param_headResponseBodyNoContent,param_postResponseCodeTwoHundred,param_headResponseHeadersNull,param_keyYes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_postResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_noContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        lib_Common.bc_APIStore_InvokeAPI(caller, APIName,param_newVersion,param_ApplicationName,param_keyTypeToInvoke,param_keyYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNameGet,param_getCustomerName,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_postResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_keyYes,param_buttonNameHead,param_headResponseBodyNoContent,param_postResponseCodeTwoHundred,param_headResponseHeadersNull,param_keyYes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_postResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_noContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("2000");
        caller.writeToReport("End of the Testcase APIM2-11");	
    }
    /**
     *  Business component APIM2_573.
     */
    public final static void APIM2_573(final SeleniumTestBase caller, final String param_TenantOrAdmin, final String param_storeURL, final String param_publisherURL, final String param_ApplicationName, final String param_TenantOneOrAdminPublisher, final String param_no, final String param_keyTypeToInvokeproduction, final String param_postResponseCodeFourHundredAndThree, final String param_APIName, final String param_APIContext, final String param_APIVersion, final String param_APIvisibility, final String param_tagName, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_ProductionEndPoint, final String param_sandboxEndpoint, final String param_TenantOrAdminStoreOne, final String param_buttonNamePost, final String aram_postPayloadContext, final String param_postCustomerNameFromPayloadContext, final String param_postResponseHeaders, final String param_yes, final String param_postPayloadContext, final String param_IsPostExecuted) throws Exception {
        caller.writeToReport("Start Of Execution APIM2_573");
        lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke(caller, param_APIName,param_APIContext,param_APIVersion,param_APIvisibility,"",param_tagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_ProductionEndPoint,param_yes,param_sandboxEndpoint,param_no,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_no,param_no,"");
        String varAPINameDesign = caller.retrieveString("key_APINameDesign");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"4000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_TenantOrAdminStoreOne);
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APIs");
        //waiting for content load
        caller.pause("4000");
        caller.type("APIStoreHome.tf_APISearchStore",varAPINameDesign);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersion);
        //waiting for content load
        caller.pause("3000");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_ApplicationName);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        //waiting for content load
        caller.pause("4000");
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        //waiting for content load
        caller.pause("4000");
        //Generate Keys for the Subscription
        //wait for page load
        caller.pause("3000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        //wait for page load
        caller.pause("4000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("3000");
        //Store Access token
        String varTokenReGen = caller.getStringProperty("APIStoreMySubcription.ele_lblAccessTokenProduction","TEXT:");
        caller.store("key_TokenReGen","String",varTokenReGen);
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        String varTokenReGen = caller.getStringProperty("APIStoreMySubcription.ele_lblAccessTokenProduction","TEXT:");
        caller.store("key_TokenReGen","String",varTokenReGen);
        }
        //wait for content load
        //Store Access token
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        }
        //wait for content load
        caller.pause("3000");
        //verify the API details on my subscriptions page
        //Navigate to 'My subscriptions
        caller.click("APIStoreHome.lnk_MySubcription");
        //wait for content load
        caller.pause("3000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        //wait for content load
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        caller.click("APIStoreMySubcription.btn_deleteAPI","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "Param_APIVersion_PARAM:" + param_APIVersion);
        //wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreMySubcription.btn_Yes",false,"");
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreMySubcription.btn_Yes");
        //wait for content load
        caller.pause("4000");
        if(! caller.checkElementPresent("APIStoreMySubcription.btn_deleteAPI","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "Param_APIVersion_PARAM:" + param_APIVersion)){
        }
        //Navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"4000");
        //wait for content load
        caller.pause("3000");
        caller.click("APIPublisherHome.lnk_Browse");
        //wait for content load
        caller.pause("3000");
        caller.type("APIPublisherHome.tf_APISearch",varAPINameDesign);
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameDesign);
        //wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.lnk_Users");
        //wait for content load
        caller.pause("2000");
        if(! caller.checkElementPresent("APIPublisherBrowse.ele_lblActiveSubscriptionGrid")){
        }
        caller.pause("2000");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"4000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //wait for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APIs");
        //wait for content load
        caller.pause("3000");
        caller.type("APIStoreHome.tf_APISearchStore",varAPINameDesign);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait for content load
        caller.pause("3000");
        caller.click("APIStoreAPIs.lnk_APINameSearch","param_APIName_PARAM:" + varAPINameDesign);
        //wait for content load
        caller.pause("3000");
        //check the availability of api console tab in API
        caller.checkElementPresent("APIStoreAPIs.ele_tabAPIConsole",false,"");
        caller.click("APIStoreAPIs.ele_tabAPIConsole");
        //wait for content load
        caller.pause("2000");
        //verify that the landed page is relavent api
        caller.checkElementPresent("APIStoreAPIConsole.ele_lblAPIName","param_APIName_PARAM:" + varAPINameDesign,false,"");
        //wait for content load
        caller.pause("2000");
        String var_AccessToken = caller.retrieveString("key_TokenReGen");
        caller.type("APIStoreAPIConsole.tf_AccessToken",var_AccessToken);
        //wait for content load
        caller.pause("2000");
        //Invoking the commands depending on user inputs
        caller.click("APIStoreAPIConsole.btn_mainCommandButtons","param_buttonName_PARAM:" + param_buttonNamePost);
        //wait for content load
        caller.pause("1000");
        //verify that the view is expanded
        caller.checkElementPresent("APIStoreAPIConsole.tf_postPayload",false,"");
        caller.type("APIStoreAPIConsole.tf_postPayload",param_postPayloadContext);
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreAPIConsole.btn_postTryOut");
        //wait for content load
        caller.pause("1000");
        //verify the response code
        caller.checkElementPresent("APIStoreAPIConsole.ele_lblPostResponseCode","param_responseCode_PARAM:" + param_postResponseCodeFourHundredAndThree,false,"");
        caller.click("APIStoreAPIConsole.btn_mainCommandButtons","param_buttonName_PARAM:" + param_buttonNamePost);
        //wait for content load
        caller.pause("2000");
        caller.writeToReport("End Of Execution APIM2_573");	
    }
    /**
     *  Business component APIM2_12.
     */
    public final static void APIM2_12(final SeleniumTestBase caller, final String param_publisherURL, final String param_TenantOrAdmin, final String param_APIStatePublished, final String param_ApplicationName, final String param_newVersion, final String param_storeURL, final String param_TenantOneOrAdminStoreOne, final String param_tierType, final String param_numberOfUsers, final String param_statusDeprecated, final String param_statusPublished, final String param_keyTypeToInvoke, final String param_keywordYes, final String param_buttonNamePost, final String param_postPayloadContext, final String param_postCustomerNameFromPayloadContext, final String param_postResponseCodeTwoHundred, final String param_postResponseHeaders, final String param_buttonNameGet, final String param_getCustomerName, final String param_buttonNamePut, final String param_putCustomerName, final String param_putResponseBodyNoContent, final String param_buttonNameGetForPutVerification, final String param_getCustomerNameForPutVerification, final String param_buttonNameHead, final String param_headResponseHeadersNull, final String param_buttonNameDelete, final String param_deleteResponseHeaders, final String param_buttonNameGetForDeleteVerification, final String param_getResponseCodeTwoHundredAndFourForDeleteVerification, final String param_getResponseHeadersNullForDeleteVerification, final String param_keyTypeToInvokeSandbox, final String param_headResponseBodyNoContent, final String param_noContent, final String param_keyYes, final String param_getResponseCodeTwoHundredForPutVerification, final String param_getResponseHeadersForPutVerification, final String param_deleteResponseBodyNoContent, final String param_apiName, final String param_apiContext, final String param_apiVersionOne, final String param_apiVisibilityPublic, final String param_apiImage, final String param_apiTagName, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_productionEndpoint, final String param_sandboxEndpoint, final String param_keyWordNo) throws Exception {
        //APIM2-12: Check whether user can publish new copy given require re-subscription.
        caller.writeToReport("Start of testcase APIM2_12");
        //Navigate to Publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke(caller, param_apiName,param_apiContext,param_apiVersionOne,param_apiVisibilityPublic,param_apiImage,param_apiTagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_keyYes,param_sandboxEndpoint,param_keyWordNo,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_keyWordNo,param_keyWordNo,"");
        //Navigate to Publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Check for the published API
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        String APIName = caller.retrieveString("key_APINameDesign");
        String APIversion = caller.retrieveString("key_APIVersion");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        //wait till api display
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_TenantOneOrAdminStoreOne);
        //Subcribe the API
        //Go to My Subcription window to Generate keys
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + APIName);
        //waiting for content load
        caller.pause("3000");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_ApplicationName);
        caller.select("APIStoreAPIs.ele_ddtierToSubscribe",param_tierType);
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        //verify that the landed page is My Subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_ddApplicationWithSubscription",false,"");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        //wait for content load
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        }
        //wait for content load
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        }
        //wait for content load
        caller.pause("2000");
        //wait for content load
        caller.pause("1000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        //verify that the api is visible under subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsPublished","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion,false,"");
        //Check the Subcribed API Details for tenant User
        if(param_TenantOneOrAdminStoreOne.equals("TenantOneStoreOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        //Check the Subcribed API Details for Admin
        } else if(param_TenantOneOrAdminStoreOne.equals("AdminStoreOne")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        }
        caller.pause("2000");
        //Logout from API store
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("3000");
        //Navigate to Publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Check for the published API
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        //wait till api display
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        //Go inside the API
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        //wait for content load
        caller.click("APIPublisherBrowse.lnk_Overview");
        //creating new copy of published API
        caller.click("APIPublisherBrowse.btn_CreateNewVersion");
        caller.checkElementPresent("APIPublisherBrowse.tf_NewVersion",false,"");
        caller.type("APIPublisherBrowse.tf_NewVersion",param_newVersion);
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_done");
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.pause("3000");
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //wait untill page load
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_newVersion + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName);
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_newVersion + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName);
        }
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //wait for content load
        caller.pause("5000");
        //Select the Published Status
        caller.select("APIPublisherBrowse.ele_ddState",param_APIStatePublished);
        caller.pause("2000");
        //Click on update button
        caller.click("APIPublisherBrowse.btn_UpdateState");
        //check the successfull message
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStateChangeMessage",false,"");
        //Goto API brouws
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.pause("4000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_newVersion + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName + "_PARAM," + "param_status_PARAM:" + param_statusPublished,false,"");
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName);
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_newVersion + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_status_PARAM:" + param_statusPublished,false,"");
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName);
        }
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //wait for content load
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        //Search  the API Copy without login
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait
        caller.pause("2000");
        //Checking API details
        if(param_TenantOneOrAdminStoreOne.equals("TenantOnePublisherOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        //check the old API Version
        if(!caller.checkElementPresent("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIversion)){
        caller.writeToReport("Old API version not visible");
        }
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion,false,"");
        } else {
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        if(!caller.checkElementPresent("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIversion)){
        caller.writeToReport("Old API version not visible");
        }
        //check the old API Version
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion,false,"");
        }
        caller.pause("5000");
        //Login into API  store and check the API Details
        lib_Common.bc_StoreLogin(caller, param_TenantOneOrAdminStoreOne);
        //wait for content load
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        //verify that the api is visible under subscriptions
        if(param_TenantOneOrAdminStoreOne.equals("TenantOneStoreOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        if(!caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType)){
        caller.writeToReport("Old API Not Visible");
        }
        caller.pause("2000");
        caller.click("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType);
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_statusPublished,false,"");
        //wait for page load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        } else if(param_TenantOneOrAdminStoreOne.equals("AdminStoreOne")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        caller.pause("2000");
        if(!caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType)){
        caller.writeToReport("Old API Not Visible");
        }
        caller.pause("2000");
        caller.click("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType);
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_statusPublished,false,"");
        //wait for page load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        }
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait
        caller.pause("2000");
        if(param_TenantOneOrAdminStoreOne.equals("TenantOnePublisherOne")){
        String varStoreUserName = caller.retrieveString("keyTenantOneStoreUserOne");
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion,false,"");
        caller.click("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion);
        } else {
        String varStoreAdminUserName = caller.retrieveString("keyAdminStoreUserOne");
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion,false,"");
        caller.click("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion);
        }
        //waiting for content load
        caller.pause("3000");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_ApplicationName);
        caller.select("APIStoreAPIs.ele_ddtierToSubscribe",param_tierType);
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_MySubcription");
        //verify that the landed page is My Subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_ddApplicationWithSubscription",false,"");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        //wait for content load
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        }
        //wait for content load
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        }
        //wait for content load
        caller.pause("2000");
        //wait for content load
        caller.pause("1000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        //verify that the api is visible under subscriptions
        if(param_TenantOneOrAdminStoreOne.equals("TenantOneStoreOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        caller.pause("2000");
        caller.click("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType);
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_statusPublished,false,"");
        //wait for page load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        //Check the Subcribed API Details
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        caller.click("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType);
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_statusPublished,false,"");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        caller.pause("2000");
        } else if(param_TenantOneOrAdminStoreOne.equals("AdminStoreOne")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        caller.pause("2000");
        caller.click("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType);
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_statusPublished,false,"");
        //wait for page load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        //Check the Subcribed API Details
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        caller.click("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType);
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_statusPublished,false,"");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        }
        caller.pause("3000");
        lib_Common.bc_APIStore_InvokeAPI(caller, APIName,param_newVersion,param_ApplicationName,param_keyTypeToInvoke,param_keyYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNameGet,param_getCustomerName,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_postResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_keyYes,param_buttonNameHead,param_headResponseBodyNoContent,param_postResponseCodeTwoHundred,param_headResponseHeadersNull,param_keyYes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_postResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_noContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        lib_Common.bc_APIStore_InvokeAPI(caller, APIName,param_newVersion,param_ApplicationName,param_keyTypeToInvokeSandbox,param_keyYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNameGet,param_getCustomerName,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_postResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_keyYes,param_buttonNameHead,param_headResponseBodyNoContent,param_postResponseCodeTwoHundred,param_headResponseHeadersNull,param_keyYes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_postResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_noContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        caller.writeToReport("End of the testcase APIM2-12");	
    }
    /**
     *  Business component APIM_787.
     */
    public final static void APIM_787(final SeleniumTestBase caller, final String param_serverName, final String param_storeURL, final String param_userName, final String param_password, final String param_firstName, final String param_lastName, final String param_email) throws Exception {
        //APIM2-787:   Signup with a new user through the API store
        caller.writeToReport("Start  Executing APIM2-787");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + param_serverName);
        caller.click("APIStoreHome.btn_SignUp");
        String varSelfSignUpUserName = param_userName+caller.generateData("int",3);
        //storing API name
        caller.store("keySelfSignUpUserName","String",varSelfSignUpUserName);
        //type user name
        caller.type("APIStoreSignUp.tf_UserName",varSelfSignUpUserName);
        caller.type("APIStoreSignUp.tf_Password",param_password);
        caller.type("APIStoreSignUp.tf_ReTypePassword",param_password);
        caller.type("APIStoreSignUp.tf_FirstName",param_firstName);
        caller.type("APIStoreSignUp.tf_LastName",param_lastName);
        caller.type("APIStoreSignUp.tf_Email",param_email);
        caller.click("APIStoreSignUp.btn_Submit");
        //Waiting for content load
        caller.pause("3000");
        caller.click("APIStoreSignUp.lnk_Ok");
        //Waiting for content load
        caller.pause("2000");
        caller.type("APIStoreSignUp.tf_userNameLogIn",varSelfSignUpUserName);
        caller.type("APIStoreSignUp.tf_PasswordLogIn",param_password);
        caller.click("APIStoreSignUp.lnk_Login");
        //Waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + param_serverName);
        //Waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreHome.lnk_APIs",false,"");
        //Waiting for content load
        caller.pause("3000");
        caller.writeToReport("End Of  Executing APIM2-787");	
    }
    /**
     *  Business component APIM2_13.
     */
    public final static void APIM2_13(final SeleniumTestBase caller, final String param_statusDeprecated, final String param_publisherURL, final String param_TenantOrAdmin, final String param_TenantOneOrAdminStoreOne, final String param_ApplicationName, final String param_tierType, final String param_newVersion, final String param_numberOfUsers, final String param_statusPublished, final String param_storeURL, final String param_numberOfUsersOne, final String param_keyTypeToInvoke, final String param_keywordYes, final String param_buttonNamePost, final String param_postPayloadContext, final String param_postCustomerNameFromPayloadContext, final String param_postResponseCodeTwoHundred, final String param_postResponseHeaders, final String param_buttonNameGet, final String param_getCustomerName, final String param_buttonNamePut, final String param_putCustomerName, final String param_putResponseBodyNoContent, final String param_buttonNameGetForPutVerification, final String param_getCustomerNameForPutVerification, final String param_buttonNameHead, final String param_headResponseHeadersNull, final String param_buttonNameDelete, final String param_deleteResponseHeaders, final String param_buttonNameGetForDeleteVerification, final String param_getResponseCodeTwoHundredAndFourForDeleteVerification, final String param_getResponseHeadersNullForDeleteVerification, final String param_noContent, final String param_headResponseBodyNoContent, final String param_deleteResponseBodyNoContent, final String param_keyTypeToInvokeSandbox, final String param_keyYes, final String param_getResponseCodeTwoHundredForPutVerification, final String param_getResponseHeadersForPutVerification, final String param_apiName, final String param_apiContext, final String param_apiVersionOne, final String param_apiVisibilityPublic, final String param_apiImage, final String param_apiTagName, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_productionEndpoint, final String param_sandboxEndpoint, final String param_keyWordNo) throws Exception {
        //APIM2-13: Check whether user can publish new copy given deprecate old versions option
        caller.writeToReport("Start of testcase APIM2_13");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke(caller, param_apiName,param_apiContext,param_apiVersionOne,param_apiVisibilityPublic,param_apiImage,param_apiTagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_keyYes,param_sandboxEndpoint,param_keyWordNo,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_keyWordNo,param_keyWordNo,"");
        //Navigate to Publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Check for the published API
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        String APIName = caller.retrieveString("key_APINameDesign");
        String APIversion = caller.retrieveString("key_APIVersion");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        //wait till api display
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_TenantOneOrAdminStoreOne);
        //Subcribe the API
        //Go to My Subcription window to Generate keys
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + APIName);
        //waiting for content load
        caller.pause("3000");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_ApplicationName);
        caller.select("APIStoreAPIs.ele_ddtierToSubscribe",param_tierType);
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        caller.click("APIStoreHome.lnk_MySubcription");
        //verify that the landed page is My Subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_ddApplicationWithSubscription",false,"");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        //wait for content load
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        }
        //wait for content load
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        }
        //wait for content load
        caller.pause("2000");
        //wait for content load
        caller.pause("1000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        //verify that the api is visible under subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsPublished","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion,false,"");
        if(param_TenantOneOrAdminStoreOne.equals("TenantOneStoreOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        //Check the Subcribed API Details for Admin
        } else if(param_TenantOneOrAdminStoreOne.equals("AdminStoreOne")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        }
        caller.pause("2000");
        //Logout from API store
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("3000");
        //Navigate to Publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Check for the published API
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        //wait till api display
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        //Go inside the API
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        //wait for content load
        caller.click("APIPublisherBrowse.lnk_Overview");
        //creating new copy of published API
        caller.click("APIPublisherBrowse.btn_CreateNewVersion");
        caller.checkElementPresent("APIPublisherBrowse.tf_NewVersion",false,"");
        caller.type("APIPublisherBrowse.tf_NewVersion",param_newVersion);
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_done");
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //wait untill page load
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_newVersion + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName);
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_newVersion + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName);
        }
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //wait for content load
        caller.pause("5000");
        //Select the Published Status
        caller.select("APIPublisherBrowse.ele_ddState",param_statusPublished);
        caller.pause("2000");
        caller.click("APIPublisherBrowse.chk_deprecateOldVersion");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.chk_requireReSubmision");
        caller.pause("2000");
        //Click on update button
        caller.click("APIPublisherBrowse.btn_UpdateState");
        //check the successfull message
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStateChangeMessage",false,"");
        //Goto API brouws
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.pause("4000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_newVersion + "_PARAM," + "param_users_PARAM:" + param_numberOfUsersOne,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName + "_PARAM," + "param_status_PARAM:" + param_statusPublished,false,"");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIversion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName + "_PARAM," + "param_status_PARAM:" + param_statusDeprecated,false,"");
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName);
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_newVersion + "_PARAM," + "param_users_PARAM:" + param_numberOfUsersOne,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_status_PARAM:" + param_statusPublished,false,"");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIversion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_status_PARAM:" + param_statusDeprecated,false,"");
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName);
        }
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //wait for content load
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        //Search  the API Copy without login
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait
        caller.pause("2000");
        //Checking API details
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        //check the old API Version
        if(!caller.checkElementPresent("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIversion)){
        caller.writeToReport("Old API version not visible");
        }
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion,false,"");
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        if(!caller.checkElementPresent("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIversion)){
        caller.writeToReport("Old API version not visible");
        }
        //check the old API Version
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion,false,"");
        }
        caller.pause("5000");
        //Login into API  store and check the API Details
        lib_Common.bc_StoreLogin(caller, param_TenantOneOrAdminStoreOne);
        //wait for content load
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        //verify that the api is visible under subscriptions
        if(param_TenantOneOrAdminStoreOne.equals("TenantOneStoreOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsDeprecated","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion,false,"");
        caller.pause("2000");
        caller.click("APIStoreMySubcription.ele_lblSubcribedAPIsDeprecated","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion);
        //wait for page load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_statusDeprecated,false,"");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        caller.click("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType);
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_statusPublished,false,"");
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        } else if(param_TenantOneOrAdminStoreOne.equals("AdminStoreOne")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsDeprecated","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion,false,"");
        caller.pause("2000");
        caller.pause("2000");
        caller.click("APIStoreMySubcription.ele_lblSubcribedAPIsDeprecated","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion);
        //wait for page load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_statusDeprecated,false,"");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        caller.click("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType);
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_statusPublished,false,"");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        }
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        caller.pause("3000");
        lib_Common.bc_APIStore_InvokeAPI(caller, APIName,APIversion,param_ApplicationName,param_keyTypeToInvoke,param_keyYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNameGet,param_getCustomerName,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_postResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_keyYes,param_buttonNameHead,param_headResponseBodyNoContent,param_postResponseCodeTwoHundred,param_headResponseHeadersNull,param_keyYes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_postResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_noContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        lib_Common.bc_APIStore_InvokeAPI(caller, APIName,param_newVersion,param_ApplicationName,param_keyTypeToInvokeSandbox,param_keyYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNameGet,param_getCustomerName,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_postResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_keyYes,param_buttonNameHead,param_headResponseBodyNoContent,param_postResponseCodeTwoHundred,param_headResponseHeadersNull,param_keyYes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_postResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_noContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        lib_Common.bc_APIStore_InvokeAPI(caller, APIName,APIversion,param_ApplicationName,param_keyTypeToInvoke,param_keyYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNameGet,param_getCustomerName,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_postResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_keyYes,param_buttonNameHead,param_headResponseBodyNoContent,param_postResponseCodeTwoHundred,param_headResponseHeadersNull,param_keyYes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_postResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_noContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        lib_Common.bc_APIStore_InvokeAPI(caller, APIName,param_newVersion,param_ApplicationName,param_keyTypeToInvokeSandbox,param_keyYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNameGet,param_getCustomerName,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_postResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_keyYes,param_buttonNameHead,param_headResponseBodyNoContent,param_postResponseCodeTwoHundred,param_headResponseHeadersNull,param_keyYes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_postResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_noContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        caller.writeToReport("End of the testcase APIM2-13");	
    }
    /**
     *  Business component APIM2_15.
     */
    public final static void APIM2_15(final SeleniumTestBase caller, final String param_statusDeprecated, final String param_publisherURL, final String param_TenantOrAdmin, final String param_TenantOneOrAdminStoreOne, final String param_ApplicationName, final String param_tierType, final String param_newVersion, final String param_numberOfUsers, final String param_statusPublished, final String param_storeURL, final String param_numberOfUsersOne, final String param_keyTypeToInvoke, final String param_keywordYes, final String param_buttonNamePost, final String param_postPayloadContext, final String param_postCustomerNameFromPayloadContext, final String param_postResponseCodeTwoHundred, final String param_postResponseHeaders, final String param_buttonNameGet, final String param_getCustomerName, final String param_buttonNamePut, final String param_putCustomerName, final String param_putResponseBodyNoContent, final String param_buttonNameGetForPutVerification, final String param_getCustomerNameForPutVerification, final String param_buttonNameHead, final String param_headResponseHeadersNull, final String param_buttonNameDelete, final String param_deleteResponseHeaders, final String param_buttonNameGetForDeleteVerification, final String param_getResponseCodeTwoHundredAndFourForDeleteVerification, final String param_getResponseHeadersNullForDeleteVerification, final String param_noContent, final String param_headResponseBodyNoContent, final String param_deleteResponseBodyNoContent, final String param_keyTypeToInvokeSandbox, final String param_keyYes, final String param_getResponseCodeTwoHundredForPutVerification, final String param_getResponseHeadersForPutVerification, final String param_publisherOneOfTenantOneOrAdmin, final String param_apiName, final String param_apiContext, final String param_apiVersionOne, final String param_apiVisibilityPublic, final String param_apiImage, final String param_apiTagName, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_productionEndpoint, final String param_sandboxEndpoint, final String param_keyWordNo) throws Exception {
        //APIM2-13: Check whether user can publish new copy given deprecate old versions option
        caller.writeToReport("Start of testcase APIM2_15");
        //Navigate to Publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke(caller, param_apiName,param_apiContext,param_apiVersionOne,param_apiVisibilityPublic,param_apiImage,param_apiTagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_keyYes,param_sandboxEndpoint,param_keyWordNo,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_keyWordNo,param_keyWordNo,"");
        //Navigate to Publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Check for the published API
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        String APIName = caller.retrieveString("key_APINameDesign");
        String APIversion = caller.retrieveString("key_APIVersion");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        //wait till api display
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_TenantOneOrAdminStoreOne);
        //Subcribe the API
        //Go to My Subcription window to Generate keys
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + APIName);
        //waiting for content load
        caller.pause("3000");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_ApplicationName);
        caller.select("APIStoreAPIs.ele_ddtierToSubscribe",param_tierType);
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        caller.click("APIStoreHome.lnk_MySubcription");
        //verify that the landed page is My Subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_ddApplicationWithSubscription",false,"");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        //wait for content load
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        }
        //wait for content load
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        }
        //wait for content load
        caller.pause("2000");
        //wait for content load
        caller.pause("1000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        //verify that the api is visible under subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsPublished","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion,false,"");
        if(param_TenantOneOrAdminStoreOne.equals("TenantOneStoreOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        //Check the Subcribed API Details for Admin
        } else if(param_TenantOneOrAdminStoreOne.equals("AdminStoreOne")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        }
        caller.pause("2000");
        //Logout from API store
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("3000");
        //Navigate to Publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Check for the published API
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        //wait till api display
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        //Go inside the API
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        //wait for content load
        caller.click("APIPublisherBrowse.lnk_Overview");
        //creating new copy of published API
        caller.click("APIPublisherBrowse.btn_CreateNewVersion");
        caller.checkElementPresent("APIPublisherBrowse.tf_NewVersion",false,"");
        caller.type("APIPublisherBrowse.tf_NewVersion",param_newVersion);
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_done");
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //wait untill page load
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_newVersion + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName);
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_newVersion + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName);
        }
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //wait for content load
        caller.pause("5000");
        //Select the Published Status
        caller.select("APIPublisherBrowse.ele_ddState",param_statusPublished);
        caller.pause("2000");
        caller.click("APIPublisherBrowse.chk_deprecateOldVersion");
        caller.pause("2000");
        caller.pause("2000");
        //Click on update button
        caller.click("APIPublisherBrowse.btn_UpdateState");
        //check the successfull message
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStateChangeMessage",false,"");
        //Goto API brouws
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.pause("4000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_newVersion + "_PARAM," + "param_users_PARAM:" + param_numberOfUsersOne,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName + "_PARAM," + "param_status_PARAM:" + param_statusPublished,false,"");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIversion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName + "_PARAM," + "param_status_PARAM:" + param_statusDeprecated,false,"");
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName);
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_newVersion + "_PARAM," + "param_users_PARAM:" + param_numberOfUsersOne,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_status_PARAM:" + param_statusPublished,false,"");
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIversion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_status_PARAM:" + param_statusDeprecated,false,"");
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName);
        }
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //wait for content load
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        //Search  the API Copy without login
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait
        caller.pause("2000");
        //Checking API details
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        //check the old API Version
        if(!caller.checkElementPresent("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIversion)){
        caller.writeToReport("Old API version not visible");
        }
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion,false,"");
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        if(!caller.checkElementPresent("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIversion)){
        caller.writeToReport("Old API version not visible");
        }
        //check the old API Version
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion,false,"");
        }
        caller.pause("5000");
        //Login into API  store and check the API Details
        lib_Common.bc_StoreLogin(caller, param_TenantOneOrAdminStoreOne);
        //Go to My Subcription window to Generate keys
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + APIName);
        //waiting for content load
        caller.pause("3000");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_ApplicationName);
        caller.select("APIStoreAPIs.ele_ddtierToSubscribe",param_tierType);
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        caller.click("APIStoreHome.lnk_MySubcription");
        //verify that the landed page is My Subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_ddApplicationWithSubscription",false,"");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        //wait for content load
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        }
        //wait for content load
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        }
        //wait for content load
        caller.pause("2000");
        //wait for content load
        caller.pause("1000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        //verify that the api is visible under subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsPublished","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion,false,"");
        /*
        //Subcribe the API
        Call
         businessComponent=lib_Common.bc_APIStore_MySubscription
         param_applicationName=@param_ApplicationName
         param_APIName=@APIName
         param_versionNumber=@param_newVersion
         param_tiertype=@param_tierType
        */
        //Check the Subcribed API Details for tenant User
        if(param_TenantOneOrAdminStoreOne.equals("TenantOneStoreOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        //Check the Subcribed API Details for Admin
        } else if(param_TenantOneOrAdminStoreOne.equals("AdminStoreOne")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        }
        //wait for content load
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        //verify that the api is visible under subscriptions
        if(param_TenantOneOrAdminStoreOne.equals("TenantOneStoreOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsDeprecated","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion,false,"");
        caller.pause("2000");
        caller.click("APIStoreMySubcription.ele_lblSubcribedAPIsDeprecated","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion);
        //wait for page load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_statusDeprecated,false,"");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        caller.click("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType);
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_statusPublished,false,"");
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        } else if(param_TenantOneOrAdminStoreOne.equals("AdminStoreOne")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsDeprecated","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion,false,"");
        caller.pause("2000");
        caller.pause("2000");
        caller.click("APIStoreMySubcription.ele_lblSubcribedAPIsDeprecated","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion);
        //wait for page load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_statusDeprecated,false,"");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        caller.click("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType);
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_statusPublished,false,"");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        }
        caller.click("APIStoreHome.lnk_MySubcription");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        caller.pause("3000");
        lib_Common.bc_APIStore_InvokeAPI(caller, APIName,APIversion,param_ApplicationName,param_keyTypeToInvoke,param_keyYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNameGet,param_getCustomerName,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_postResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_keyYes,param_buttonNameHead,param_headResponseBodyNoContent,param_postResponseCodeTwoHundred,param_headResponseHeadersNull,param_keyYes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_postResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_noContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        caller.pause("3000");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        lib_Common.bc_APIStore_InvokeAPI(caller, APIName,param_newVersion,param_ApplicationName,param_keyTypeToInvokeSandbox,param_keyYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNameGet,param_getCustomerName,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_postResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_keyYes,param_buttonNameHead,param_headResponseBodyNoContent,param_postResponseCodeTwoHundred,param_headResponseHeadersNull,param_keyYes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_postResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_noContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        lib_Common.bc_APIStore_InvokeAPI(caller, APIName,APIversion,param_ApplicationName,param_keyTypeToInvoke,param_keyYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNameGet,param_getCustomerName,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_postResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_keyYes,param_buttonNameHead,param_headResponseBodyNoContent,param_postResponseCodeTwoHundred,param_headResponseHeadersNull,param_keyYes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_postResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_noContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        lib_Common.bc_APIStore_InvokeAPI(caller, APIName,param_newVersion,param_ApplicationName,param_keyTypeToInvokeSandbox,param_keyYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNameGet,param_getCustomerName,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_postResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_keyYes,param_buttonNameHead,param_headResponseBodyNoContent,param_postResponseCodeTwoHundred,param_headResponseHeadersNull,param_keyYes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_postResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_noContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        caller.writeToReport("End of the testcase APIM2-15");	
    }
    /**
     *  Business component APIM2_14.
     */
    public final static void APIM2_14(final SeleniumTestBase caller, final String param_APIName, final String param_APIVersionOne, final String param_APIvisibility, final String param_APIImagePath, final String param_TagName, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_productionEndpoint, final String param_sandboxEndpoint, final String param_textEndpointSecurityScheme, final String param_keyYes, final String param_keyNo, final String param_subscription, final String param_ApplicationName, final String param_tierType, final String param_keyTypeToInvoke, final String param_buttonNamePost, final String param_postPayloadContext, final String param_postCustomerNameFromPayloadContext, final String param_postResponseCodeTwoHundred, final String param_postResponseHeaders, final String param_buttonNameGet, final String param_getCustomerName, final String param_buttonNamePut, final String param_putCustomerName, final String param_putResponseBodyNoContent, final String param_buttonNameGetForPutVerification, final String param_getCustomerNameForPutVerification, final String param_getResponseCodeTwoHundredForPutVerification, final String param_getResponseHeadersForPutVerification, final String param_buttonNameHead, final String param_headResponseHeadersNull, final String param_buttonNameDelete, final String param_deleteResponseHeaders, final String param_buttonNameGetForDeleteVerification, final String param_getResponseCodeTwoHundredAndFourForDeleteVerification, final String param_getResponseHeadersNullForDeleteVerification, final String param_storeURL, final String param_newVersion, final String param_statusPublished, final String param_TenantOrAdmin, final String param_TenantOneOrAdminStoreOne, final String param_publisherURL, final String param_headResponseBodyNoContent, final String param_deleteResponseBodyNoContent, final String param_noContent) throws Exception {
        //Copy an api with {version} strategy in context and invoke it sucesfully with its endpoint
        caller.writeToReport("Start of executing test case APIM2_14");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        //creation of three different API names
        //genarate api name one
        String var_APINameOne = param_APIName+"_"+caller.generateData("int",3);
        //genarate api name two
        String var_APINameTwo = param_APIName+"_"+caller.generateData("int",3);
        //genarate api name three
        String var_APINameThree = param_APIName+"_"+caller.generateData("int",3);
        //Creation of API
        //creating api with api name one
        lib_Common.bc_APIPublisher_AddAPI_DesignPhase_WitoutAutoGenAPINameAndContext(caller, var_APINameOne,var_APINameOne+"/"+"{version}"+"/"+"test",param_APIVersionOne,param_APIvisibility,param_APIImagePath,param_TagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_keyNo,param_sandboxEndpoint,param_keyNo,param_textEndpointSecurityScheme);
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_keyNo,param_keyNo,param_subscription);
        caller.click("APIPublisherHome.lnk_Browse");
        //wait for content load
        caller.pause("2000");
        //*****************************************************
        //creating api with api name two
        String var_version = "{version}";
        lib_Common.bc_APIPublisher_AddAPI_DesignPhase_WitoutAutoGenAPINameAndContext(caller, var_APINameTwo,var_version+"/"+var_APINameTwo,param_APIVersionOne,param_APIvisibility,param_APIImagePath,param_TagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_keyNo,param_sandboxEndpoint,param_keyNo,param_textEndpointSecurityScheme);
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_keyNo,param_keyNo,param_subscription);
        caller.click("APIPublisherHome.lnk_Browse");
        //wait for content load
        caller.pause("2000");
        //*****************************************************
        //creating api with api name three
        lib_Common.bc_APIPublisher_AddAPI_DesignPhase_WitoutAutoGenAPINameAndContext(caller, var_APINameThree,var_APINameThree+"/"+"test"+"/"+"{version}",param_APIVersionOne,param_APIvisibility,param_APIImagePath,param_TagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_keyNo,param_sandboxEndpoint,param_keyNo,param_textEndpointSecurityScheme);
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_keyNo,param_keyNo,param_subscription);
        //*****************************************************
        //End of creation of API
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_TenantOneOrAdminStoreOne);
        //API Subcription
        //Go to My Subcription window to Generate keys
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",var_APINameOne);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + var_APINameOne);
        //waiting for content load
        caller.pause("3000");
        //verify the availability of api1 url
        caller.checkElementPresent("APIStoreAPIs.ele_lblProductionUrlGeneral","param_rearUrlPattern_PARAM:" + var_APINameOne+"/"+param_APIVersionOne+"/test",false,"");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_ApplicationName);
        caller.select("APIStoreAPIs.ele_ddtierToSubscribe",param_tierType);
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        caller.click("APIStoreHome.lnk_MySubcription");
        //verify that the landed page is My Subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_ddApplicationWithSubscription",false,"");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        //wait for content load
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        }
        //wait for content load
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        }
        //wait for content load
        caller.pause("2000");
        //wait for content load
        caller.pause("1000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        //verify that the api is visible under subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsPublished","param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne,false,"");
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_MySubcription");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        lib_Common.bc_APIStore_InvokeAPI(caller, var_APINameOne,param_APIVersionOne,param_ApplicationName,param_keyTypeToInvoke,param_keyYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNameGet,param_getCustomerName,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_postResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_keyYes,param_buttonNameHead,param_headResponseBodyNoContent,param_postResponseCodeTwoHundred,param_headResponseHeadersNull,param_keyYes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_postResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_noContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        caller.pause("3000");
        //Subscribe and invoke second API
        //API Subcription
        //Go to My Subcription window to Generate keys
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",var_APINameTwo);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + var_APINameTwo);
        //waiting for content load
        caller.pause("3000");
        //verify the availability of api2 url
        caller.checkElementPresent("APIStoreAPIs.ele_lblProductionUrlGeneral","param_rearUrlPattern_PARAM:" + param_APIVersionOne+"/"+var_APINameTwo,false,"");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_ApplicationName);
        caller.select("APIStoreAPIs.ele_ddtierToSubscribe",param_tierType);
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        caller.click("APIStoreHome.lnk_MySubcription");
        //verify that the landed page is My Subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_ddApplicationWithSubscription",false,"");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        //wait for content load
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        }
        //wait for content load
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        }
        //wait for content load
        caller.pause("2000");
        //wait for content load
        caller.pause("1000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        //verify that the api is visible under subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsPublished","param_APIName_PARAM:" + var_APINameTwo + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne,false,"");
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_MySubcription");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        lib_Common.bc_APIStore_InvokeAPI(caller, var_APINameTwo,param_APIVersionOne,param_ApplicationName,param_keyTypeToInvoke,param_keyYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNameGet,param_getCustomerName,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_postResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_keyYes,param_buttonNameHead,param_headResponseBodyNoContent,param_postResponseCodeTwoHundred,param_headResponseHeadersNull,param_keyYes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_postResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_noContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        caller.pause("3000");
        //Subscribe and invode third API
        //API Subcription
        //Go to My Subcription window to Generate keys
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",var_APINameThree);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + var_APINameThree);
        //waiting for content load
        caller.pause("3000");
        //verify the availability of api3 url
        caller.checkElementPresent("APIStoreAPIs.ele_lblProductionUrlGeneral","param_rearUrlPattern_PARAM:" + var_APINameThree+"/test/"+param_APIVersionOne,false,"");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_ApplicationName);
        caller.select("APIStoreAPIs.ele_ddtierToSubscribe",param_tierType);
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        caller.click("APIStoreHome.lnk_MySubcription");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        //verify that the landed page is My Subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_ddApplicationWithSubscription",false,"");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        //wait for content load
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        }
        //wait for content load
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        }
        //wait for content load
        caller.pause("2000");
        //wait for content load
        caller.pause("1000");
        //verify that the api is visible under subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsPublished","param_APIName_PARAM:" + var_APINameThree + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne,false,"");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        lib_Common.bc_APIStore_InvokeAPI(caller, var_APINameThree,param_APIVersionOne,param_ApplicationName,param_keyTypeToInvoke,param_keyYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNameGet,param_getCustomerName,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_postResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_keyYes,param_buttonNameHead,param_headResponseBodyNoContent,param_postResponseCodeTwoHundred,param_headResponseHeadersNull,param_keyYes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_postResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_noContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APIs");
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //Navigate to Publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Check for the published API
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",var_APINameOne);
        caller.click("APIPublisherHome.btn_Search");
        //wait till api display
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + var_APINameOne,false,"");
        //Go inside the API
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + var_APINameOne);
        //wait for content load
        caller.click("APIPublisherBrowse.lnk_Overview");
        //creating new copy of published API
        caller.click("APIPublisherBrowse.btn_CreateNewVersion");
        caller.checkElementPresent("APIPublisherBrowse.tf_NewVersion",false,"");
        caller.type("APIPublisherBrowse.tf_NewVersion",param_newVersion);
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_done");
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",var_APINameOne);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //wait untill page load
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName,false,"");
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName);
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName,false,"");
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName);
        }
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //wait for content load
        caller.pause("5000");
        //Select the Published Status
        caller.select("APIPublisherBrowse.ele_ddState",param_statusPublished);
        caller.pause("2000");
        caller.pause("2000");
        //Click on update button
        caller.click("APIPublisherBrowse.btn_UpdateState");
        //check the successfull message
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStateChangeMessage",false,"");
        //Goto API brouws
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",var_APINameOne);
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName + "_PARAM," + "param_status_PARAM:" + param_statusPublished,false,"");
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_status_PARAM:" + param_statusPublished,false,"");
        }
        //////////////////////////////////////////////
        //Navigate to Publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Check for the published API
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",var_APINameTwo);
        caller.click("APIPublisherHome.btn_Search");
        //wait till api display
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + var_APINameTwo,false,"");
        //Go inside the API
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + var_APINameTwo);
        //wait for content load
        caller.click("APIPublisherBrowse.lnk_Overview");
        //creating new copy of published API
        caller.click("APIPublisherBrowse.btn_CreateNewVersion");
        caller.checkElementPresent("APIPublisherBrowse.tf_NewVersion",false,"");
        caller.type("APIPublisherBrowse.tf_NewVersion",param_newVersion);
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_done");
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",var_APINameTwo);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //wait untill page load
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + var_APINameTwo + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName,false,"");
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + var_APINameTwo + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName);
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + var_APINameTwo + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName,false,"");
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + var_APINameTwo + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName);
        }
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //wait for content load
        caller.pause("5000");
        //Select the Published Status
        caller.select("APIPublisherBrowse.ele_ddState",param_statusPublished);
        caller.pause("2000");
        //Click on update button
        caller.click("APIPublisherBrowse.btn_UpdateState");
        //check the successfull message
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStateChangeMessage",false,"");
        //Goto API brouws
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",var_APINameTwo);
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + var_APINameTwo + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + var_APINameTwo + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName + "_PARAM," + "param_status_PARAM:" + param_statusPublished,false,"");
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + var_APINameTwo + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + var_APINameTwo + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_status_PARAM:" + param_statusPublished,false,"");
        }
        /////////////////////////////////////////////////////
        //Navigate to Publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Check for the published API
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",var_APINameThree);
        caller.click("APIPublisherHome.btn_Search");
        //wait till api display
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + var_APINameThree,false,"");
        //Go inside the API
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + var_APINameThree);
        //wait for content load
        caller.click("APIPublisherBrowse.lnk_Overview");
        //creating new copy of published API
        caller.click("APIPublisherBrowse.btn_CreateNewVersion");
        caller.checkElementPresent("APIPublisherBrowse.tf_NewVersion",false,"");
        caller.type("APIPublisherBrowse.tf_NewVersion",param_newVersion);
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_done");
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",var_APINameThree);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //wait untill page load
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + var_APINameThree + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName,false,"");
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + var_APINameThree + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName);
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + var_APINameThree + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName,false,"");
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + var_APINameThree + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName);
        }
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //wait for content load
        caller.pause("5000");
        //Select the Published Status
        caller.select("APIPublisherBrowse.ele_ddState",param_statusPublished);
        caller.pause("2000");
        //Click on update button
        caller.click("APIPublisherBrowse.btn_UpdateState");
        //check the successfull message
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStateChangeMessage",false,"");
        //Goto API brouws
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",var_APINameThree);
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + var_APINameThree + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + var_APINameThree + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName + "_PARAM," + "param_status_PARAM:" + param_statusPublished,false,"");
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + var_APINameThree + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + var_APINameThree + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_status_PARAM:" + param_statusPublished,false,"");
        }
        ///////////////////////////////////////
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",var_APINameOne);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait
        caller.pause("2000");
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varStoreUserName = caller.retrieveString("keyTenantOneStoreUserOne");
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion,false,"");
        caller.click("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion);
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varStoreAdminUserName = caller.retrieveString("keyAdminStoreUserOne");
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion,false,"");
        caller.click("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion);
        }
        //waiting for content load
        caller.pause("3000");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_ApplicationName);
        caller.select("APIStoreAPIs.ele_ddtierToSubscribe",param_tierType);
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_MySubcription");
        //verify that the landed page is My Subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_ddApplicationWithSubscription",false,"");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        //wait for content load
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        }
        //wait for content load
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        }
        //wait for content load
        caller.pause("2000");
        //wait for content load
        caller.pause("1000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        //verify that the api is visible under subscriptions
        if(param_TenantOneOrAdminStoreOne.equals("TenantOneStoreOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        caller.pause("2000");
        //Check the Subcribed API Details
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        caller.click("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType);
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_statusPublished,false,"");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        } else if(param_TenantOneOrAdminStoreOne.equals("AdminStoreOne")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        caller.pause("2000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        caller.click("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType);
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_statusPublished,false,"");
        caller.click("APIStoreHome.lnk_MySubcription");
        }
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        lib_Common.bc_APIStore_InvokeAPI(caller, var_APINameOne,param_newVersion,param_ApplicationName,param_keyTypeToInvoke,param_keyYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNameGet,param_getCustomerName,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_postResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_keyYes,param_buttonNameHead,param_headResponseBodyNoContent,param_postResponseCodeTwoHundred,param_headResponseHeadersNull,param_keyYes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_postResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_noContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APIs");
        caller.type("APIStoreHome.tf_APISearchStore",var_APINameTwo);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait
        caller.pause("2000");
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varStoreUserName = caller.retrieveString("keyTenantOneStoreUserOne");
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + var_APINameTwo + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion,false,"");
        caller.click("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + var_APINameTwo + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion);
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varStoreAdminUserName = caller.retrieveString("keyAdminStoreUserOne");
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + var_APINameTwo + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion,false,"");
        caller.click("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + var_APINameTwo + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion);
        }
        //waiting for content load
        caller.pause("3000");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_ApplicationName);
        caller.select("APIStoreAPIs.ele_ddtierToSubscribe",param_tierType);
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_MySubcription");
        //verify that the landed page is My Subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_ddApplicationWithSubscription",false,"");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        //wait for content load
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        }
        //wait for content load
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        }
        //wait for content load
        caller.pause("2000");
        //wait for content load
        caller.pause("1000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        //verify that the api is visible under subscriptions
        if(param_TenantOneOrAdminStoreOne.equals("TenantOneStoreOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        caller.pause("2000");
        //Check the Subcribed API Details
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + var_APINameTwo + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        caller.click("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + var_APINameTwo + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType);
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_statusPublished,false,"");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        } else if(param_TenantOneOrAdminStoreOne.equals("AdminStoreOne")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        caller.pause("2000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + var_APINameTwo + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        caller.click("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + var_APINameTwo + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType);
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_statusPublished,false,"");
        caller.click("APIStoreHome.lnk_MySubcription");
        }
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        lib_Common.bc_APIStore_InvokeAPI(caller, var_APINameTwo,param_newVersion,param_ApplicationName,param_keyTypeToInvoke,param_keyYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNameGet,param_getCustomerName,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_postResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_keyYes,param_buttonNameHead,param_headResponseBodyNoContent,param_postResponseCodeTwoHundred,param_headResponseHeadersNull,param_keyYes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_postResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_noContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APIs");
        caller.type("APIStoreHome.tf_APISearchStore",var_APINameThree);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait
        caller.pause("2000");
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varStoreUserName = caller.retrieveString("keyTenantOneStoreUserOne");
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + var_APINameThree + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion,false,"");
        caller.click("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + var_APINameThree + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion);
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varStoreAdminUserName = caller.retrieveString("keyAdminStoreUserOne");
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + var_APINameThree + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion,false,"");
        caller.click("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + var_APINameThree + "_PARAM," + "param_versionNumber_PARAM:" + param_newVersion);
        }
        //waiting for content load
        caller.pause("3000");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_ApplicationName);
        caller.select("APIStoreAPIs.ele_ddtierToSubscribe",param_tierType);
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_MySubcription");
        //verify that the landed page is My Subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_ddApplicationWithSubscription",false,"");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        //wait for content load
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        }
        //wait for content load
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        }
        //wait for content load
        caller.pause("2000");
        //wait for content load
        caller.pause("1000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        //verify that the api is visible under subscriptions
        if(param_TenantOneOrAdminStoreOne.equals("TenantOneStoreOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        caller.pause("2000");
        //Check the Subcribed API Details
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + var_APINameThree + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        caller.click("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + var_APINameThree + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType);
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_statusPublished,false,"");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        } else if(param_TenantOneOrAdminStoreOne.equals("AdminStoreOne")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        caller.pause("2000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + var_APINameThree + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType,false,"");
        caller.click("APIStoreMySubcription.ele_lblSuscribedAPIsPublishedAll","param_APIName_PARAM:" + var_APINameThree + "_PARAM," + "param_APIVersion_PARAM:" + param_newVersion + "_PARAM," + "param_APIProvider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_SubscriptionRier_PARAM:" + param_tierType);
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_statusPublished,false,"");
        caller.click("APIStoreHome.lnk_MySubcription");
        }
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        lib_Common.bc_APIStore_InvokeAPI(caller, var_APINameThree,param_newVersion,param_ApplicationName,param_keyTypeToInvoke,param_keyYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNameGet,param_getCustomerName,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_postResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_keyYes,param_buttonNameHead,param_headResponseBodyNoContent,param_postResponseCodeTwoHundred,param_headResponseHeadersNull,param_keyYes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_postResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_noContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("3000");
        caller.writeToReport("End of executing test case APIM2_14");	
    }
    /**
     *  Business component APIM2_610.
     */
    public final static void APIM2_610(final SeleniumTestBase caller, final String param_APIName, final String param_APIContest, final String param_APIVersion, final String param_APIVisibility, final String param_APIImageName, final String param_tag, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_publisherURL, final String param_storeURL, final String param_TenantOrAdmin, final String param_TenantOneOrAdminStoreOne, final String param_ApplicationName, final String param_tierType, final String param_productionEndpoint, final String param_sandboxEndpoint, final String param_statusDeprecate, final String param_applicationNameInvoke, final String param_keyTypeToInvoke, final String param_keyYes, final String param_buttonNamePost, final String param_postPayloadContext, final String param_postCustomerNameFromPayloadContext, final String param_postResponseCodeTwoHundred, final String param_postResponseHeaders, final String param_buttonNameGet, final String param_getCustomerName, final String param_buttonNamePut, final String param_putCustomerName, final String param_putResponseBodyNoContent, final String param_buttonNameGetForPutVerification, final String param_getCustomerNameForPutVerification, final String param_getResponseCodeTwoHundredForPutVerification, final String param_getResponseHeadersForPutVerification, final String param_buttonNameHead, final String param_headResponseBodyNoContent, final String param_headResponseHeadersNull, final String param_buttonNameDelete, final String param_deleteResponseBodyNoContent, final String param_deleteResponseHeaders, final String param_buttonNameGetForDeleteVerification, final String param_noContent, final String param_getResponseCodeTwoHundredAndFourForDeleteVerification, final String param_getResponseHeadersNullForDeleteVerification, final String param_keyNo, final String param_productionEndpointChange, final String param_APIStatePublished) throws Exception {
        //APIM2-610:  Depricate an API without propagating changes to the gateway
        caller.writeToReport("Start  Executing APIM2-610");
        lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke(caller, param_APIName,param_APIContest,param_APIVersion,param_APIVisibility,param_APIImageName,param_tag,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_keyNo,"",param_keyNo,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_keyNo,param_keyNo,"");
        //Navigate to Publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.pause("3000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Check for the published API
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        String APIName = caller.retrieveString("key_APINameDesign");
        String APIversion = caller.retrieveString("key_APIVersion");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        //wait till api display
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_TenantOneOrAdminStoreOne);
        //API Subcription
        //Go to My Subcription window to Generate keys
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + APIName);
        //waiting for content load
        caller.pause("3000");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_ApplicationName);
        caller.select("APIStoreAPIs.ele_ddtierToSubscribe",param_tierType);
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        caller.click("APIStoreHome.lnk_MySubcription");
        //verify that the landed page is My Subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_ddApplicationWithSubscription",false,"");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        //wait for content load
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        }
        //wait for content load
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        }
        //wait for content load
        caller.pause("2000");
        //wait for content load
        caller.pause("1000");
        //verify that the api is visible under subscriptions
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsPublished","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion,false,"");
        caller.pause("2000");
        //Logout from API store
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("3000");
        //Navigate to Publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.click("APIPublisherHome.lnk_Browse");
        //Check for the published API
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        //wait till api display
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        //Go inside the API
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("3000");
        caller.click("APIPublisherBrowse.lnk_Edit");
        //wait for content load
        caller.pause("3000");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        caller.pause("2000");
        //verify the manage page
        caller.pause("5000");
        caller.click("APIPublisherBrowse.ele_lblManagedAPI");
        caller.pause("2000");
        //Verify the navigated page
        caller.checkElementPresent("APIPublisherBrowse.ele_lblEndpoints",false,"");
        //Enter production and sandbox endpoints
        caller.click("APIPublisherBrowse.tf_productionEndpoint");
        caller.type("APIPublisherBrowse.tf_productionEndpoint",param_productionEndpointChange);
        //wait for content load
        caller.pause("2000");
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_SaveManagedAPI");
        caller.pause("2000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        //Check for the published API
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        //wait till api display
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        //Go inside the API
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        caller.pause("2000");
        //Select the Deprecated Status
        caller.select("APIPublisherBrowse.ele_ddState",param_statusDeprecate);
        caller.pause("2000");
        //Click on update button
        caller.click("APIPublisherBrowse.btn_UpdateState");
        //check the successfull message
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStateChangeMessage",false,"");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_TenantOneOrAdminStoreOne);
        //API Subcription
        //Go to My Subcription window to Generate keys
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsDeprecated","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion,false,"");
        caller.click("APIStoreMySubcription.ele_lblSubcribedAPIsDeprecated","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + APIversion);
        //wait for page load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblStatus","param_Status_PARAM:" + param_statusDeprecate,false,"");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        caller.pause("3000");
        lib_Common.bc_APIStore_InvokeAPI(caller, APIName,APIversion,param_ApplicationName,param_keyTypeToInvoke,param_keyYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNameGet,param_getCustomerName,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_postResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_keyYes,param_buttonNameHead,param_headResponseBodyNoContent,param_postResponseCodeTwoHundred,param_headResponseHeadersNull,param_keyYes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_postResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_noContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        caller.pause("3000");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        caller.writeToReport("End of the testcase APIM2_610");	
    }
    /**
     *  Business component APIM2_615.
     */
    public final static void APIM2_615(final SeleniumTestBase caller, final String param_publisherURL, final String param_storeURL, final String param_APIName, final String param_APIContext, final String param_APIVersionOne, final String param_APIvisibility, final String param_APIImageName, final String param_TagName, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_productionEndpoint, final String param_sandboxEndpoint, final String param_serverNameDomainOne, final String param_storeOneOfTenantOneOrAdmin, final String param_applicationName, final String param_keyWordProductionOnly, final String param_kayWordBlock, final String param_yes, final String param_no, final String param_buttonNamePost, final String param_postResponseCodeFourHundredAndOne, final String param_postPayloadContext) throws Exception {
        caller.writeToReport("Start of executing APIM2_812");
        lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke(caller, param_APIName,param_APIContext,param_APIVersionOne,param_APIvisibility,"",param_TagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_yes,param_sandboxEndpoint,param_no,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_no,param_no,"");
        String varAPINameDesign = caller.retrieveString("key_APINameDesign");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"4000");
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        lib_Common.bc_StoreLogin(caller, param_storeOneOfTenantOneOrAdmin);
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APIs");
        //waiting for content load
        caller.pause("4000");
        caller.type("APIStoreHome.tf_APISearchStore",varAPINameDesign);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersionOne);
        //waiting for content load
        caller.pause("3000");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_applicationName);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        //waiting for content load
        caller.pause("4000");
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        //waiting for content load
        caller.pause("4000");
        //wait for page load
        caller.pause("3000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_applicationName);
        //wait for page load
        caller.pause("4000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("3000");
        //Store Access token
        String varTokenReGen = caller.getStringProperty("APIStoreMySubcription.ele_lblAccessTokenProduction","TEXT:");
        caller.store("key_TokenReGen","String",varTokenReGen);
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        String varTokenReGen = caller.getStringProperty("APIStoreMySubcription.ele_lblAccessTokenProduction","TEXT:");
        caller.store("key_TokenReGen","String",varTokenReGen);
        }
        //wait for content load
        //Store Access token
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        }
        //wait for content load
        caller.pause("3000");
        //verify the API details on my subscriptions page
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherHome.lnk_Subscriptions");
        //wait for content load
        caller.pause("2000");
        //wait for content load
        caller.pause("2000");
        if(param_serverNameDomainOne.equals("TenantOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        if(caller.checkElementPresent("APIPublisherMyAPIs.lnk_APIRelativeNameFirstRow","param_provider_PARAM:" + varPublisherUserName + "_PARAM," + "param_applicationName_PARAM:" + param_applicationName + "_PARAM," + "param_apiName_PARAM:" + varAPINameDesign)){
        caller.checkElementPresent("APIPublisherMyAPIs.lnk_APIRelativeNameFirstRow","param_provider_PARAM:" + varPublisherUserName + "_PARAM," + "param_applicationName_PARAM:" + param_applicationName + "_PARAM," + "param_apiName_PARAM:" + varAPINameDesign,false,"");
        caller.click("APIPublisherMyAPIs.lnk_APIRelativeNameFirstRow","param_provider_PARAM:" + varPublisherUserName + "_PARAM," + "param_applicationName_PARAM:" + param_applicationName + "_PARAM," + "param_apiName_PARAM:" + varAPINameDesign);
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherMyAPIs.chk_ProductionOnlyFirstRow","param_provider_PARAM:" + varPublisherUserName + "_PARAM," + "param_applicationName_PARAM:" + param_applicationName + "_PARAM," + "param_apiName_PARAM:" + varAPINameDesign + "_PARAM," + "param_keyWordProductionOnly_PARAM:" + param_keyWordProductionOnly);
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherMyAPIs.lnk_BlockedOrUnblockedFirstRow","param_provider_PARAM:" + varPublisherUserName + "_PARAM," + "param_applicationName_PARAM:" + param_applicationName + "_PARAM," + "param_apiName_PARAM:" + varAPINameDesign + "_PARAM," + "param_kayWordBlockOrUnblock_PARAM:" + param_kayWordBlock);
        //wait for content load
        caller.pause("2000");
        } else if(caller.checkElementPresent("APIPublisherMyAPIs.lnk_APIRelativeNameFirstRow","param_provider_PARAM:" + varPublisherUserName + "_PARAM," + "param_applicationName_PARAM:" + param_applicationName + "_PARAM," + "param_apiName_PARAM:" + varAPINameDesign)){
        caller.checkElementPresent("APIPublisherMyAPIs.lnk_APIRelativeNameRestOfRows","param_provider_PARAM:" + varPublisherUserName + "_PARAM," + "param_applicationName_PARAM:" + param_applicationName + "_PARAM," + "param_apiName_PARAM:" + param_applicationName,false,"");
        caller.click("APIPublisherMyAPIs.lnk_APIRelativeNameRestOfRows","param_provider_PARAM:" + varPublisherUserName + "_PARAM," + "param_applicationName_PARAM:" + param_applicationName + "_PARAM," + "param_apiName_PARAM:" + varAPINameDesign);
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherMyAPIs.chk_ProductionOnlyRestOfRows","param_provider_PARAM:" + varPublisherUserName + "_PARAM," + "param_applicationName_PARAM:" + param_applicationName + "_PARAM," + "param_apiName_PARAM:" + varAPINameDesign + "_PARAM," + "param_keyWordProductionOnly_PARAM:" + param_keyWordProductionOnly);
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherMyAPIs.lnk_BlockedOrUnblockedRestOfRows","param_provider_PARAM:" + varPublisherUserName + "_PARAM," + "param_applicationName_PARAM:" + param_applicationName + "_PARAM," + "param_apiName_PARAM:" + varAPINameDesign + "_PARAM," + "param_kayWordBlockOrUnblock_PARAM:" + param_kayWordBlock);
        //wait for content load
        caller.pause("2000");
        }
        } else if(param_serverNameDomainOne.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        if(caller.checkElementPresent("APIPublisherMyAPIs.lnk_APIRelativeNameFirstRow","param_provider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_applicationName_PARAM:" + param_applicationName + "_PARAM," + "param_apiName_PARAM:" + varAPINameDesign)){
        caller.checkElementPresent("APIPublisherMyAPIs.lnk_APIRelativeNameFirstRow","param_provider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_applicationName_PARAM:" + param_applicationName + "_PARAM," + "param_apiName_PARAM:" + varAPINameDesign,false,"");
        caller.click("APIPublisherMyAPIs.lnk_APIRelativeNameFirstRow","param_provider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_applicationName_PARAM:" + param_applicationName + "_PARAM," + "param_apiName_PARAM:" + varAPINameDesign);
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherMyAPIs.chk_ProductionOnlyFirstRow","param_provider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_applicationName_PARAM:" + param_applicationName + "_PARAM," + "param_apiName_PARAM:" + varAPINameDesign + "_PARAM," + "param_keyWordProductionOnly_PARAM:" + param_keyWordProductionOnly);
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherMyAPIs.lnk_BlockedOrUnblockedFirstRow","param_provider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_applicationName_PARAM:" + param_applicationName + "_PARAM," + "param_apiName_PARAM:" + varAPINameDesign + "_PARAM," + "param_kayWordBlockOrUnblock_PARAM:" + param_kayWordBlock);
        //wait for content load
        caller.pause("2000");
        } else if(caller.checkElementPresent("APIPublisherMyAPIs.lnk_APIRelativeNameFirstRow","param_provider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_applicationName_PARAM:" + param_applicationName + "_PARAM," + "param_apiName_PARAM:" + varAPINameDesign)){
        caller.checkElementPresent("APIPublisherMyAPIs.lnk_APIRelativeNameRestOfRows","param_provider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_applicationName_PARAM:" + param_applicationName + "_PARAM," + "param_apiName_PARAM:" + param_applicationName,false,"");
        caller.click("APIPublisherMyAPIs.lnk_APIRelativeNameRestOfRows","param_provider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_applicationName_PARAM:" + param_applicationName + "_PARAM," + "param_apiName_PARAM:" + varAPINameDesign);
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherMyAPIs.chk_ProductionOnlyRestOfRows","param_provider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_applicationName_PARAM:" + param_applicationName + "_PARAM," + "param_apiName_PARAM:" + varAPINameDesign + "_PARAM," + "param_keyWordProductionOnly_PARAM:" + param_keyWordProductionOnly);
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherMyAPIs.lnk_BlockedOrUnblockedRestOfRows","param_provider_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_applicationName_PARAM:" + param_applicationName + "_PARAM," + "param_apiName_PARAM:" + varAPINameDesign + "_PARAM," + "param_kayWordBlockOrUnblock_PARAM:" + param_kayWordBlock);
        //wait for content load
        caller.pause("2000");
        }
        }
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"4000");
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        //wait for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APIs");
        //wait for content load
        caller.pause("3000");
        caller.type("APIStoreHome.tf_APISearchStore",varAPINameDesign);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait for content load
        caller.pause("3000");
        caller.click("APIStoreAPIs.lnk_APINameSearch","param_APIName_PARAM:" + varAPINameDesign);
        //wait for content load
        caller.pause("3000");
        //check the availability of api console tab in API
        caller.checkElementPresent("APIStoreAPIs.ele_tabAPIConsole",false,"");
        caller.click("APIStoreAPIs.ele_tabAPIConsole");
        //wait for content load
        caller.pause("2000");
        //verify that the landed page is relavent api
        caller.checkElementPresent("APIStoreAPIConsole.ele_lblAPIName","param_APIName_PARAM:" + varAPINameDesign,false,"");
        //wait for content load
        caller.pause("2000");
        String var_AccessToken = caller.retrieveString("key_TokenReGen");
        caller.type("APIStoreAPIConsole.tf_AccessToken",var_AccessToken);
        //wait for content load
        caller.pause("2000");
        //Invoking the commands depending on user inputs
        caller.click("APIStoreAPIConsole.btn_mainCommandButtons","param_buttonName_PARAM:" + param_buttonNamePost);
        //wait for content load
        caller.pause("1000");
        //verify that the view is expanded
        caller.checkElementPresent("APIStoreAPIConsole.tf_postPayload",false,"");
        caller.type("APIStoreAPIConsole.tf_postPayload",param_postPayloadContext);
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreAPIConsole.btn_postTryOut");
        //wait for content load
        caller.pause("1000");
        //verify the response code
        caller.checkElementPresent("APIStoreAPIConsole.ele_lblPostResponseCode","param_responseCode_PARAM:" + param_postResponseCodeFourHundredAndOne,false,"");
        caller.click("APIStoreAPIConsole.btn_mainCommandButtons","param_buttonName_PARAM:" + param_buttonNamePost);
        //wait for content load
        caller.pause("2000");
        caller.writeToReport("End of executing APIM2_615");	
    }
    /**
     *  Business component APIM2_617.
     */
    public final static void APIM2_617(final SeleniumTestBase caller, final String param_publisherURL, final String param_storeURL, final String param_APIName, final String param_APIContest, final String param_provider, final String param_applicationName, final String param_kayWordUnblock, final String param_keyWordProductionAndSandbox, final String param_versionNumber, final String param_keyTypeToInvoke, final String param_yes, final String param_no, final String param_buttonNamePost, final String param_postPayloadContext, final String param_postCustomerNameFromPayloadContext, final String param_postResponseCodeFourHundredAndThree, final String param_kayWordBlock) throws Exception {
        //APIM2-617:  To ensure that subscription to both production and sandbox environments can be blocked
        caller.writeToReport("Start  Executing APIM2-617");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        caller.checkElementPresent("APIPublisherMyAPIs.lnk_APIRelativeNameFirstRow","param_provider_PARAM:" + param_provider + "_PARAM," + "param_applicationName_PARAM:" + param_applicationName + "_PARAM," + "param_apiName_PARAM:" + param_APIName,false,"");
        caller.click("APIPublisherMyAPIs.lnk_BlockedOrUnblockedFirstRow","param_provider_PARAM:" + param_provider + "_PARAM," + "param_applicationName_PARAM:" + param_applicationName + "_PARAM," + "param_apiName_PARAM:" + param_APIName + "_PARAM," + "param_kayWordBlockOrUnblock_PARAM:" + param_kayWordUnblock);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherMyAPIs.chk_ProductionAndSandboxFirstRow","param_provider_PARAM:" + param_provider + "_PARAM," + "param_applicationName_PARAM:" + param_applicationName + "_PARAM," + "param_apiName_PARAM:" + param_APIName + "_PARAM," + "param_keyWordProductionAndSandbox_PARAM:" + param_keyWordProductionAndSandbox);
        caller.click("APIPublisherMyAPIs.lnk_BlockedOrUnblockedFirstRow","param_provider_PARAM:" + param_provider + "_PARAM," + "param_applicationName_PARAM:" + param_applicationName + "_PARAM," + "param_apiName_PARAM:" + param_APIName + "_PARAM," + "param_kayWordBlockOrUnblock_PARAM:" + param_kayWordBlock);
        caller.checkElementPresent("APIPublisherMyAPIs.lnk_BlockedOrUnblockedFirstRow","param_provider_PARAM:" + param_provider + "_PARAM," + "param_applicationName_PARAM:" + param_applicationName + "_PARAM," + "param_apiName_PARAM:" + param_APIName + "_PARAM," + "param_kayWordBlockOrUnblock_PARAM:" + param_kayWordUnblock,false,"");
        //reffer the previous tc for invoke
        lib_Common.bc_APIStore_InvokeAPI(caller, param_APIName,param_versionNumber,param_applicationName,param_keyTypeToInvoke,param_yes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeFourHundredAndThree,"",param_no,"","","","",param_no,"","","","","","","","",param_no,"","","","",param_no,"","","","","","","","");	
    }
    /**
     *  Business component APIM2_794.
     */
    public final static void APIM2_794(final SeleniumTestBase caller, final String param_APIName, final String param_APIContext, final String param_APITag, final String param_URLPattern, final String param_verbMethodGET, final String param_ProductionEndPontJaxRS, final String param_storeURL, final String param_serverNameDomainOne, final String param_tenantOrAdminStoreOne, final String param_RateStarLevelThree, final String param_RateStarLevelFour, final String param_RateStarLevelTwo, final String param_tenantOrAdminStoreTwo, final String param_Description) throws Exception {
        //APIM2-794:   Rate API in the store
        caller.writeToReport("Start Executing APIM2-794");
        //create API
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Type API Name
        String varAPIName = param_APIName+caller.generateData("int",3);
        caller.type("APIPublisherAdd.tf_APIName",varAPIName);
        //Store API name as a variable
        caller.store("keyAPIName","String",varAPIName);
        //generating context value
        String varAPIContext = param_APIContext+caller.generateData("int",3);
        //Type API context
        caller.type("APIPublisherAdd.tf_APIContext",varAPIContext);
        //Storing Context value
        caller.store("keyAPIContext","String",varAPIContext);
        //Setting variable for API version
        String varAPIVersion = "v1.0."+caller.generateData("int",1);
        //Type API Version
        caller.type("APIPublisherAdd.tf_APIVersion",varAPIVersion);
        //storing version value
        caller.store("keyAPIVersion","String",varAPIVersion);
        //Setting variable for API Tag
        String APITag = param_APITag+caller.generateData("int",3);
        //Type Description
        caller.type("APIPublisherAdd.tf_Discription",param_Description);
        //Type API tags
        caller.type("APIPublisherAdd.tf_Tags",APITag);
        caller.pause("2000");
        caller.fireEvent("KEY%key=\n","2000");
        //type URL pattern
        caller.type("APIPublisherAdd.tf_URLPattern",param_URLPattern);
        //setting the value 'GET'
        caller.click("APIPublisherBrowse.chk_verbMethod","verb_PARAM:" + param_verbMethodGET);
        //add the API
        caller.click("APIPublisherBrowse.btn_Add");
        //save the API
        caller.click("APIPublisherAdd.btn_Save");
        //waite for content load
        caller.pause("3000");
        //wait for content load
        caller.pause("5000");
        //click on next implement
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //API Manage Section
        //wait for content load
        caller.pause("8000");
        //Go to browse page
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",varAPIName);
        caller.pause("2000");
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("1000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPIName);
        caller.click("APIPublisherBrowse.lnk_Edit");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        caller.click("APIPublisherBrowse.ele_lblManagedAPI");
        //type production end point
        caller.type("APIPublisherBrowse.tf_ProductionEndPoint",param_ProductionEndPontJaxRS);
        caller.click("APIPublisherBrowse.btn_SaveManagedAPI");
        //waiting for content load
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_NextManage");
        //waiting for content load
        caller.pause("2000");
        //select tiers
        lib_Common.bc_SelectTiers(caller);
        //save and publish the API
        caller.click("APIPublisherBrowse.btn_SaveAndPublish");
        //waiting for content load
        caller.pause("3000");
        //API is successfully published
        caller.click("APIPublisherBrowse.btn_Close");
        //waiting for content load
        caller.pause("2000");
        //go to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //select the server name
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        //waiting for content load
        caller.pause("3000");
        //log into the store user1
        lib_Common.bc_StoreLogin(caller, param_tenantOrAdminStoreOne);
        //select the API
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPIName);
        //rating the API level three
        caller.click("APIStoreForums.ele_RateStarLevel","param_RateStarLevel_PARAM:" + param_RateStarLevelThree);
        //waiting for content load
        caller.pause("2000");
        //rating the API level four
        caller.click("APIStoreForums.ele_RateStarLevel","param_RateStarLevel_PARAM:" + param_RateStarLevelFour);
        //waiting for content load
        caller.pause("2000");
        //remove ratings of API
        caller.click("APIStoreHome.btn_RemoveRatingsOfAPI");
        //rating the API
        caller.click("APIStoreForums.ele_RateStarLevel","param_RateStarLevel_PARAM:" + param_RateStarLevelTwo);
        //log out from the store
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //Waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //Waiting for content load
        caller.pause("2000");
        //log into the store user2
        lib_Common.bc_StoreLogin(caller, param_tenantOrAdminStoreTwo);
        //select the API
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPIName);
        //rating the API
        caller.click("APIStoreForums.ele_RateStarLevel","param_RateStarLevel_PARAM:" + param_RateStarLevelThree);
        //verifying the rated topic
        caller.checkElementPresent("APIStoreForums.ele_lblStarVerify","param_StarVerify_PARAM:" + param_RateStarLevelThree,false,"");
        caller.writeToReport("End Of Executing APIM2-794");	
    }
    /**
     *  Business component APIM2_812.
     */
    public final static void APIM2_812(final SeleniumTestBase caller, final String param_APIName, final String param_APIVersionOne, final String param_APIvisibility, final String param_APIImagePath, final String param_TagName, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_productionEndpoint, final String param_sandboxEndpoint, final String param_textEndpointSecurityScheme, final String param_keyYes, final String param_keyNo, final String param_subscription, final String param_ApplicationName, final String param_tierType, final String param_keyTypeToInvoke, final String param_buttonNamePost, final String param_postPayloadContext, final String param_postCustomerNameFromPayloadContext, final String param_postResponseCodeTwoHundred, final String param_postResponseHeaders, final String param_buttonNameGet, final String param_getCustomerName, final String param_buttonNamePut, final String param_putCustomerName, final String param_putResponseBodyNoContent, final String param_buttonNameGetForPutVerification, final String param_getCustomerNameForPutVerification, final String param_getResponseCodeTwoHundredForPutVerification, final String param_getResponseHeadersForPutVerification, final String param_buttonNameHead, final String param_headResponseHeadersNull, final String param_buttonNameDelete, final String param_deleteResponseHeaders, final String param_buttonNameGetForDeleteVerification, final String param_getResponseCodeTwoHundredAndFourForDeleteVerification, final String param_getResponseHeadersNullForDeleteVerification, final String param_storeURL, final String param_newVersion, final String param_statusPublished, final String param_TenantOrAdmin, final String param_TenantOneOrAdminStoreOne, final String param_publisherURL, final String param_headResponseBodyNoContent, final String param_deleteResponseBodyNoContent, final String param_noContent) throws Exception {
        caller.writeToReport("Start of executing APIM2_812");
        //creation of three different API names
        //genarate api name one
        String var_APINameOne = param_APIName+"_"+caller.generateData("int",3);
        //genarate api name two
        String var_APINameTwo = param_APIName+"_"+caller.generateData("int",3);
        //genarate api name three
        String var_APINameThree = param_APIName+"_"+caller.generateData("int",3);
        //Creation of API
        //creating api with api name one
        lib_Common.bc_APIPublisher_AddAPI_DesignPhase_WitoutAutoGenAPINameAndContext(caller, var_APINameOne,var_APINameOne+"/"+"{version}"+"/"+"test",param_APIVersionOne,param_APIvisibility,param_APIImagePath,param_TagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_keyNo,param_sandboxEndpoint,param_keyNo,param_textEndpointSecurityScheme);
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_keyNo,param_keyNo,param_subscription);
        caller.click("APIPublisherHome.lnk_Browse");
        //wait for content load
        caller.pause("2000");
        //creating api with api name two
        String var_version = "{version}";
        lib_Common.bc_APIPublisher_AddAPI_DesignPhase_WitoutAutoGenAPINameAndContext(caller, var_APINameTwo,var_version+"/"+var_APINameTwo,param_APIVersionOne,param_APIvisibility,param_APIImagePath,param_TagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_keyNo,param_sandboxEndpoint,param_keyNo,param_textEndpointSecurityScheme);
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_keyNo,param_keyNo,param_subscription);
        caller.click("APIPublisherHome.lnk_Browse");
        //wait for content load
        caller.pause("2000");
        //creating api with api name three
        lib_Common.bc_APIPublisher_AddAPI_DesignPhase_WitoutAutoGenAPINameAndContext(caller, var_APINameThree,var_APINameThree+"/"+"test"+"/"+"{version}",param_APIVersionOne,param_APIvisibility,param_APIImagePath,param_TagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_keyNo,param_sandboxEndpoint,param_keyNo,param_textEndpointSecurityScheme);
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_keyNo,param_keyNo,param_subscription);
        //End of creation of API
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_TenantOneOrAdminStoreOne);
        //API Subcription
        //Go to My Subcription window to Generate keys
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",var_APINameOne);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + var_APINameOne);
        //waiting for content load
        caller.pause("3000");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_ApplicationName);
        caller.select("APIStoreAPIs.ele_ddtierToSubscribe",param_tierType);
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        caller.click("APIStoreHome.lnk_MySubcription");
        //verify that the landed page is My Subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_ddApplicationWithSubscription",false,"");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        //wait for content load
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        }
        //wait for content load
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        }
        //wait for content load
        caller.pause("2000");
        //wait for content load
        caller.pause("1000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        //verify that the api is visible under subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsPublished","param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne,false,"");
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_MySubcription");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        lib_Common.bc_APIStore_InvokeAPI(caller, var_APINameOne,param_APIVersionOne,param_ApplicationName,param_keyTypeToInvoke,param_keyYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNameGet,param_getCustomerName,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_postResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_keyYes,param_buttonNameHead,param_headResponseBodyNoContent,param_postResponseCodeTwoHundred,param_headResponseHeadersNull,param_keyYes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_postResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_noContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        caller.pause("3000");
        //Subscribe and invoke second API
        //API Subcription
        //Go to My Subcription window to Generate keys
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",var_APINameTwo);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + var_APINameTwo);
        //waiting for content load
        caller.pause("3000");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_ApplicationName);
        caller.select("APIStoreAPIs.ele_ddtierToSubscribe",param_tierType);
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        caller.click("APIStoreHome.lnk_MySubcription");
        //verify that the landed page is My Subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_ddApplicationWithSubscription",false,"");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        //wait for content load
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        }
        //wait for content load
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        }
        //wait for content load
        caller.pause("2000");
        //wait for content load
        caller.pause("1000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        //verify that the api is visible under subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsPublished","param_APIName_PARAM:" + var_APINameTwo + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne,false,"");
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_MySubcription");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        lib_Common.bc_APIStore_InvokeAPI(caller, var_APINameTwo,param_APIVersionOne,param_ApplicationName,param_keyTypeToInvoke,param_keyYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNameGet,param_getCustomerName,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_postResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_keyYes,param_buttonNameHead,param_headResponseBodyNoContent,param_postResponseCodeTwoHundred,param_headResponseHeadersNull,param_keyYes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_postResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_noContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        caller.pause("3000");
        //Subscribe and invode third API
        //API Subcription
        //Go to My Subcription window to Generate keys
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",var_APINameThree);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + var_APINameThree);
        //waiting for content load
        caller.pause("3000");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_ApplicationName);
        caller.select("APIStoreAPIs.ele_ddtierToSubscribe",param_tierType);
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        caller.click("APIStoreHome.lnk_MySubcription");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        //verify that the landed page is My Subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_ddApplicationWithSubscription",false,"");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        //wait for content load
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        }
        //wait for content load
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        }
        //wait for content load
        caller.pause("2000");
        //wait for content load
        caller.pause("1000");
        //verify that the api is visible under subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsPublished","param_APIName_PARAM:" + var_APINameThree + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne,false,"");
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        lib_Common.bc_APIStore_InvokeAPI(caller, var_APINameThree,param_APIVersionOne,param_ApplicationName,param_keyTypeToInvoke,param_keyYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNameGet,param_getCustomerName,param_postResponseCodeTwoHundred,param_postResponseHeaders,param_keyYes,param_buttonNamePut,param_putCustomerName,param_putResponseBodyNoContent,param_postResponseCodeTwoHundred,param_buttonNameGetForPutVerification,param_getCustomerNameForPutVerification,param_getResponseCodeTwoHundredForPutVerification,param_getResponseHeadersForPutVerification,param_keyYes,param_buttonNameHead,param_headResponseBodyNoContent,param_postResponseCodeTwoHundred,param_headResponseHeadersNull,param_keyYes,param_buttonNameDelete,param_deleteResponseBodyNoContent,param_postResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGetForDeleteVerification,param_noContent,param_getResponseCodeTwoHundredAndFourForDeleteVerification,param_getResponseHeadersNullForDeleteVerification);
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APIs");
        caller.writeToReport("End of executing APIM2_812");	
    }
    /**
     *  Business component APIM2_646.
     */
    public final static void APIM2_646(final SeleniumTestBase caller, final String param_StoreURL, final String param_serverNameDomainOne, final String param_tenantOrAdminStoreOne, final String param_ApplicationName, final String param_AppDescription, final String param_yes, final String param_throttlingTier, final String param_active, final String param_callBackURL, final String param_Edit, final String param_Delete) throws Exception {
        //APIM2-646:  Create application
        caller.writeToReport("Start  Executing APIM2-646");
        //go to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_StoreURL,"2000");
        //select the server name
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        //waiting for content load
        caller.pause("3000");
        //create Application Name
        String varApplicationName = param_ApplicationName+caller.generateData("int",3);
        //creating application in store
        lib_Common.bc_APIStore_CreateApplication(caller, varApplicationName,param_AppDescription,param_yes,param_throttlingTier,param_yes,param_callBackURL);
        //checking the contents of grid
        caller.checkElementPresent("APIStoreMyApllication.ele_lblVerifingAPPDataInGrid","param_AppName_PARAM:" + varApplicationName + "_PARAM," + "param_CallbackURL_PARAM:" + param_callBackURL + "_PARAM," + "param_Description_PARAM:" + param_AppDescription,false,"");
        //waiting for content load
        caller.pause("2000");
        //click on my subscriptions
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",varApplicationName);
        //waiting for content load
        caller.pause("2000");
        caller.clickAt("APIStoreMySubcription.ele_ddAppsWithSubs","0,0");
        //checking for the application name in drop down list
        caller.checkElementPresent("APIStoreMySubcription.ele_ddCheckInSubscriptions","param_ApplicationName_PARAM:" + varApplicationName,false,"");
        //click on APIs
        caller.click("APIStoreHome.lnk_APIs");
        //waiting for content load
        caller.pause("2000");
        //retrieving the API name
        String varAPINameOne = caller.retrieveString("keyAPIName");
        //click on API
        caller.click("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + varAPINameOne);
        //waiting for content load
        caller.pause("2000");
        //checking application name in the drop down list
        caller.checkElementPresent("APIStoreMySubcription.ele_ddApplications","param_ApplicationName_PARAM:" + varApplicationName,false,"");
        caller.writeToReport("End of  Executing APIM2-646");	
    }
    /**
     *  Business component APIM2_498.
     */
    public final static void APIM2_498(final SeleniumTestBase caller, final String param_APIName, final String param_APIVersionOne, final String param_keyWordYes, final String param_keyWordNo, final String param_storeURL, final String param_applicationName, final String param_publisherURL, final String param_StatePublished, final String param_APIVersionFour, final String param_true, final String param_false, final String param_publisherOneOfTenantOneOrAdmin, final String param_StoreNameOneDomainOne, final String param_keyTypeProduction, final String param_keyTypeSandbox, final String param_buttonNamePost, final String param_postPayloadContext, final String param_postCustomerNameFromPayloadContext, final String param_ResponseCodeTwoHundred, final String param_postResponseHeaders, final String param_buttonNameGet, final String param_getCustomerName, final String param_getResponseHeaders, final String param_buttonNamePut, final String param_putCustomerName, final String param_ResponseBodyNoContent, final String param_getCustomerNameForPutVerification, final String param_getResponseHeadersForPutVerification, final String param_buttonNameDelete, final String param_deleteResponseHeaders, final String param_ResponseCodeTwoHundredAndFour, final String param_ResponseHeadersNull, final String param_StoreOneOfTenantOneOrAdmin) throws Exception {
        //Test Case APIM2-498: Invoking an API copy made from a blocked API using API console.
        caller.writeToReport("Start of execution of APIM2_498");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        lib_Common.bc_APIPublisherSearch(caller, param_APIName,param_APIName,param_APIVersionOne);
        //since this api is already blocked we could utilize it
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne + "_PARAM," + "param_APIName_PARAM:" + param_APIName);
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_Overview");
        //wait for content load
        caller.pause("2000");
        //verify that the overview page contains the create button
        caller.checkElementPresent("Browse_Overview.btn_CreateNewVersion",false,"");
        caller.click("Browse_Overview.btn_CreateNewVersion");
        //Wait for content load
        caller.pause("2000");
        //verify that to version tab has expanded successfully and its contents are available
        caller.checkElementPresent("Browse_Overview.tf_ToVersion",false,"");
        caller.checkElementPresent("Browse_Overview.chk_DefaultVersion",false,"");
        caller.checkElementPresent("Browse_Overview.btn_Done",false,"");
        //Type new version - version four
        caller.type("Browse_Overview.tf_ToVersion",param_APIVersionFour);
        //Wait for content load
        caller.pause("1000");
        //Wait for content load
        caller.pause("1000");
        caller.click("Browse_Overview.btn_Done");
        //Cannot verify the new version added message due to application bug
        //Wait for content load
        caller.pause("2000");
        lib_Common.bc_APIPublisherSearch(caller, param_APIName,param_APIName,param_APIVersionFour);
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionFour + "_PARAM," + "param_APIName_PARAM:" + param_APIName);
        //verify the availability of Lifestyle tab
        caller.checkElementPresent("APIPublisherBrowse.btn_Lifecycle",false,"");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //Wait for content load
        caller.pause("2000");
        caller.select("browseLifecycle.ele_ddSelectState",param_StatePublished);
        //Wait for content load
        caller.pause("1000");
        if(caller.checkElementPresent("browseLifecycle.chk_PropagateChangesToAPIGatewayTrueOrFalse","param_TrueOrFalse_PARAM:" + param_false)){
        caller.click("browseLifecycle.chk_PropagateChangesToAPIGatewayTrueOrFalse","param_TrueOrFalse_PARAM:" + param_false);
        //Wait for content load
        caller.pause("1000");
        }
        if(caller.checkElementPresent("browseLifecycle.chk_deprecateOldVersionsTrueOrFalse","param_TrueOrFalse_PARAM:" + param_false)){
        caller.click("browseLifecycle.chk_deprecateOldVersionsTrueOrFalse","param_TrueOrFalse_PARAM:" + param_false);
        //Wait for content load
        caller.pause("1000");
        }
        if(caller.checkElementPresent("browseLifecycle.chk_requireResubscriptionTrueOrFalse","param_TrueOrFalse_PARAM:" + param_true)){
        caller.click("browseLifecycle.chk_requireResubscriptionTrueOrFalse","param_TrueOrFalse_PARAM:" + param_true);
        //Wait for content load
        caller.pause("1000");
        }
        caller.click("browseLifecycle.btn_Update");
        //verify the success message
        caller.checkElementPresent("browseLifecycle.ele_lblUpdateSuccessMessage",false,"");
        //Wait for content load
        caller.pause("1000");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_StoreNameOneDomainOne);
        lib_Common.bc_APIStore_MySubscription(caller, param_applicationName,param_APIName,param_APIVersionFour);
        //invoking production endpoint of the latest copy of the api taken from the blocked api
        lib_Common.bc_APIStore_InvokeAPI(caller, param_APIName,param_APIVersionFour,param_applicationName,param_keyTypeProduction,param_keyWordYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_ResponseCodeTwoHundred,param_postResponseHeaders,param_keyWordYes,param_buttonNameGet,param_getCustomerName,param_ResponseCodeTwoHundred,param_getResponseHeaders,param_keyWordYes,param_buttonNamePut,param_putCustomerName,param_ResponseBodyNoContent,param_ResponseCodeTwoHundred,param_buttonNameGet,param_getCustomerNameForPutVerification,param_ResponseCodeTwoHundred,param_getResponseHeadersForPutVerification,param_keyWordNo,"","","","",param_keyWordYes,param_buttonNameDelete,param_ResponseBodyNoContent,param_ResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGet,param_ResponseBodyNoContent,param_ResponseCodeTwoHundredAndFour,param_ResponseHeadersNull);
        lib_Common.bc_APIStore_MySubscription(caller, param_applicationName,param_APIName,param_APIVersionFour);
        //invoking sandbox endpoint of the latest copy of the api taken from the blocked api
        lib_Common.bc_APIStore_InvokeAPI(caller, param_APIName,param_APIVersionFour,param_applicationName,param_keyTypeSandbox,param_keyWordYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_ResponseCodeTwoHundred,param_postResponseHeaders,param_keyWordYes,param_buttonNameGet,param_getCustomerName,param_ResponseCodeTwoHundred,param_getResponseHeaders,param_keyWordYes,param_buttonNamePut,param_putCustomerName,param_ResponseBodyNoContent,param_ResponseCodeTwoHundred,param_buttonNameGet,param_getCustomerNameForPutVerification,param_ResponseCodeTwoHundred,param_getResponseHeadersForPutVerification,param_keyWordNo,"","","","",param_keyWordYes,param_buttonNameDelete,param_ResponseBodyNoContent,param_ResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGet,param_ResponseBodyNoContent,param_ResponseCodeTwoHundredAndFour,param_ResponseHeadersNull);
        caller.writeToReport("End of execution of APIM2_498");	
    }
    /**
     *  Business component APIM2_667.
     */
    public final static void APIM2_667(final SeleniumTestBase caller, final String param_publisherURL, final String param_storeURL, final String param_APIVersionOne, final String param_provider, final String param_applicationName, final String param_APIName, final String param_kayWordUnblock, final String param_keyWordProductionAndSandbox, final String param_kayWordBlock, final String param_serverNameDomainOne, final String param_storeOneOfTenantOneOrAdmin, final String param_Blocked, final String param_keyWordBlocked, final String param_keyWordOkUpperCase) throws Exception {
        //APIM2-667:  To ensure that subscritption to APIs with blocked 'Production and Sandbox' subscriptions is restricted.
        caller.writeToReport("Start  Executing APIM2-667");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        caller.click("APIPublisherHome.lnk_Subscriptions");
        caller.checkElementPresent("APIPublisherMyAPIs.lnk_APIRelativeNameFirstRow","param_provider_PARAM:" + param_provider + "_PARAM," + "param_applicationName_PARAM:" + param_applicationName + "_PARAM," + "param_apiName_PARAM:" + param_APIName,false,"");
        //Waiting for content to load
        caller.pause("2000");
        caller.click("APIPublisherMyAPIs.lnk_BlockedOrUnblockedFirstRow","param_provider_PARAM:" + param_provider + "_PARAM," + "param_applicationName_PARAM:" + param_applicationName + "_PARAM," + "param_apiName_PARAM:" + param_APIName + "_PARAM," + "param_kayWordBlockOrUnblock_PARAM:" + param_kayWordUnblock);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherMyAPIs.chk_ProductionAndSandboxFirstRow","param_provider_PARAM:" + param_provider + "_PARAM," + "param_applicationName_PARAM:" + param_applicationName + "_PARAM," + "param_apiName_PARAM:" + param_APIName + "_PARAM," + "param_keyWordProductionAndSandbox_PARAM:" + param_keyWordProductionAndSandbox);
        //Waiting for content to load
        caller.pause("2000");
        caller.click("APIPublisherMyAPIs.lnk_BlockedOrUnblockedFirstRow","param_provider_PARAM:" + param_provider + "_PARAM," + "param_applicationName_PARAM:" + param_applicationName + "_PARAM," + "param_apiName_PARAM:" + param_APIName + "_PARAM," + "param_kayWordBlockOrUnblock_PARAM:" + param_kayWordBlock);
        //Waiting for content to load
        caller.pause("2000");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        lib_Common.bc_StoreLogin(caller, param_storeOneOfTenantOneOrAdmin);
        //Go to Subscription Section
        caller.click("APIStoreHome.lnk_MySubcription");
        //Waiting for content to load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubscribedAPIBlockedWithAPINameAndVersion","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne + "_PARAM," + "param_statusBlocked_PARAM:" + param_keyWordBlocked,false,"");
        caller.click("APIStoreMySubcription.btn_deleteAPI","param_APIName_PARAM:" + param_APIName + "_PARAM," + "Param_APIVersion_PARAM:" + param_APIVersionOne);
        //Waiting for content to load
        caller.pause("2000");
        caller.click("APIStoreMySubcription.btn_Yes");
        //Go to the API Home
        caller.click("APIStoreHome.lnk_APIs");
        //waiting for content load
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",param_APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + param_APIName);
        //waiting for content load
        caller.pause("3000");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_applicationName);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        //Waiting For Content To load
        caller.pause("2000");
        //Verify the Error message
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubscribedAPIBlockedWithAPINameAndVersion","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne + "_PARAM," + "param_statusBlocked_PARAM:" + param_keyWordBlocked,false,"");
        caller.click("APIStoreMySubcription.btn_subscriptionErrorPopupOk","param_keyWordOk_PARAM:" + param_keyWordOkUpperCase);
        /*
        CheckElementPresent
         object=APIStoreMySubcription.ele_lblSubscriptionError
         param_Status=
         param_APIName=@param_APIName
         param_ApplicationName=@param_applicationName
         stopOnFailure=false
         customErrorMessage=

        //Click on Ok button
        Click
         object=APIStoreMySubcription.btn_Ok
         param_Status=
        */
        /*
        CheckElementPresent
         object=APIStoreMySubcription.ele_lblSubcribedAPIsBlocked
         param_Blocked=@param_Blocked
         stopOnFailure=false
         customErrorMessage=
        */
        //remove the application
        //try to resubs cribe and verify the message
        /*
        Click
         object=APIPublisherMyAPIs.chk_ProductionOnlyRestOfRows
         param_provider=@param_provider
         param_applicationName=@param_applicationName
         param_apiName=@param_APIName
         param_keyWordProductionOnly=@param_keyWordProductionOnly
        */
        /*
        //Retrieve the API name
        Retrieve
         key=key_APINameDesign
         var=varAPINameOnez
         type=String
        Retrieve
         key=keyApplicationThree
         var=varApplicationNameThreex
         type=String
        //Remove the Subscription from the subscribed API
        Click
         object=APIStoreMySubcription.btn_deleteAPI
         param_APIName=@varAPINameOnez
         Param_APIVersion=@param_APIVersionOne
        //Waiting for content to load
        Pause
         ms=2000
        Click
         object=APIStoreMySubcription.btn_Yes
        //Waiting for Content to load
        Pause
         ms=2000
        //Go to the API Home
        Click
         object=APIStoreHome.lnk_APIs
        //waiting for content load
        Pause
         ms=2000
        Type
         object=APIStoreHome.tf_APISearchStore
         text=@varAPINameOnez
        Click
         object=APIStoreHome.btn_SearchButtonStore
        //waiting for content load
        Pause
         ms=3000
        Click
         object=APIStoreHome.lnk_APINameStore
         param_APIName=@varAPINameOnez
        //waiting for content load
        Pause
         ms=3000
        Select
         object=APIStoreAPIs.ele_ddSelectAplicationToSubscribe
         selectLocator=@varApplicationNameThreex
        //waiting for content load
        Pause
         ms=2000
        Click
         object=APIStoreAPIs.btn_Subscribe
        //Waiting For Content To load
        Pause
         ms=2000
        //Verify the Error message
        CheckElementPresent
         object=APIStoreMySubcription.ele_lblSubscriptionError
         param_APIName=@varAPINameOnez
         param_ApplicationName=@varApplicationNameThreex
         stopOnFailure=false
         customErrorMessage=
        //Click on Ok button
        Click
         object=APIStoreMySubcription.btn_Ok
        */
        caller.writeToReport("End of Executing APIM2-667");	
    }
    /**
     *  Business component APIM2_650.
     */
    public final static void APIM2_650(final SeleniumTestBase caller, final String param_StoreURL, final String param_serverNameDomainOne, final String param_NewApplication, final String param_ApplicationName, final String param_AppDescription, final String param_throttlingTier, final String param_callBackURL) throws Exception {
        //APIM2-650: Create application while making a subscription
        caller.writeToReport("Start  Executing APIM2-650");
        //go to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_StoreURL,"2000");
        //select the server name
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        //waiting for content load
        caller.pause("3000");
        //retrieving the API name
        String varAPINameTwo = caller.retrieveString("keyAPIName");
        //click on API
        caller.click("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + varAPINameTwo);
        //select New Application...
        caller.select("APIStoreMySubcription.ele_ddApplicationsList",param_NewApplication);
        //create Application Name
        String varApplicationName = param_ApplicationName+caller.generateData("int",3);
        //storing application name
        caller.store("keyApplicationName","String",varApplicationName);
        //creating application in store
        caller.type("APIStoreMyApllication.tf_ApplicationName",varApplicationName);
        //wait for content load
        caller.pause("1000");
        //select throttling tier
        caller.select("APIStoreMyApllication.ele_ddThrottlingTier",param_throttlingTier);
        caller.type("APIStoreMyApllication.tf_CallBackURL",param_callBackURL);
        //wait for content load
        caller.pause("1000");
        //type application description
        caller.type("APIStoreMyApllication.tf_Discription",param_AppDescription);
        //wait for content load
        caller.pause("1000");
        caller.click("APIStoreMyApllication.btn_AddApplication");
        //waiting for content load
        caller.pause("3000");
        //click No on Application creation**
        caller.click("APIStoreMySubcription.lnk_NoToAppCreation");
        //checking the contents of grid
        caller.checkElementPresent("APIStoreMyApllication.ele_lblVerifingAPPDataInGrid","param_AppName_PARAM:" + varApplicationName + "_PARAM," + "param_CallbackURL_PARAM:" + param_callBackURL + "_PARAM," + "param_Description_PARAM:" + param_AppDescription,false,"");
        //click on my subscriptions
        caller.click("APIStoreHome.lnk_MySubcription");
        //waiting for content load
        caller.pause("2000");
        //checking the application subscription list***
        caller.clickAt("APIStoreMySubcription.ele_ddAppsWithSubs","0,0");
        //waiting for content load
        caller.pause("2000");
        //checking the application name is available in my subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_ddCheckInSubscriptions","param_ApplicationName_PARAM:" + varApplicationName,false,"");
        //click on APIs
        caller.click("APIStoreHome.lnk_APIs");
        //waiting for content load
        caller.pause("2000");
        //click on API
        caller.click("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + varAPINameTwo);
        //waiting for content load
        caller.pause("2000");
        //checking application name in the drop down list***
        caller.checkElementPresent("APIStoreMySubcription.ele_ddAppNameInAPIList","param_ApplicationName_PARAM:" + varApplicationName,false,"");
        caller.writeToReport("End of  Executing APIM2-650");	
    }
    /**
     *  Business component APIM2_659.
     */
    public final static void APIM2_659(final SeleniumTestBase caller, final String param_serverNameDomainOne, final String param_StoreURL, final String param_Statistics, final String param_TenantOrAdmin) throws Exception {
        //APIM2-659: Behavior of store when multiple applications are available
        //this test case runs in admin mode only...Forum tab is not available on tenant mode***
        if(param_TenantOrAdmin.equals("TenantOne")){
        caller.writeToReport("Test case canont execute in Tenant mode because need to perform in Forum");
        //go to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_StoreURL,"2000");
        //select the server name
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_MyApplication");
        caller.pause("3000");
        int count = caller.getObjectCount("APIStoreMyApllication.ele_rowCount");          
        for(;count>0;count--){
        if(caller.checkElementPresent("APIStoreMyApllication.lnk_deleteApplicationLink")){
        caller.click("APIStoreMyApllication.lnk_deleteApplicationLink");
        caller.pause("2000");
        caller.click("APIStoreMyApllication.lnk_Yes");
        }
        }
        } else if(param_TenantOrAdmin.equals("Admin")){
        caller.writeToReport("Start  Executing APIM2-659");
        //go to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_StoreURL,"2000");
        //select the server name
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        //waiting for content load
        caller.pause("2000");
        //click on prototyped APIs
        caller.click("APIStoreHome.lnk_PrototypedAPIs");
        //waiting for content load
        caller.pause("2000");
        //click on My apps
        caller.click("APIStoreHome.lnk_MyApplication");
        //waiting for content load
        caller.pause("2000");
        //click on Forums
        caller.click("APIStoreSignUp.btn_Forum");
        //waiting for content load
        caller.pause("2000");
        //click on Statistics-API Usage per Application
        caller.click("APIStoreHome.lnk_Statistics");
        caller.click("APIStoreHome.ele_ddSelectStatistics","param_Statistics_PARAM:" + param_Statistics);
        //waiting for content load
        caller.pause("2000");
        //checking for the API name in dropdown list
        caller.checkElementPresent("APIStoreHome.ele_lblStoreStatistics",false,"");
        //click on my subscriptions
        caller.click("APIStoreHome.lnk_MySubcription");
        //waiting for content load
        caller.pause("2000");
        //checking the application subscription list
        caller.clickAt("APIStoreMySubcription.ele_ddAppsWithSubs","0,0");
        //waiting for content load
        caller.pause("2000");
        //retrieving application name
        String varApplicationName = caller.retrieveString("keyApplicationName");
        //checking for the API name in dropdown list
        caller.checkElementPresent("APIStoreMySubcription.ele_ddCheckInSubscriptions","param_ApplicationName_PARAM:" + varApplicationName,false,"");
        caller.writeToReport("End of  Executing APIM2-659");
        }	
    }
    /**
     *  Business component APIM2_651.
     */
    public final static void APIM2_651(final SeleniumTestBase caller, final String param_silver, final String param_newCallbackUrl, final String param_newDescription, final String param_StoreURL, final String param_serverNameDomainOne, final String param_callBackURL, final String param_AppDescription, final String param_ApplicationName) throws Exception {
        //APIM2-651: Edit an application without subscriptions
        caller.writeToReport("Start  Executing APIM2-651");
        //go to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_StoreURL,"2000");
        //select the server name
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        //waiting for content load
        caller.pause("2000");
        //click on My apps
        caller.click("APIStoreHome.lnk_MyApplication");
        //waiting for content load
        caller.pause("2000");
        //retrieve application name
        String varApplicationNameOne = caller.retrieveString("keyApplicationName");
        //click on edit button
        caller.click("APIStoreMyApllication.btn_EditApplication","param_AppName_PARAM:" + varApplicationNameOne + "_PARAM," + "param_CallbackURL_PARAM:" + param_callBackURL + "_PARAM," + "param_Description_PARAM:" + param_AppDescription);
        //waiting for content load
        caller.pause("2000");
        //create another Application Name to edit
        String varApplicationNameEdit = param_ApplicationName+caller.generateData("int",4);
        //type new application name
        caller.type("APIStoreMyApllication.tf_NewApplicationName",varApplicationNameEdit);
        //select tiers
        caller.select("APIStoreMyApllication.ele_ddSelectTier",param_silver);
        //waiting for content load
        caller.pause("2000");
        //type call back url
        caller.type("APIStoreMyApllication.tf_NewEditedCallbackURL",param_newCallbackUrl);
        //type the editing description
        caller.type("APIStoreMyApllication.tf_NewEditedDescription",param_newDescription);
        //waiting for content load
        caller.pause("2000");
        //click on save the changes
        caller.click("APIStoreMyApllication.btn_saveEditApplication");
        //waiting for content load
        caller.pause("3000");
        //Checking editable fields are not editable
        caller.checkObjectProperty("APIStoreMyApllication.tf_NewApplicationName","ELEMENTPRESENT","false",false,"");
        //Check callback URl
        caller.checkObjectProperty("APIStoreMyApllication.tf_NewEditedCallbackURL","ELEMENTPRESENT","false",false,"");
        //Check description
        caller.checkObjectProperty("APIStoreMyApllication.tf_NewEditedDescription","ELEMENTPRESENT","false",false,"");
        //waiting for content load
        caller.pause("2000");
        //Checking save and cancel buttons are disapeared
        caller.checkElementPresent("APIStoreMyApllication.btn_EditApplication","param_AppName_PARAM:" + varApplicationNameEdit + "_PARAM," + "param_CallbackURL_PARAM:" + param_newCallbackUrl + "_PARAM," + "param_Description_PARAM:" + param_newDescription,false,"");
        //checking the contents of application data grid
        caller.checkElementPresent("APIStoreMyApllication.ele_lblVerifingAPPDataInGrid","param_AppName_PARAM:" + varApplicationNameEdit + "_PARAM," + "param_CallbackURL_PARAM:" + param_newCallbackUrl + "_PARAM," + "param_Description_PARAM:" + param_newDescription,false,"");
        caller.writeToReport("End of  Executing APIM2-651");	
    }
    /**
     *  Business component APIM2_652.
     */
    public final static void APIM2_652(final SeleniumTestBase caller, final String param_StoreURL, final String param_serverNameDomainOne, final String param_ApplicationName, final String param_AppDescription, final String param_yes, final String param_throttlingTier, final String param_callBackURL, final String param_silver, final String param_newCallbackUrl, final String param_newDescription) throws Exception {
        //APIM2-651: Edit an application without subscriptions
        caller.writeToReport("Start  Executing APIM2-652");
        //go to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_StoreURL,"2000");
        //select the server name
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        //waiting for content load
        caller.pause("2000");
        //click on My apps
        caller.click("APIStoreHome.lnk_MyApplication");
        //waiting for content load
        caller.pause("2000");
        //create Application Name
        String varApplicationName = param_ApplicationName+caller.generateData("int",3);
        //creating application in store
        lib_Common.bc_APIStore_CreateApplication(caller, varApplicationName,param_AppDescription,param_yes,param_throttlingTier,param_yes,param_callBackURL);
        //waiting for content load
        caller.pause("2000");
        //click on edit button
        caller.click("APIStoreMyApllication.btn_EditApplication","param_AppName_PARAM:" + varApplicationName + "_PARAM," + "param_CallbackURL_PARAM:" + param_callBackURL + "_PARAM," + "param_Description_PARAM:" + param_AppDescription);
        //waiting for content load
        caller.pause("2000");
        //create Application Name
        String varApplicationNameOne = param_ApplicationName+caller.generateData("int",4);
        //type new application name
        caller.type("APIStoreMyApllication.tf_NewApplicationName",varApplicationNameOne);
        //select tiers
        caller.select("APIStoreMyApllication.ele_ddSelectTier",param_silver);
        //waiting for content load
        caller.pause("2000");
        caller.type("APIStoreMyApllication.tf_NewEditedCallbackURL",param_newCallbackUrl);
        caller.type("APIStoreMyApllication.tf_NewEditedDescription",param_newDescription);
        //waiting for content load
        caller.pause("2000");
        //click on save the changes
        caller.click("APIStoreMyApllication.btn_SaveEditedApplicationDetails");
        //waiting for content load
        caller.pause("2000");
        //checking the contents of grid
        caller.checkElementPresent("APIStoreMyApllication.ele_lblVerifingAPPDataInGrid","param_AppName_PARAM:" + varApplicationNameOne + "_PARAM," + "param_CallbackURL_PARAM:" + param_newCallbackUrl + "_PARAM," + "param_Description_PARAM:" + param_newDescription,false,"");
        //click on my subscriptions
        caller.click("APIStoreHome.lnk_MySubcription");
        //waiting for content load
        caller.pause("2000");
        //checking the application subscription list***
        caller.clickAt("APIStoreMySubcription.ele_ddAppsWithSubs","0,0");
        //waiting for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreMySubcription.ele_ddCheckInSubscriptions","param_ApplicationName_PARAM:" + varApplicationNameOne,false,"");
        //do the invoke part
        caller.writeToReport("End of  Executing APIM2-652");	
    }
    /**
     *  Business component APIM2_653.
     */
    public final static void APIM2_653(final SeleniumTestBase caller, final String param_StoreURL, final String param_serverNameDomainOne, final String param_ApplicationName, final String param_AppDescription, final String param_yes, final String param_throttlingTier, final String param_callBackURL) throws Exception {
        //APIM2-653: Delete an application without subscriptions
        caller.writeToReport("Start  Executing APIM2-653");
        //go to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_StoreURL,"2000");
        //select the server name
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        //waiting for content load
        caller.pause("2000");
        //create Application Name
        String varApplicationName = param_ApplicationName+caller.generateData("int",3);
        //creating application in store
        lib_Common.bc_APIStore_CreateApplication(caller, varApplicationName,param_AppDescription,param_yes,param_throttlingTier,param_yes,param_callBackURL);
        //click on My apps
        caller.click("APIStoreHome.lnk_MyApplication");
        //waiting for content load
        caller.pause("2000");
        //click on delete button
        caller.click("APIStoreMyApllication.ele_lblVerifingAPPDataInGrid","param_AppName_PARAM:" + varApplicationName + "_PARAM," + "param_CallbackURL_PARAM:" + param_callBackURL + "_PARAM," + "param_Description_PARAM:" + param_AppDescription);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreMyApllication.btn_yes");
        //click on my subscriptions
        caller.click("APIStoreHome.lnk_MySubcription");
        //checking the application subscription list***
        caller.clickAt("APIStoreMySubcription.ele_ddAppsWithSubs","0,0");
        //waiting for content load
        caller.pause("2000");
        //checking application name is removed
        caller.checkObjectProperty("APIStoreMySubcription.ele_ddCheckInSubscriptions","param_ApplicationName_PARAM:" + varApplicationName,"ELEMENTPRESENT","false",false,"");
        //click on APIs
        caller.click("APIStoreHome.lnk_APIs");
        //waiting for content load
        caller.pause("2000");
        //retrieving the API name
        String varAPINameTwo = caller.retrieveString("keyAPIName");
        //click on API
        caller.click("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + varAPINameTwo);
        //checking application name in the drop down list***
        caller.checkObjectProperty("APIStoreMySubcription.ele_ddAppNameInAPIList","param_ApplicationName_PARAM:" + varApplicationName,"ELEMENTPRESENT","false",false,"");
        //get the application count
        int count = caller.getObjectCount("APIStoreMyApllication.ele_rowCount");          
        //deleting applications in the table
        for(;count>0;count--){
        if(caller.checkElementPresent("APIStoreMyApllication.lnk_deleteApplicationLink")){
        caller.click("APIStoreMyApllication.lnk_deleteApplicationLink");
        caller.pause("2000");
        caller.click("APIStoreMyApllication.lnk_Yes");
        }
        }
        //waiting for content load
        caller.pause("2000");
        caller.writeToReport("End of  Executing APIM2-653");	
    }
    /**
     *  Business component APIM2_702.
     */
    public final static void APIM2_702(final SeleniumTestBase caller, final String param_APIName, final String param_APIContext, final String param_APITag, final String param_Description, final String param_URLPattern, final String param_verbMethodGET, final String param_ProductionEndPontJaxRS) throws Exception {
        //APIM2-702: Save an API at Design stage
        caller.writeToReport("Start  Executing APIM2-702");
        //create API
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Type API Name
        String varAPIName = param_APIName+caller.generateData("int",3);
        caller.type("APIPublisherAdd.tf_APIName",varAPIName);
        //Store API name as a variable
        caller.store("keyAPIName","String",varAPIName);
        //generating context value
        String varAPIContext = param_APIContext+caller.generateData("int",3);
        //Type API context
        caller.type("APIPublisherAdd.tf_APIContext",varAPIContext);
        //Storing Context value
        caller.store("keyAPIContext","String",varAPIContext);
        //Setting variable for API version
        String varAPIVersion = "v1.0."+caller.generateData("int",1);
        //Type API Version
        caller.type("APIPublisherAdd.tf_APIVersion",varAPIVersion);
        //storing version value
        caller.store("keyAPIVersion","String",varAPIVersion);
        //Setting variable for API Tag
        String APITag = param_APITag+caller.generateData("int",3);
        //press enter
        caller.fireEvent("KEY%key=\n","2000");
        //Type Description
        caller.type("APIPublisherAdd.tf_Discription",param_Description);
        //Type API tags
        caller.type("APIPublisherAdd.tf_Tags",APITag);
        //press enter
        caller.fireEvent("KEY%key=\n","2000");
        caller.pause("4000");
        //click on save
        caller.click("APIPublisherAdd.btn_Save");
        //waite for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Yes");
        //wait for content load
        caller.pause("3000");
        //Go to browse page
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("3000");
        caller.type("APIPublisherHome.tf_APISearch",varAPIName);
        //waiting for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPIName);
        //click on edit button
        caller.click("APIPublisherBrowse.lnk_Edit");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblDesign",false,"");
        //Design tab and Implement tab both are available
        caller.writeToReport("End of  Executing APIM2-702");	
    }
    /**
     *  Business component APIM2_656.
     */
    public final static void APIM2_656(final SeleniumTestBase caller, final String param_StoreURL, final String param_serverNameDomainOne, final String param_ApplicationName, final String param_AppDescription, final String param_yes, final String param_throttlingTier, final String param_callBackURL) throws Exception {
        //APIM2-656: Delete an application with subscriptions
        caller.writeToReport("Start  Executing APIM2-653");
        //go to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_StoreURL,"2000");
        //select the server name
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        //waiting for content load
        caller.pause("2000");
        //create Application Name
        String varApplicationName = param_ApplicationName+caller.generateData("int",3);
        //creating application in store
        lib_Common.bc_APIStore_CreateApplication(caller, varApplicationName,param_AppDescription,param_yes,param_throttlingTier,param_yes,param_callBackURL);
        //click on My apps
        caller.click("APIStoreHome.lnk_MyApplication");
        //waiting for content load
        caller.pause("2000");
        //click on APIs
        caller.click("APIStoreHome.lnk_APIs");
        //waiting for content load
        caller.pause("2000");
        //retrieving the API name
        String varAPINameTwo = caller.retrieveString("keyAPIName");
        //click on API
        caller.click("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + varAPINameTwo);
        //click on applications list
        caller.select("APIStoreMySubcription.ele_ddApplicationsList",varApplicationName);
        //click on Subscribe button
        caller.click("APIStoreAPIs.btn_Subscribe");
        //waiting for content load
        caller.pause("2000");
        //click on go to my subscriptions
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        //click on My apps
        caller.click("APIStoreHome.lnk_MyApplication");
        //waiting for content load
        caller.pause("2000");
        //click on delete button
        caller.click("APIStoreMyApllication.ele_lblVerifingAPPDataInGrid","param_AppName_PARAM:" + varApplicationName + "_PARAM," + "param_CallbackURL_PARAM:" + param_callBackURL + "_PARAM," + "param_Description_PARAM:" + param_AppDescription);
        //waiting for content load
        caller.pause("2000");
        //confirming delete
        caller.click("APIStoreMyApllication.btn_yes");
        //click on my subscriptions
        caller.click("APIStoreHome.lnk_MySubcription");
        //waiting for content load
        caller.pause("2000");
        //checking the application subscription list***
        caller.clickAt("APIStoreMySubcription.ele_ddAppsWithSubs","0,0");
        //waiting for content load
        caller.pause("2000");
        //checking application name is removed
        caller.checkObjectProperty("APIStoreMySubcription.ele_ddCheckInSubscriptions","param_ApplicationName_PARAM:" + varApplicationName,"ELEMENTPRESENT","false",false,"");
        //click on APIs
        caller.click("APIStoreHome.lnk_APIs");
        //waiting for content load
        caller.pause("2000");
        //click on API
        caller.click("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + varAPINameTwo);
        //checking application name in the drop down list***
        caller.checkObjectProperty("APIStoreMySubcription.ele_ddAppNameInAPIList","param_ApplicationName_PARAM:" + varApplicationName,"ELEMENTPRESENT","false",false,"");
        //waiting for content load
        caller.pause("2000");
        //do the invoke part
        caller.writeToReport("End of  Executing APIM2-656");	
    }
    /**
     *  Business component APIM2_496.
     */
    public final static void APIM2_496(final SeleniumTestBase caller, final String param_publisherURL, final String param_storeURL, final String param_publisherOneOfTenantOneOrAdmin, final String param_StoreOneOfTenantOneOrAdmin, final String param_APIName, final String param_APIContext, final String param_APIVersionOne, final String param_APIvisibility, final String param_APIImageName, final String param_TagName, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_productionEndpoint, final String param_sandboxEndpoint, final String param_keyWordYes, final String param_keyWordNo, final String param_applicationName, final String param_discription, final String param_APIVersionTwo, final String param_APIVersionThree, final String param_statusPublished, final String param_true, final String param_false, final String param_provider, final String param_numberOfUsersOne, final String param_statusCreated, final String param_numberOfUsersZero, final String param_StoreNameOneDomainOne, final String param_keyWordBlocked, final String param_keyTypeProduction, final String param_buttonNamePost, final String param_postPayloadContext, final String param_postCustomerNameFromPayloadContext, final String param_ResponseCodeTwoHundred, final String param_postResponseHeaders, final String param_buttonNameGet, final String param_getCustomerName, final String param_getResponseHeaders, final String param_buttonNamePut, final String param_putCustomerName, final String param_ResponseBodyNoContent, final String param_getCustomerNameForPutVerification, final String param_getResponseHeadersForPutVerification, final String param_buttonNameDelete, final String param_deleteResponseHeaders, final String param_ResponseCodeTwoHundredAndFour, final String param_ResponseHeadersNull, final String param_statusBlocked, final String param_keyWordBlockedLowerCase) throws Exception {
        //APIM2-496: Publish an API copy of a published API copy taken from a blocked API given "Deprecate Old Versions" and invoke using API console
        caller.writeToReport("Start of Execution of TC APIM2_496");
        //start of creation of parent API
        lib_Common.bc_PublisherLogin(caller, param_publisherURL,param_publisherOneOfTenantOneOrAdmin);
        lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke(caller, param_APIName,param_APIContext,param_APIVersionOne,param_APIvisibility,param_APIImageName,param_TagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        String varAPINameParent = caller.retrieveString("key_APINameDesign");
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_keyWordYes,param_sandboxEndpoint,param_keyWordNo,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_keyWordNo,param_keyWordNo,"");
        //End of creation of original API
        //create a default default and subscribe to original api
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_StoreNameOneDomainOne);
        lib_Common.bc_StoreLogin(caller, param_StoreOneOfTenantOneOrAdmin);
        String applicationName = param_applicationName+"_"+caller.generateData("int",3);
        caller.store("key_applicationNameParent","String",applicationName);
        //Autogen an application name
        lib_Common.bc_APIStore_CreateApplication(caller, applicationName,param_discription,param_keyWordNo,"",param_keyWordNo,"");
        lib_Common.bc_APIStore_APIs_SubscribeAPI(caller, varAPINameParent,param_APIVersionOne,applicationName,param_keyWordNo,"");
        //end of subscription
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        //----------------------------------------------
        lib_Common.bc_APIPublisherSearch(caller, varAPINameParent,varAPINameParent,param_APIVersionOne);
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + varAPINameParent + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne + "_PARAM," + "param_APIName_PARAM:" + varAPINameParent);
        //verify the availability of Lifestyle tab
        caller.checkElementPresent("APIPublisherBrowse.btn_Lifecycle",false,"");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //Wait for content load
        caller.pause("2000");
        caller.select("browseLifecycle.ele_ddSelectState",param_statusBlocked);
        //Wait for content load
        caller.pause("1000");
        caller.click("browseLifecycle.btn_Update");
        //verify the success message
        caller.checkElementPresent("browseLifecycle.ele_lblUpdateSuccessMessage",false,"");
        //Wait for content load
        caller.pause("1000");
        //********************************
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        lib_Common.bc_APIPublisherSearch(caller, varAPINameParent,varAPINameParent,param_APIVersionOne);
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + varAPINameParent + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne + "_PARAM," + "param_APIName_PARAM:" + varAPINameParent);
        //wait for content load
        caller.pause("2000");
        //************************************************************** Impliment the above part
        caller.click("APIPublisherBrowse.lnk_Overview");
        //wait for content load
        caller.pause("2000");
        //verify that the overview page contains the create button
        caller.checkElementPresent("Browse_Overview.btn_CreateNewVersion",false,"");
        caller.click("Browse_Overview.btn_CreateNewVersion");
        //Wait for content load
        caller.pause("2000");
        //verify that to version tab has expanded successfully and its contents are available
        caller.checkElementPresent("Browse_Overview.tf_ToVersion",false,"");
        caller.checkElementPresent("Browse_Overview.chk_DefaultVersion",false,"");
        caller.checkElementPresent("Browse_Overview.btn_Done",false,"");
        //Type new version - version two
        caller.type("Browse_Overview.tf_ToVersion",param_APIVersionTwo);
        //Wait for content load
        caller.pause("1000");
        //Wait for content load
        caller.pause("1000");
        caller.click("Browse_Overview.btn_Done");
        //Cannot verify the new version added message due to application bug
        //Wait for content load
        caller.pause("2000");
        lib_Common.bc_APIPublisherSearch(caller, varAPINameParent,varAPINameParent,param_APIVersionTwo);
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + varAPINameParent + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionTwo + "_PARAM," + "param_APIName_PARAM:" + varAPINameParent);
        //verify the availability of Lifestyle tab
        caller.checkElementPresent("APIPublisherBrowse.btn_Lifecycle",false,"");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //Wait for content load
        caller.pause("2000");
        caller.select("browseLifecycle.ele_ddSelectState",param_statusPublished);
        //Wait for content load
        caller.pause("1000");
        if(caller.checkElementPresent("browseLifecycle.chk_PropagateChangesToAPIGatewayTrueOrFalse","param_TrueOrFalse_PARAM:" + param_false)){
        caller.click("browseLifecycle.chk_PropagateChangesToAPIGatewayTrueOrFalse","param_TrueOrFalse_PARAM:" + param_false);
        //Wait for content load
        caller.pause("1000");
        }
        if(caller.checkElementPresent("browseLifecycle.chk_deprecateOldVersionsTrueOrFalse","param_TrueOrFalse_PARAM:" + param_false)){
        caller.click("browseLifecycle.chk_deprecateOldVersionsTrueOrFalse","param_TrueOrFalse_PARAM:" + param_false);
        //Wait for content load
        caller.pause("1000");
        }
        if(caller.checkElementPresent("browseLifecycle.chk_requireResubscriptionTrueOrFalse","param_TrueOrFalse_PARAM:" + param_true)){
        caller.click("browseLifecycle.chk_requireResubscriptionTrueOrFalse","param_TrueOrFalse_PARAM:" + param_true);
        //Wait for content load
        caller.pause("1000");
        }
        caller.click("browseLifecycle.btn_Update");
        //verify the success message
        caller.checkElementPresent("browseLifecycle.ele_lblUpdateSuccessMessage",false,"");
        //Wait for content load
        caller.pause("1000");
        //------------------------------------------------API with version 3 so that the version 2 (immidiate copy will be depricated)START
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        lib_Common.bc_APIPublisherSearch(caller, varAPINameParent,varAPINameParent,param_APIVersionOne);
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + varAPINameParent + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne + "_PARAM," + "param_APIName_PARAM:" + varAPINameParent);
        //wait for content load
        caller.pause("2000");
        //************************************************************** Impliment the above part
        caller.click("APIPublisherBrowse.lnk_Overview");
        //wait for content load
        caller.pause("2000");
        //verify that the overview page contains the create button
        caller.checkElementPresent("Browse_Overview.btn_CreateNewVersion",false,"");
        caller.click("Browse_Overview.btn_CreateNewVersion");
        //Wait for content load
        caller.pause("2000");
        //verify that to version tab has expanded successfully and its contents are available
        caller.checkElementPresent("Browse_Overview.tf_ToVersion",false,"");
        caller.checkElementPresent("Browse_Overview.chk_DefaultVersion",false,"");
        caller.checkElementPresent("Browse_Overview.btn_Done",false,"");
        //Type new version - version two
        caller.type("Browse_Overview.tf_ToVersion",param_APIVersionThree);
        //Wait for content load
        caller.pause("1000");
        //Wait for content load
        caller.pause("1000");
        caller.click("Browse_Overview.btn_Done");
        //Cannot verify the new version added message due to application bug
        //Wait for content load
        caller.pause("2000");
        lib_Common.bc_APIPublisherSearch(caller, varAPINameParent,varAPINameParent,param_APIVersionThree);
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + varAPINameParent + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionThree + "_PARAM," + "param_APIName_PARAM:" + varAPINameParent);
        //verify the availability of Lifestyle tab
        caller.checkElementPresent("APIPublisherBrowse.btn_Lifecycle",false,"");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //Wait for content load
        caller.pause("2000");
        caller.select("browseLifecycle.ele_ddSelectState",param_statusPublished);
        //Wait for content load
        caller.pause("1000");
        if(caller.checkElementPresent("browseLifecycle.chk_PropagateChangesToAPIGatewayTrueOrFalse","param_TrueOrFalse_PARAM:" + param_false)){
        caller.click("browseLifecycle.chk_PropagateChangesToAPIGatewayTrueOrFalse","param_TrueOrFalse_PARAM:" + param_false);
        //Wait for content load
        caller.pause("1000");
        }
        if(caller.checkElementPresent("browseLifecycle.chk_deprecateOldVersionsTrueOrFalse","param_TrueOrFalse_PARAM:" + param_false)){
        caller.click("browseLifecycle.chk_deprecateOldVersionsTrueOrFalse","param_TrueOrFalse_PARAM:" + param_false);
        //Wait for content load
        caller.pause("1000");
        }
        if(caller.checkElementPresent("browseLifecycle.chk_requireResubscriptionTrueOrFalse","param_TrueOrFalse_PARAM:" + param_true)){
        caller.click("browseLifecycle.chk_requireResubscriptionTrueOrFalse","param_TrueOrFalse_PARAM:" + param_true);
        //Wait for content load
        caller.pause("1000");
        }
        caller.click("browseLifecycle.btn_Update");
        //verify the success message
        caller.checkElementPresent("browseLifecycle.ele_lblUpdateSuccessMessage",false,"");
        //Wait for content load
        caller.pause("1000");
        //------------------------------------------------API with version 3 so that the version 2 (immidiate copy will be depricated) END
        //use api version three
        lib_Common.bc_APIPublisherSearch(caller, varAPINameParent,varAPINameParent,param_APIVersionThree);
        //verify that the API copy is subscribed to the same application of the original API
        //****************************************************************** verify the user count with test case document
        caller.checkElementPresent("APIPublisherBrowse.lnk_APINameOverall","param_APIName_PARAM:" + varAPINameParent + "_PARAM," + "param_version_PARAM:" + param_APIVersionThree + "_PARAM," + "param_provider_PARAM:" + param_provider + "_PARAM," + "param_numberOfUsers_PARAM:" + param_numberOfUsersOne + "_PARAM," + "param_status_PARAM:" + param_statusPublished,false,"");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_StoreNameOneDomainOne);
        //cannot verify the recently added part since it's unavailable
        lib_Common.bc_APIStoreSearch(caller, varAPINameParent,varAPINameParent,param_APIVersionThree);
        //vreify the latest copy of the API
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersionAndProvider","param_APIName_PARAM:" + varAPINameParent + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionThree + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //verify the non availability of the blocked API
        if(caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersionAndProvider","param_APIName_PARAM:" + varAPINameParent + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne + "_PARAM," + "param_provider_PARAM:" + param_provider)){
        caller.fail("Blocked API"+varAPINameParent+"of version"+param_APIVersionOne+"is available");
        }
        lib_Common.bc_APIStore_MySubscription(caller, applicationName,varAPINameParent,param_APIVersionThree);
        //verify the blocked state in my subscription page
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsBlocked","param_Blocked_PARAM:" + param_keyWordBlockedLowerCase,false,"");
        //verify the deprecated state in my subscription page
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsDeprecated","param_APIName_PARAM:" + varAPINameParent + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionTwo,false,"");
        //unable to do invoking for the blocked api due to application bug
        //invoking the depricated API
        lib_Common.bc_APIStore_InvokeAPI(caller, varAPINameParent,param_APIVersionTwo,applicationName,param_keyTypeProduction,param_keyWordYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_ResponseCodeTwoHundred,param_postResponseHeaders,param_keyWordYes,param_buttonNameGet,param_getCustomerName,param_ResponseCodeTwoHundred,param_getResponseHeaders,param_keyWordYes,param_buttonNamePut,param_putCustomerName,param_ResponseBodyNoContent,param_ResponseCodeTwoHundred,param_buttonNameGet,param_getCustomerNameForPutVerification,param_ResponseCodeTwoHundred,param_getResponseHeadersForPutVerification,param_keyWordNo,"","","","",param_keyWordYes,param_buttonNameDelete,param_ResponseBodyNoContent,param_ResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGet,param_ResponseBodyNoContent,param_ResponseCodeTwoHundredAndFour,param_ResponseHeadersNull);
        lib_Common.bc_APIStore_MySubscription(caller, applicationName,varAPINameParent,param_APIVersionThree);
        //invoking the latest copy of the api
        lib_Common.bc_APIStore_InvokeAPI(caller, varAPINameParent,param_APIVersionThree,applicationName,param_keyTypeProduction,param_keyWordYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_ResponseCodeTwoHundred,param_postResponseHeaders,param_keyWordYes,param_buttonNameGet,param_getCustomerName,param_ResponseCodeTwoHundred,param_getResponseHeaders,param_keyWordYes,param_buttonNamePut,param_putCustomerName,param_ResponseBodyNoContent,param_ResponseCodeTwoHundred,param_buttonNameGet,param_getCustomerNameForPutVerification,param_ResponseCodeTwoHundred,param_getResponseHeadersForPutVerification,param_keyWordNo,"","","","",param_keyWordYes,param_buttonNameDelete,param_ResponseBodyNoContent,param_ResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGet,param_ResponseBodyNoContent,param_ResponseCodeTwoHundredAndFour,param_ResponseHeadersNull);
        caller.writeToReport("End of Execution of TC APIM2_496");	
    }
    /**
     *  Business component APIM2_709.
     */
    public final static void APIM2_709(final SeleniumTestBase caller, final String param_publisherURL, final String param_SandboxEndpoint, final String param_ProductionEndPontJaxRS) throws Exception {
        //APIM2-709: Save an API at Imeplement stage
        caller.writeToReport("Start  Executing APIM2-709");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        //retrieving API name
        String varAPINameOne = caller.retrieveString("keyAPIName");
        //Search API name
        caller.type("APIPublisherHome.tf_APISearch",varAPINameOne);
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("3000");
        //retrieving API version
        String varAPIVersionOne = caller.retrieveString("keyAPIVersion");
        //click on API
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + varAPINameOne + "_PARAM," + "param_APIVersion_PARAM:" + varAPIVersionOne + "_PARAM," + "param_APIName_PARAM:" + varAPINameOne);
        //click on edit
        caller.click("APIPublisherBrowse.lnk_Edit");
        //waiting for content load
        caller.pause("3000");
        //click on next emplement
        caller.click("APIPublisherBrowse.btn_NextImplement");
        //waiting for content load
        caller.pause("3000");
        //click on managed API
        caller.click("APIPublisherBrowse.ele_lblManagedAPI");
        //type production endpoint
        caller.type("APIPublisherBrowse.tf_ProductionEndPoint",param_ProductionEndPontJaxRS);
        //type sandbox end point
        caller.type("APIPublisherBrowse.tf_sandboxEndpoint",param_SandboxEndpoint);
        //waiting for content load
        caller.pause("3000");
        //click on save
        caller.click("APIPublisherBrowse.btn_Save");
        //waiting for content load
        caller.pause("3000");
        //click on browse
        caller.click("APIPublisherHome.lnk_Browse");
        //Search API name
        caller.type("APIPublisherHome.tf_APISearch",varAPINameOne);
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("3000");
        //click on API
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + varAPINameOne + "_PARAM," + "param_APIVersion_PARAM:" + varAPIVersionOne + "_PARAM," + "param_APIName_PARAM:" + varAPINameOne);
        //click on edit button
        caller.click("APIPublisherBrowse.lnk_Edit");
        //checking the manage tab is not available
        caller.checkElementPresent("APIPublisherBrowse.ele_lblManage",false,"");
        caller.writeToReport("End of  Executing APIM2-709");	
    }
    /**
     *  Business component APIM2_717.
     */
    public final static void APIM2_717(final SeleniumTestBase caller, final String param_publisherURL, final String param_ResponseCaching) throws Exception {
        //APIM2-717: Save an API at Manage stage
        caller.writeToReport("Start  Executing APIM2-717");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        //retrieving API name
        String varAPINameTwo = caller.retrieveString("keyAPIName");
        //Search API name
        caller.type("APIPublisherHome.tf_APISearch",varAPINameTwo);
        //click on search button
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("3000");
        //retrieving API version
        String varAPIVersionTwo = caller.retrieveString("keyAPIVersion");
        //click on API
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + varAPINameTwo + "_PARAM," + "param_APIVersion_PARAM:" + varAPIVersionTwo + "_PARAM," + "param_APIName_PARAM:" + varAPINameTwo);
        //click on edit button
        caller.click("APIPublisherBrowse.lnk_Edit");
        //click on next implement
        caller.click("APIPublisherBrowse.btn_NextImplement");
        //waiting for content load
        caller.pause("3000");
        //click on next manage
        caller.click("APIPublisherBrowse.btn_NextManage");
        //waiting for content load
        caller.pause("2000");
        //select tiers
        lib_Common.bc_SelectTiers(caller);
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.ele_ddResponseCaching");
        //select response caching
        caller.select("APIPublisherBrowse.ele_ddResponseCaching",param_ResponseCaching);
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_SaveAndPublish");
        //waiting for content load
        caller.pause("4000");
        //API is successfully published
        caller.click("APIPublisherBrowse.btn_Close");
        //waiting for content load
        caller.pause("3000");
        //click on browse
        caller.click("APIPublisherHome.lnk_Browse");
        //Search API name
        caller.type("APIPublisherHome.tf_APISearch",varAPINameTwo);
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("3000");
        //checking the manage tab is available
        caller.checkObjectProperty("APIPublisherBrowse.ele_lblManage","ELEMENTPRESENT","false",false,"");
        caller.writeToReport("End  Executing APIM2-717");	
    }
    /**
     *  Business component APIM2_786.
     */
    public final static void APIM2_786(final SeleniumTestBase caller, final String param_storeURL, final String param_serverName, final String param_adminStoreTwo, final String param_adminUser, final String param_adminUserPassword, final String param_adminStoreOne, final String param_topicReply) throws Exception {
        //APIM2-786: Delete or edit admin topic reply as a signed-up user
        caller.writeToReport("Start  Executing APIM2-786");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Waiting for content load
        caller.pause("3000");
        //select server
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + param_serverName);
        //Waiting for content load
        caller.pause("2000");
        //log in admin user**
        //click on login button
        caller.click("APIStoreHome.lnk_login");
        //type username
        caller.type("APIStoreHome.tf_username",param_adminUser);
        //type password
        caller.type("APIStoreHome.tf_password",param_adminUserPassword);
        //Waiting for content load
        caller.pause("2000");
        //click on login
        caller.click("APIStoreHome.btn_login");
        //Waiting for content load
        caller.pause("2000");
        //click on forums
        caller.click("APIStoreSignUp.btn_Forum");
        //Waiting for content load
        caller.pause("2000");
        //retrieve the topic name
        String varTopicFour = caller.retrieveString("keyTopicThree");
        //click on a topic
        caller.click("APIStoreForums.lnk_CreatedTopic","param_TopicName_PARAM:" + varTopicFour);
        //Waiting for content load
        caller.pause("2000");
        //add a reply
        caller.type("APIStoreForums.tf_ReplyTopicField",param_topicReply);
        //click on reply thread
        caller.click("APIStoreForums.btn_ReplyToThread");
        caller.pause("2000");
        //log out from the current user
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //Waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //Waiting for content load
        caller.pause("2000");
        //log in the admin user
        lib_Common.bc_StoreLogin(caller, param_adminStoreOne);
        //Waiting for content load
        caller.pause("2000");
        //click on forums
        caller.click("APIStoreSignUp.btn_Forum");
        //Waiting for content load
        caller.pause("2000");
        //click on a topic
        caller.click("APIStoreForums.lnk_CreatedTopic","param_TopicName_PARAM:" + varTopicFour);
        //deleting the reply
        caller.click("APIStoreForums.btn_ReplyDelete");
        //Waiting for content load
        caller.pause("2000");
        //click on yes
        caller.click("APIStoreMyApllication.lnk_Yes");
        //checking the delete error message
        caller.checkElementPresent("APIStoreForums.ele_lblDeleteErrorIcon",false,"");
        //click on OK to error message
        caller.click("APIStoreForums.btn_OK");
        //add a reply
        caller.type("APIStoreForums.tf_ReplyTopicField",param_topicReply);
        //click on reply thread
        caller.click("APIStoreForums.btn_ReplyToThread");
        caller.pause("2000");
        //log out from the current user
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //Waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //Waiting for content load
        caller.pause("2000");
        //log in the admin user
        lib_Common.bc_StoreLogin(caller, param_adminStoreTwo);
        //Waiting for content load
        caller.pause("2000");
        //click on forums
        caller.click("APIStoreSignUp.btn_Forum");
        //Waiting for content load
        caller.pause("2000");
        //click on a topic
        caller.click("APIStoreForums.lnk_CreatedTopic","param_TopicName_PARAM:" + varTopicFour);
        //deleting the reply
        caller.click("APIStoreForums.btn_ReplyDelete");
        //Waiting for content load
        caller.pause("2000");
        //click on yes
        caller.click("APIStoreMyApllication.lnk_Yes");
        //checking the delete error message
        caller.checkElementPresent("APIStoreForums.ele_lblDeleteErrorIcon",false,"");
        //click on OK to error message
        caller.click("APIStoreForums.btn_OK");
        caller.writeToReport("End  Executing APIM2-786");	
    }
    /**
     *  Business component APIM2_730.
     */
    public final static void APIM2_730(final SeleniumTestBase caller, final String param_downImage, final String param_APIName, final String param_APIContext, final String param_APIVersion, final String param_APITag, final String param_Description, final String param_DownloadFilePathYAML) throws Exception {
        //APIM2-730: Download swagger definition in YAML formal
        caller.writeToReport("Start Executing APIM2-730");
        //create API
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Type API Name
        String varAPIName = param_APIName+caller.generateData("int",3);
        caller.type("APIPublisherAdd.tf_APIName",varAPIName);
        //Store API name as a variable
        caller.store("keyAPIName","String",varAPIName);
        //generating context value
        String varAPIContext = param_APIContext+caller.generateData("int",3);
        //Type API context
        caller.type("APIPublisherAdd.tf_APIContext",varAPIContext);
        //Storing Context value
        caller.store("keyAPIContext","String",varAPIContext);
        //Setting variable for API version
        String varAPIVersion = param_APIVersion+caller.generateData("int",1);
        //Type API Version
        caller.type("APIPublisherAdd.tf_APIVersion",varAPIVersion);
        //storing version value
        caller.store("keyAPIVersion","String",varAPIVersion);
        //Setting variable for API Tag
        String APITag = param_APITag+caller.generateData("int",3);
        //Type Description
        caller.type("APIPublisherAdd.tf_Discription",param_Description);
        //Type API tags
        caller.type("APIPublisherAdd.tf_Tags",APITag);
        caller.pause("2000");
        caller.fireEvent("KEY%key=\n","2000");
        //click on save
        caller.click("APIPublisherAdd.btn_Save");
        //waite for content load
        caller.pause("3000");
        //wait for content load
        caller.pause("5000");
        //click on yes
        caller.click("APIPublisherAdd.btn_Yes");
        //click on browse
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",varAPIName);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPIName);
        //click on edit
        caller.click("APIPublisherBrowse.lnk_Edit");
        //waiting for content load
        caller.pause("2000");
        //click on edit source
        caller.click("APIPublisherBrowse.btn_EditSource");
        //waiting for content load
        caller.pause("2000");
        caller.selectFrame("APIPublisherBrowse.frm_SwaggerEditIframe");
        //select downlaod YAML
        caller.click("APIPublisherBrowse.btn_SwaggerFile");
        caller.click("APIPublisherBrowse.btn_DownloadYAML");
        //waiting for content load
        caller.pause("2000");
        //Handling popup for fire fox browser
        String downImagePopup1 = param_downImage;
        if(caller.checkImagePresent(downImagePopup1,false)){
        caller.fireEvent("KEY%key=alt+s","2000");
        caller.fireEvent("KEY%key=alt+a","2000");
        caller.fireEvent("KEY%key=\n","1000");
        }
        //waiting for content load
        caller.pause("5000");
        //Check downloaded file
        caller.checkFileInfo(param_DownloadFilePathYAML,"EXIST",false,"");
        int temp = 0;java.io.File f = new java.io.File(param_DownloadFilePathYAML);f.delete();;
        caller.writeToReport("End Executing APIM2-730");	
    }
    /**
     *  Business component APIM2_10.
     */
    public final static void APIM2_10(final SeleniumTestBase caller, final String param_publisherURL, final String param_publisherOneOfTenantOneOrAdmin, final String param_apiName, final String param_apiContext, final String param_apiVersionOne, final String param_apiVisibilityPublic, final String param_apiImage, final String param_apiTagName, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_productionEndpoint, final String param_keyYes, final String param_sandboxEndpoint, final String param_keyWordNo, final String param_TenantOrAdmin, final String param_newVersion, final String param_numberOfUsers, final String param_statusCreated) throws Exception {
        //APIM2-10: Create a copy of an API successfully
        caller.writeToReport("Start of test case APIM2_10");
        //Navigate to Publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke(caller, param_apiName,param_apiContext,param_apiVersionOne,param_apiVisibilityPublic,param_apiImage,param_apiTagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_keyYes,param_sandboxEndpoint,param_keyWordNo,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_keyWordNo,param_keyWordNo,"");
        String APIName = caller.retrieveString("key_APINameDesign");
        String APIversion = caller.retrieveString("key_APIVersion");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.pause("3000");
        caller.click("APIPublisherHome.btn_Search");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        //Go inside the API
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        //wait for content load
        caller.click("APIPublisherBrowse.lnk_Overview");
        //creating new copy of published API
        caller.click("APIPublisherBrowse.btn_CreateNewVersion");
        caller.checkElementPresent("APIPublisherBrowse.tf_NewVersion",false,"");
        caller.checkElementPresent("Browse_Overview.chk_DefaultVersion",false,"");
        caller.checkElementPresent("APIPublisherBrowse.btn_done",false,"");
        caller.checkElementPresent("Browse_Overview.btn_CancelNewVersion",false,"");
        caller.type("APIPublisherBrowse.tf_NewVersion",param_newVersion);
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_done");
        //cannot see "New API version is created successfully" message.
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.pause("3000");
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        if(param_TenantOrAdmin.equals("TenantOne")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_newVersion + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName + "_PARAM," + "param_status_PARAM:" + param_statusCreated,false,"");
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_newVersion + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_status_PARAM:" + param_statusCreated,false,"");
        }
        caller.writeToReport("End of test case APIM2_10");	
    }
    /**
     *  Business component APIM2_661.
     */
    public final static void APIM2_661(final SeleniumTestBase caller, final String param_adminOrTenantOne, final String param_storeURL, final String param_applicationName, final String param_description, final String param_yes, final String param_no, final String param_userName, final String param_password, final String param_firstName, final String param_lastName, final String param_email, final String param_organizationName, final String param_address, final String param_country, final String param_landPhone, final String param_mobilePhone, final String param_IM, final String param_URL) throws Exception {
        caller.writeToReport("Start of APIM2_661");
        //APIM2_661: To ensure that applications can be shared among different subscribers within the same tenant
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_adminOrTenantOne);
        //Wait for Content load
        caller.pause("3000");
        String varSignUpUserNameOne = param_userName+caller.generateData("int",4);
        //storing API name
        caller.store("key_SignUpUserNameOne","String",varSignUpUserNameOne);
        String varSignUpUserNameTwo = param_userName+caller.generateData("int",4);
        //storing API name
        caller.store("key_SignUpUserNameTwo","String",varSignUpUserNameTwo);
        lib_Common.bc_StoreSignUpUserWithMoreDetails(caller, varSignUpUserNameOne,param_password,param_firstName,param_lastName,param_email,param_organizationName,param_address,param_country,param_landPhone,param_mobilePhone,param_IM,param_URL);
        //Wait for Content load
        caller.pause("3000");
        caller.click("APIStoreHome.btn_cancel");
        //Wait for Content load
        caller.pause("3000");
        lib_Common.bc_SelectServer(caller, param_adminOrTenantOne);
        //Wait for Content load
        caller.pause("3000");
        lib_Common.bc_StoreSignUpUserWithMoreDetails(caller, varSignUpUserNameTwo,param_password,param_firstName,param_lastName,param_email,param_organizationName,param_address,param_country,param_landPhone,param_mobilePhone,param_IM,param_URL);
        //Login with Signup User One
        //Waiting for content load
        caller.pause("3000");
        caller.type("APIStoreSignUp.tf_userNameLogIn",varSignUpUserNameOne);
        caller.type("APIStoreSignUp.tf_PasswordLogIn",param_password);
        caller.click("APIStoreSignUp.lnk_Login");
        //Waiting for content load
        caller.pause("2000");
        lib_Common.bc_SelectServer(caller, param_adminOrTenantOne);
        //Waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreHome.lnk_APIs",false,"");
        //Waiting for content load
        caller.pause("3000");
        //Create Application by SignUp User One
        String varApplicationNameOne = param_applicationName+caller.generateData("int",4);
        caller.store("key_ApplicationNameOne","String",varApplicationNameOne);
        lib_Common.bc_APIStore_CreateApplication(caller, varApplicationNameOne,param_description,param_no,"",param_no,"");
        //wait for content load
        caller.pause("7000");
        caller.click("APIStoreHome.lnk_MyApplication");
        //wait for content load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMyApllication.ele_lblAPPNameWithSharedLBL","param_APPName_PARAM:" + varApplicationNameOne,false,"");
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //waiting for content load
        caller.pause("3000");
        //Login with SignUp User Two
        caller.click("APIStoreHome.lnk_login");
        //waiting for content load
        caller.pause("2000");
        caller.type("APIStoreSignUp.tf_userNameLogIn",varSignUpUserNameTwo);
        caller.type("APIStoreSignUp.tf_PasswordLogIn",param_password);
        caller.click("APIStoreSignUp.lnk_Login");
        //Waiting for content load
        caller.pause("2000");
        //Waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreHome.lnk_APIs",false,"");
        //Waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_MyApplication");
        //waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMyApllication.ele_lblAPPNameGrid","param_ApplicationName_PARAM:" + varApplicationNameOne,false,"");
        //Wait for Content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_MySubcription");
        //Wait for Content load
        caller.pause("3000");
        //wait for page load
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",varApplicationNameOne);
        caller.pause("4000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        //wait for content load
        caller.pause("2000");
        }
        //wait for content load
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        //wait for content load
        caller.pause("1000");
        }
        String var_KeyProductionUserTwo = caller.getStringProperty("APIStoreMySubcription.ele_lblAccessTokenProduction","TEXT:");
        String var_KeySandBoxUserTwo = caller.getStringProperty("APIStoreMySubcription.ele_lblAccessTokenSandBox","TEXT:");
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //waiting for content load
        caller.pause("3000");
        //SignUp User One login to the store
        caller.click("APIStoreHome.lnk_login");
        //waiting for content load
        caller.pause("2000");
        caller.type("APIStoreSignUp.tf_userNameLogIn",varSignUpUserNameTwo);
        caller.type("APIStoreSignUp.tf_PasswordLogIn",param_password);
        caller.click("APIStoreSignUp.lnk_Login");
        //Waiting for content load
        caller.pause("2000");
        //Waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreHome.lnk_APIs",false,"");
        //Waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_MySubcription");
        //Wait for Content load
        caller.pause("3000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",varApplicationNameOne);
        //wait for page load
        caller.pause("4000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblProductionAccessTokenPARA","param_ProductionAccessToken_PARAM:" + var_KeyProductionUserTwo,false,"");
        //Wait for Content load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSandBoxAccessTokenPARA","para_SandBoxAccessTocken_PARAM:" + var_KeySandBoxUserTwo,false,"");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        //wait for content load
        caller.pause("2000");
        }
        //wait for content load
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        //wait for content load
        caller.pause("1000");
        }
        //wait for content load
        caller.pause("3000");
        String var_KeyProductionUserOne = caller.getStringProperty("APIStoreMySubcription.ele_lblAccessTokenProduction","TEXT:");
        String var_KeySandBoxUserOne = caller.getStringProperty("APIStoreMySubcription.ele_lblAccessTokenSandBox","TEXT:");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //waiting for content load
        caller.pause("3000");
        //Loging fron User Two
        caller.click("APIStoreHome.lnk_login");
        //waiting for content load
        caller.pause("2000");
        caller.type("APIStoreSignUp.tf_userNameLogIn",varSignUpUserNameTwo);
        caller.type("APIStoreSignUp.tf_PasswordLogIn",param_password);
        caller.click("APIStoreSignUp.lnk_Login");
        //Waiting for content load
        caller.pause("2000");
        //Waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreHome.lnk_APIs",false,"");
        //Waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_MySubcription");
        //Wait for Content load
        caller.pause("3000");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",varApplicationNameOne);
        //wait for page load
        caller.pause("4000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblProductionAccessTokenPARA","param_ProductionAccessToken_PARAM:" + var_KeyProductionUserOne,false,"");
        //Wait for Content load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSandBoxAccessTokenPARA","para_SandBoxAccessTocken_PARAM:" + var_KeySandBoxUserOne,false,"");
        //Wait for Content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //waiting for content load
        caller.pause("3000");
        caller.writeToReport("End of APIM2_661");	
    }
    /**
     *  Business component APIM2_501.
     */
    public final static void APIM2_501(final SeleniumTestBase caller, final String param_publisherURL, final String param_publisherOneOfTenantOneOrAdmin, final String param_apiName, final String param_apiContext, final String param_apiVersionOne, final String param_apiVisibilityPublic, final String param_apiImage, final String param_apiTagName, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_productionEndpoint, final String param_keyYes, final String param_sandboxEndpoint, final String param_keyWordNo, final String param_APIStatePrototyped, final String param_statusPrototyped, final String param_newVersion, final String param_statusCreated, final String param_TenantOrAdmin, final String param_numberOfUsers) throws Exception {
        //APIM2-501: Creating a copy from a prototyped API
        caller.writeToReport("Start of test case APIM2_501");
        lib_Common.bc_PublisherLogin(caller, param_publisherURL,param_publisherOneOfTenantOneOrAdmin);
        lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke(caller, param_apiName,param_apiContext,param_apiVersionOne,param_apiVisibilityPublic,param_apiImage,param_apiTagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_keyYes,param_sandboxEndpoint,param_keyWordNo,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_keyWordNo,param_keyWordNo,"");
        String APIName = caller.retrieveString("key_APINameDesign");
        String APIversion = caller.retrieveString("key_APIVersion");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.pause("3000");
        caller.click("APIPublisherHome.btn_Search");
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        //Go inside the API
        caller.pause("3000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //wait for content load
        caller.pause("5000");
        //Select the Published Status
        caller.select("APIPublisherBrowse.ele_ddState",param_APIStatePrototyped);
        caller.pause("2000");
        //Click on update button
        caller.click("APIPublisherBrowse.btn_UpdateState");
        //check the successfull message
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStateChangeMessage",false,"");
        //Goto API brouws
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.pause("3000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        if(param_TenantOrAdmin.equals("Tenant")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIversion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName + "_PARAM," + "param_status_PARAM:" + param_APIStatePrototyped,false,"");
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIversion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName);
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIversion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_status_PARAM:" + param_APIStatePrototyped,false,"");
        caller.click("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIversion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName);
        }
        caller.click("APIPublisherBrowse.lnk_Overview");
        //creating new copy of published API
        caller.click("APIPublisherBrowse.btn_CreateNewVersion");
        caller.checkElementPresent("APIPublisherBrowse.tf_NewVersion",false,"");
        caller.checkElementPresent("Browse_Overview.chk_DefaultVersion",false,"");
        caller.checkElementPresent("APIPublisherBrowse.btn_done",false,"");
        caller.checkElementPresent("Browse_Overview.btn_CancelNewVersion",false,"");
        caller.type("APIPublisherBrowse.tf_NewVersion",param_newVersion);
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_done");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.pause("3000");
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        if(param_TenantOrAdmin.equals("Tenant")){
        String varPublisherUserName = caller.retrieveString("keyTenantOnePublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_newVersion + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherUserName + "_PARAM," + "param_status_PARAM:" + param_statusCreated,false,"");
        } else if(param_TenantOrAdmin.equals("Admin")){
        String varPublisherAdminUserName = caller.retrieveString("keyAdminPublisherUserOne");
        //Verify the API Name/Version/Creator/Number of uers/API status
        caller.checkElementPresent("APIPublisherBrowse.ele_lblVersionAndUser","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblUsers","param_version_PARAM:" + param_newVersion + "_PARAM," + "param_users_PARAM:" + param_numberOfUsers,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStatus","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + param_newVersion + "_PARAM," + "param_creater_PARAM:" + varPublisherAdminUserName + "_PARAM," + "param_status_PARAM:" + param_statusCreated,false,"");
        }
        caller.writeToReport("End of test case APIM2_501");	
    }
    /**
     *  Business component APIM2_731.
     */
    public final static void APIM2_731(final SeleniumTestBase caller, final String param_downImage, final String param_DownloadFilePath, final String param_publisherURL, final String param_DownloadFilePathJSON) throws Exception {
        //APIM2-731: Download swagger definition in JSON formal
        caller.writeToReport("Start Executing APIM2-731");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        //retrieving API name
        String varAPINameOneRetrieve = caller.retrieveString("keyAPIName");
        //click on browse
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",varAPINameOneRetrieve);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameOneRetrieve);
        //click on edit
        caller.click("APIPublisherBrowse.lnk_Edit");
        //waiting for content load
        caller.pause("2000");
        //click on edit source
        caller.click("APIPublisherBrowse.btn_EditSource");
        //waiting for content load
        caller.pause("2000");
        caller.selectFrame("APIPublisherBrowse.frm_SwaggerEditIframe");
        //select downlaod JSON
        caller.click("APIPublisherBrowse.btn_SwaggerFile");
        caller.click("APIPublisherBrowse.btn_DownloadJSON");
        //waiting for content load
        caller.pause("2000");
        //Handling popup for fire fox browser
        String downImagePopup1 = param_downImage;
        if(caller.checkImagePresent(downImagePopup1,false)){
        caller.fireEvent("KEY%key=alt+s","2000");
        caller.fireEvent("KEY%key=alt+a","2000");
        caller.fireEvent("KEY%key=\n","1000");
        }
        //waiting for content load
        caller.pause("5000");
        //Check downloaded file
        caller.checkFileInfo(param_DownloadFilePathJSON,"EXIST",false,"");
        int temp = 0;java.io.File f = new java.io.File(param_DownloadFilePathJSON);f.delete();;
        caller.writeToReport("End Executing APIM2-731");	
    }
    /**
     *  Business component APIM2_663.
     */
    public final static void APIM2_663(final SeleniumTestBase caller, final String param_OrganizationTwo, final String param_usernameAdmin, final String param_passwordAdmin, final String param_carbonURL, final String param_password, final String param_adminOrTenantOne, final String param_storeURL) throws Exception {
        caller.writeToReport("Start of APIM2_663");
        //APIM2-663 : To make sure application sharing is stopped when the organization of a subscriber is changed
        //Login to carbon.super and change the organization of the SignUp User
        //Log into Carbon
        lib_Common.bc_APIcarbonLogin(caller, param_usernameAdmin,param_passwordAdmin,param_carbonURL);
        //Wait for content load
        caller.pause("3000");
        caller.click("APICarbonHome.btn_Configure");
        //Wait for content load
        caller.pause("2000");
        caller.click("APICarbonHome.lnk_UserandRoles");
        //Wait for content load
        caller.pause("2000");
        caller.click("APICarbonHome.lnk_User");
        //Wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APICarbonHome.tf_SearchUser",false,"");
        String varSignUpUserNameOne = caller.retrieveString("key_SignUpUserNameOne");
        String varSignUpUserName = "*"+varSignUpUserNameOne;
        caller.type("APICarbonHome.tf_SearchUser",varSignUpUserName);
        //Wait for content load
        caller.pause("1000");
        caller.click("APICarbonHome.btn_SearchUser");
        //Wait for content load
        caller.pause("3000");
        caller.checkElementPresent("APICarbonHome.lnk_UserNameSearch","param_UserName_PARAM:" + varSignUpUserNameOne,false,"");
        caller.click("APICarbonHome.btn_UserProfile");
        //Wait for content load
        caller.pause("2000");
        caller.type("APICarbonHome.tf_Organization",param_OrganizationTwo);
        //Wait for content load
        caller.pause("1000");
        caller.click("APICarbonHome.btn_UpdateProfile");
        //Wait for content load
        caller.pause("3000");
        caller.checkElementPresent("APICarbonHome.btn_OkPopUp",false,"");
        caller.click("APICarbonHome.btn_OkPopUp");
        //Wait for content load
        caller.pause("2000");
        //Login with Signup User One
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_adminOrTenantOne);
        //Waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_login");
        //Waiting for content load
        caller.pause("2000");
        caller.type("APIStoreSignUp.tf_userNameLogIn",varSignUpUserNameOne);
        caller.type("APIStoreSignUp.tf_PasswordLogIn",param_password);
        caller.click("APIStoreSignUp.lnk_Login");
        //Waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreHome.lnk_APIs",false,"");
        //Waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_MyApplication");
        //Waiting for content load
        caller.pause("2000");
        String varApplicationNameOne = caller.retrieveString("key_ApplicationNameOne");
        caller.checkObjectProperty("APIStoreMyApllication.ele_lblAPPNameWithSharedLBL","param_APPName_PARAM:" + varApplicationNameOne,"ELEMENTPRESENT","false",false,"");
        caller.click("APIStoreHome.lnk_MySubcription");
        //Waiting for content load
        caller.pause("2000");
        caller.checkObjectProperty("APIStoreMySubcription.ele_ddApplicationWithSubscription","MISSINGOPTION",varApplicationNameOne,false,"");
        //Waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //waiting for content load
        caller.pause("3000");
        //Check with SignUp User Two
        caller.click("APIStoreHome.lnk_login");
        //waiting for content load
        caller.pause("2000");
        String varSignUpUserNameTwo = caller.retrieveString("key_SignUpUserNameTwo");
        caller.type("APIStoreSignUp.tf_userNameLogIn",varSignUpUserNameTwo);
        caller.type("APIStoreSignUp.tf_PasswordLogIn",param_password);
        caller.click("APIStoreSignUp.lnk_Login");
        //Waiting for content load
        caller.pause("2000");
        //Waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreHome.lnk_APIs",false,"");
        //Waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_MyApplication");
        //Waiting for content load
        caller.pause("2000");
        caller.checkObjectProperty("APIStoreMyApllication.ele_lblAPPNameWithSharedLBL","param_APPName_PARAM:" + varApplicationNameOne,"ELEMENTPRESENT","true",false,"");
        caller.click("APIStoreHome.lnk_MySubcription");
        //Wait for Content load
        caller.pause("3000");
        //wait for page load
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",varApplicationNameOne);
        caller.pause("4000");
        //Waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //waiting for content load
        caller.pause("3000");
        caller.writeToReport("End of APIM2_663");	
    }
    /**
     *  Business component APIM2_754.
     */
    public final static void APIM2_754(final SeleniumTestBase caller, final String param_password, final String param_applicationName, final String param_description, final String param_no, final String param_storeURL, final String param_adminOrTenantOne, final String param_AdminStoreUserOne) throws Exception {
        caller.writeToReport("Start of APIM2_754");
        //Login with Signup User One for Create Application
        caller.click("APIStoreHome.lnk_login");
        //waiting for content load
        caller.pause("2000");
        String varSignUpUserNameOne = caller.retrieveString("key_SignUpUserNameOne");
        caller.type("APIStoreSignUp.tf_userNameLogIn",varSignUpUserNameOne);
        caller.type("APIStoreSignUp.tf_PasswordLogIn",param_password);
        caller.click("APIStoreSignUp.lnk_Login");
        //Waiting for content load
        caller.pause("2000");
        //Waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreHome.lnk_APIs",false,"");
        //Waiting for content load
        caller.pause("3000");
        //Create Application by SignUp User One
        String varApplicationNameOne = param_applicationName+caller.generateData("int",4);
        caller.store("key_ApplicationName","String",varApplicationNameOne);
        lib_Common.bc_APIStore_CreateApplication(caller, varApplicationNameOne,param_description,param_no,"",param_no,"");
        //wait for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_MyApplication");
        //wait for content load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMyApllication.ele_lblAPPNameWithSharedLBL","param_APPName_PARAM:" + varApplicationNameOne,false,"");
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //waiting for content load
        caller.pause("3000");
        //Login with Signup User Two for Create Application
        caller.click("APIStoreHome.lnk_login");
        //waiting for content load
        caller.pause("2000");
        String varSignUpUserNameTwo = caller.retrieveString("key_SignUpUserNameTwo");
        caller.type("APIStoreSignUp.tf_userNameLogIn",varSignUpUserNameTwo);
        caller.type("APIStoreSignUp.tf_PasswordLogIn",param_password);
        caller.click("APIStoreSignUp.lnk_Login");
        //Waiting for content load
        caller.pause("2000");
        //Waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreHome.lnk_APIs",false,"");
        //Waiting for content load
        caller.pause("3000");
        //Create Application by SignUp User Two
        String varApplicationNameTwo = param_applicationName+caller.generateData("int",4);
        caller.store("key_ApplicationName","String",varApplicationNameTwo);
        lib_Common.bc_APIStore_CreateApplication(caller, varApplicationNameTwo,param_description,param_no,"",param_no,"");
        //wait for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_MyApplication");
        //wait for content load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMyApllication.ele_lblAPPNameWithSharedLBL","param_APPName_PARAM:" + varApplicationNameTwo,false,"");
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //waiting for content load
        caller.pause("3000");
        //Login with ADMIN for Create Application
        lib_Common.bc_StoreLogin(caller, param_AdminStoreUserOne);
        //Waiting for content load
        caller.pause("2000");
        //Waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreHome.lnk_APIs",false,"");
        //Waiting for content load
        caller.pause("3000");
        //Create Application by Admin
        String varApplicationNameAdmin = param_applicationName+caller.generateData("int",4);
        caller.store("key_ApplicationNameAdmin","String",varApplicationNameAdmin);
        lib_Common.bc_APIStore_CreateApplication(caller, varApplicationNameAdmin,param_description,param_no,"",param_no,"");
        //wait for content load
        caller.pause("4000");
        caller.click("APIStoreHome.lnk_MyApplication");
        //wait for content load
        caller.pause("4000");
        caller.checkElementPresent("APIStoreMyApllication.ele_lblAPPNameGrid","param_ApplicationName_PARAM:" + varApplicationNameAdmin,false,"");
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //waiting for content load
        caller.pause("3000");
        //login to subscriber One
        caller.click("APIStoreHome.lnk_login");
        //waiting for content load
        caller.pause("2000");
        caller.type("APIStoreSignUp.tf_userNameLogIn",varSignUpUserNameOne);
        caller.type("APIStoreSignUp.tf_PasswordLogIn",param_password);
        caller.click("APIStoreSignUp.lnk_Login");
        //Waiting for content load
        caller.pause("2000");
        //Waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreHome.lnk_APIs",false,"");
        //Waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_MyApplication");
        //Waiting for content load
        caller.pause("2000");
        caller.checkObjectProperty("APIStoreMyApllication.ele_lblAPPNameWithSharedLBL","param_APPName_PARAM:" + varApplicationNameOne,"ELEMENTPRESENT","true",false,"");
        caller.checkObjectProperty("APIStoreMyApllication.ele_lblAPPNameWithSharedLBL","param_APPName_PARAM:" + varApplicationNameTwo,"ELEMENTPRESENT","false",false,"");
        caller.checkObjectProperty("APIStoreMyApllication.ele_lblAPPNameGrid","param_ApplicationName_PARAM:" + varApplicationNameAdmin,"ELEMENTPRESENT","false",false,"");
        //Waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //waiting for content load
        caller.pause("3000");
        ////login to subscriber Two
        caller.click("APIStoreHome.lnk_login");
        //waiting for content load
        caller.pause("2000");
        caller.type("APIStoreSignUp.tf_userNameLogIn",varSignUpUserNameTwo);
        caller.type("APIStoreSignUp.tf_PasswordLogIn",param_password);
        caller.click("APIStoreSignUp.lnk_Login");
        //Waiting for content load
        caller.pause("2000");
        //Waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreHome.lnk_APIs",false,"");
        //Waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_MyApplication");
        //Waiting for content load
        caller.pause("2000");
        caller.checkObjectProperty("APIStoreMyApllication.ele_lblAPPNameWithSharedLBL","param_APPName_PARAM:" + varApplicationNameOne,"ELEMENTPRESENT","false",false,"");
        caller.checkObjectProperty("APIStoreMyApllication.ele_lblAPPNameWithSharedLBL","param_APPName_PARAM:" + varApplicationNameTwo,"ELEMENTPRESENT","true",false,"");
        caller.checkObjectProperty("APIStoreMyApllication.ele_lblAPPNameGrid","param_ApplicationName_PARAM:" + varApplicationNameAdmin,"ELEMENTPRESENT","false",false,"");
        //Waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //waiting for content load
        caller.pause("3000");
        ////login with Admin user
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_adminOrTenantOne);
        //Wait for Content load
        caller.pause("2000");
        lib_Common.bc_StoreLogin(caller, param_AdminStoreUserOne);
        //Wait for Content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.lnk_APIs",false,"");
        //Waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_MyApplication");
        //Waiting for content load
        caller.pause("2000");
        caller.checkObjectProperty("APIStoreMyApllication.ele_lblAPPNameWithSharedLBL","param_APPName_PARAM:" + varApplicationNameOne,"ELEMENTPRESENT","false",false,"");
        caller.checkObjectProperty("APIStoreMyApllication.ele_lblAPPNameWithSharedLBL","param_APPName_PARAM:" + varApplicationNameTwo,"ELEMENTPRESENT","false",false,"");
        caller.checkObjectProperty("APIStoreMyApllication.ele_lblAPPNameGrid","param_ApplicationName_PARAM:" + varApplicationNameAdmin,"ELEMENTPRESENT","true",false,"");
        //Waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        caller.writeToReport("End of APIM2_754");	
    }
    /**
     *  Business component APIM2_757.
     */
    public final static void APIM2_757(final SeleniumTestBase caller, final String param_APIName, final String param_APIVersion, final String param_tagName) throws Exception {
        caller.writeToReport("Start of APIM2_757");
        //Create 9 APIs with the aid of a loop
        int varCountOne = 0;
        int varCountTwo = 0;
        for(;varCountOne<9;varCountOne++){
        //CreateAPI upto design Stage
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Type API Name
        String varAPIName = "AA"+caller.generateData("String",3)+param_APIName+caller.generateData("int",3);
        caller.type("APIPublisherAdd.tf_APIName",varAPIName);
        //Type API contest
        String APIcontest = "api"+caller.generateData("int",5);
        caller.type("APIPublisherAdd.tf_APIContext",APIcontest);
        caller.type("APIPublisherAdd.tf_APIVersion",param_APIVersion);
        caller.type("APIPublisherAdd.tf_Tags",param_tagName);
        caller.fireEvent("KEY%key=\n","2000");
        //waiting for content load
        caller.pause("6000");
        //click save and verify warning
        caller.doubleClick("APIPublisherAdd.btn_Save");
        //waiting for content load
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherAdd.ele_lblDefaultResourceMessage",false,"");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherAdd.btn_Yes");
        //waiting for content load
        caller.pause("4000");
        }
        for(;varCountTwo<11;varCountTwo++){
        //CreateAPI upto design Stage
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Type API Name
        String varAPIName = "ZZ"+caller.generateData("String",3)+param_APIName+caller.generateData("int",3);
        caller.type("APIPublisherAdd.tf_APIName",varAPIName);
        //Type API contest
        String APIcontest = "api"+caller.generateData("int",5);
        caller.type("APIPublisherAdd.tf_APIContext",APIcontest);
        caller.type("APIPublisherAdd.tf_APIVersion",param_APIVersion);
        caller.type("APIPublisherAdd.tf_Tags",param_tagName);
        caller.fireEvent("KEY%key=\n","2000");
        //waiting for content load
        caller.pause("6000");
        //click save and verify warning
        caller.doubleClick("APIPublisherAdd.btn_Save");
        //waiting for content load
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherAdd.ele_lblDefaultResourceMessage",false,"");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherAdd.btn_Yes");
        //waiting for content load
        caller.pause("4000");
        }
        //Create Another API Without using loop
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Type API Name
        String varAPINameOne = "PP"+caller.generateData("String",3)+param_APIName+caller.generateData("int",3);
        caller.store("key_APINameOne","String",varAPINameOne);
        caller.type("APIPublisherAdd.tf_APIName",varAPINameOne);
        //Type API contest
        String APIcontestOne = "api"+caller.generateData("int",5);
        caller.type("APIPublisherAdd.tf_APIContext",APIcontestOne);
        caller.type("APIPublisherAdd.tf_APIVersion",param_APIVersion);
        caller.type("APIPublisherAdd.tf_Tags",param_tagName);
        caller.fireEvent("KEY%key=\n","2000");
        //waiting for content load
        caller.pause("6000");
        //click save and verify warning
        caller.doubleClick("APIPublisherAdd.btn_Save");
        //waiting for content load
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherAdd.ele_lblDefaultResourceMessage",false,"");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherAdd.btn_Yes");
        //waiting for content load
        caller.pause("4000");
        //Create Another API Without using loop
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Type API Name
        String varAPINameTwo = "QQ"+caller.generateData("String",3)+param_APIName+caller.generateData("int",3);
        caller.store("key_APINameTwo","String",varAPINameTwo);
        caller.type("APIPublisherAdd.tf_APIName",varAPINameTwo);
        //Type API contest
        String APIcontestTwo = "api"+caller.generateData("int",5);
        caller.type("APIPublisherAdd.tf_APIContext",APIcontestTwo);
        caller.type("APIPublisherAdd.tf_APIVersion",param_APIVersion);
        caller.type("APIPublisherAdd.tf_Tags",param_tagName);
        caller.fireEvent("KEY%key=\n","2000");
        //waiting for content load
        caller.pause("6000");
        //click save and verify warning
        caller.doubleClick("APIPublisherAdd.btn_Save");
        //waiting for content load
        caller.pause("5000");
        caller.checkElementPresent("APIPublisherAdd.ele_lblDefaultResourceMessage",false,"");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIPublisherAdd.btn_Yes");
        //waiting for content load
        caller.pause("4000");
        //Go to publisher browse page for check the order of APIs
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("3000");
        caller.checkSorting("APIPublisherHome.ele_lblAPISquare","string","alphabetically","ascending",false,"");
        caller.writeToReport("End of APIM2_757");	
    }
    /**
     *  Business component APIM2_502.
     */
    public final static void APIM2_502(final SeleniumTestBase caller, final String param_publisherURL, final String param_publisherOneOfTenantOneOrAdmin, final String param_APIName, final String param_APIVersionOne, final String param_StateDepricated, final String param_APIVersionFive, final String param_StatePublished, final String param_true, final String param_false, final String param_provider, final String param_numberOfUsersOne, final String param_statusPublished, final String param_storeURL, final String param_StoreNameOneDomainOne, final String param_StoreOneOfTenantOneOrAdmin, final String param_applicationName, final String param_keyTypeSandbox, final String param_keyWordYes, final String param_keyWordNo, final String param_buttonNamePost, final String param_postPayloadContext, final String param_postCustomerNameFromPayloadContext, final String param_ResponseCodeTwoHundred, final String param_postResponseHeaders, final String param_buttonNameGet, final String param_getCustomerName, final String param_getResponseHeaders, final String param_buttonNamePut, final String param_putCustomerName, final String param_ResponseBodyNoContent, final String param_getCustomerNameForPutVerification, final String param_getResponseHeadersForPutVerification, final String param_buttonNameDelete, final String param_deleteResponseHeaders, final String param_ResponseCodeTwoHundredAndFour, final String param_ResponseHeadersNull, final String param_keyTypeProduction) throws Exception {
        //Test Case APIM2-502: Invoke an API copy made from a deprecated API using API console
        caller.writeToReport("Start of execution of APIM2_502");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        lib_Common.bc_APIPublisherSearch(caller, param_APIName,param_APIName,param_APIVersionOne);
        //since this api is already blocked we could utilize it by depricating it innitially
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne + "_PARAM," + "param_APIName_PARAM:" + param_APIName);
        //wait for content load
        caller.pause("2000");
        //verify the availability of Lifestyle tab
        caller.checkElementPresent("APIPublisherBrowse.btn_Lifecycle",false,"");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //Wait for content load
        caller.pause("2000");
        caller.select("browseLifecycle.ele_ddSelectState",param_StateDepricated);
        //Wait for content load
        caller.pause("1000");
        caller.click("browseLifecycle.btn_Update");
        //verify the success message
        caller.checkElementPresent("browseLifecycle.ele_lblUpdateSuccessMessage",false,"");
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_Overview");
        //wait for content load
        caller.pause("2000");
        //verify that the overview page contains the create button
        caller.checkElementPresent("Browse_Overview.btn_CreateNewVersion",false,"");
        caller.click("Browse_Overview.btn_CreateNewVersion");
        //Wait for content load
        caller.pause("2000");
        //verify that to version tab has expanded successfully and its contents are available
        caller.checkElementPresent("Browse_Overview.tf_ToVersion",false,"");
        caller.checkElementPresent("Browse_Overview.chk_DefaultVersion",false,"");
        caller.checkElementPresent("Browse_Overview.btn_Done",false,"");
        //Type new version - version five
        caller.type("Browse_Overview.tf_ToVersion",param_APIVersionFive);
        //Wait for content load
        caller.pause("1000");
        //Wait for content load
        caller.pause("1000");
        caller.click("Browse_Overview.btn_Done");
        //Cannot verify the new version added message due to application bug
        //Wait for content load
        caller.pause("2000");
        lib_Common.bc_APIPublisherSearch(caller, param_APIName,param_APIName,param_APIVersionFive);
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionFive + "_PARAM," + "param_APIName_PARAM:" + param_APIName);
        //verify the availability of Lifestyle tab
        caller.checkElementPresent("APIPublisherBrowse.btn_Lifecycle",false,"");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //Wait for content load
        caller.pause("2000");
        caller.select("browseLifecycle.ele_ddSelectState",param_StatePublished);
        //Wait for content load
        caller.pause("1000");
        if(caller.checkElementPresent("browseLifecycle.chk_PropagateChangesToAPIGatewayTrueOrFalse","param_TrueOrFalse_PARAM:" + param_false)){
        caller.click("browseLifecycle.chk_PropagateChangesToAPIGatewayTrueOrFalse","param_TrueOrFalse_PARAM:" + param_false);
        //Wait for content load
        caller.pause("1000");
        }
        if(caller.checkElementPresent("browseLifecycle.chk_deprecateOldVersionsTrueOrFalse","param_TrueOrFalse_PARAM:" + param_false)){
        caller.click("browseLifecycle.chk_deprecateOldVersionsTrueOrFalse","param_TrueOrFalse_PARAM:" + param_false);
        //Wait for content load
        caller.pause("1000");
        }
        if(caller.checkElementPresent("browseLifecycle.chk_requireResubscriptionTrueOrFalse","param_TrueOrFalse_PARAM:" + param_true)){
        caller.click("browseLifecycle.chk_requireResubscriptionTrueOrFalse","param_TrueOrFalse_PARAM:" + param_true);
        //Wait for content load
        caller.pause("1000");
        }
        caller.click("browseLifecycle.btn_Update");
        //verify the success message
        caller.checkElementPresent("browseLifecycle.ele_lblUpdateSuccessMessage",false,"");
        //Wait for content load
        caller.pause("1000");
        lib_Common.bc_APIPublisherSearch(caller, param_APIName,param_APIName,param_APIVersionFive);
        //verify the API latest copy taken from the parent API
        caller.checkElementPresent("APIPublisherBrowse.lnk_APINameOverall","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_version_PARAM:" + param_APIVersionFive + "_PARAM," + "param_provider_PARAM:" + param_provider + "_PARAM," + "param_numberOfUsers_PARAM:" + param_numberOfUsersOne + "_PARAM," + "param_status_PARAM:" + param_statusPublished,false,"");
        //Wait for content load
        caller.pause("1000");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_StoreNameOneDomainOne);
        //verify the latest api available recently added
        lib_Common.bc_APIStoreSearch(caller, param_APIName,param_APIName,param_APIVersionFive);
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersionAndProvider","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionFive + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //wait for content load
        caller.pause("2000");
        //verify the latest api available
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersionFive,false,"");
        lib_Common.bc_APIStore_MySubscription(caller, param_applicationName,param_APIName,param_APIVersionFive);
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsDeprecated","param_APIName_PARAM:" + param_APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne,false,"");
        //Invoke production endpoint of latest api copy
        lib_Common.bc_APIStore_InvokeAPI(caller, param_APIName,param_APIVersionFive,param_applicationName,param_keyTypeProduction,param_keyWordYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_ResponseCodeTwoHundred,param_postResponseHeaders,param_keyWordYes,param_buttonNameGet,param_getCustomerName,param_ResponseCodeTwoHundred,param_getResponseHeaders,param_keyWordYes,param_buttonNamePut,param_putCustomerName,param_ResponseBodyNoContent,param_ResponseCodeTwoHundred,param_buttonNameGet,param_getCustomerNameForPutVerification,param_ResponseCodeTwoHundred,param_getResponseHeadersForPutVerification,param_keyWordNo,"","","","",param_keyWordYes,param_buttonNameDelete,param_ResponseBodyNoContent,param_ResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGet,param_ResponseBodyNoContent,param_ResponseCodeTwoHundredAndFour,param_ResponseHeadersNull);
        lib_Common.bc_APIStore_MySubscription(caller, param_applicationName,param_APIName,param_APIVersionFive);
        //Invoke sandbox endpoint of latest api copy
        lib_Common.bc_APIStore_InvokeAPI(caller, param_APIName,param_APIVersionFive,param_applicationName,param_keyTypeSandbox,param_keyWordYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_ResponseCodeTwoHundred,param_postResponseHeaders,param_keyWordYes,param_buttonNameGet,param_getCustomerName,param_ResponseCodeTwoHundred,param_getResponseHeaders,param_keyWordYes,param_buttonNamePut,param_putCustomerName,param_ResponseBodyNoContent,param_ResponseCodeTwoHundred,param_buttonNameGet,param_getCustomerNameForPutVerification,param_ResponseCodeTwoHundred,param_getResponseHeadersForPutVerification,param_keyWordNo,"","","","",param_keyWordYes,param_buttonNameDelete,param_ResponseBodyNoContent,param_ResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGet,param_ResponseBodyNoContent,param_ResponseCodeTwoHundredAndFour,param_ResponseHeadersNull);
        lib_Common.bc_APIStore_MySubscription(caller, param_applicationName,param_APIName,param_APIVersionOne);
        //Invoke production endpoint of parent api
        lib_Common.bc_APIStore_InvokeAPI(caller, param_APIName,param_APIVersionOne,param_applicationName,param_keyTypeProduction,param_keyWordYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_ResponseCodeTwoHundred,param_postResponseHeaders,param_keyWordYes,param_buttonNameGet,param_getCustomerName,param_ResponseCodeTwoHundred,param_getResponseHeaders,param_keyWordYes,param_buttonNamePut,param_putCustomerName,param_ResponseBodyNoContent,param_ResponseCodeTwoHundred,param_buttonNameGet,param_getCustomerNameForPutVerification,param_ResponseCodeTwoHundred,param_getResponseHeadersForPutVerification,param_keyWordNo,"","","","",param_keyWordYes,param_buttonNameDelete,param_ResponseBodyNoContent,param_ResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGet,param_ResponseBodyNoContent,param_ResponseCodeTwoHundredAndFour,param_ResponseHeadersNull);
        lib_Common.bc_APIStore_MySubscription(caller, param_applicationName,param_APIName,param_APIVersionOne);
        //Invoke sandbox endpoint of parent api
        lib_Common.bc_APIStore_InvokeAPI(caller, param_APIName,param_APIVersionOne,param_applicationName,param_keyTypeSandbox,param_keyWordYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_ResponseCodeTwoHundred,param_postResponseHeaders,param_keyWordYes,param_buttonNameGet,param_getCustomerName,param_ResponseCodeTwoHundred,param_getResponseHeaders,param_keyWordYes,param_buttonNamePut,param_putCustomerName,param_ResponseBodyNoContent,param_ResponseCodeTwoHundred,param_buttonNameGet,param_getCustomerNameForPutVerification,param_ResponseCodeTwoHundred,param_getResponseHeadersForPutVerification,param_keyWordNo,"","","","",param_keyWordYes,param_buttonNameDelete,param_ResponseBodyNoContent,param_ResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGet,param_ResponseBodyNoContent,param_ResponseCodeTwoHundredAndFour,param_ResponseHeadersNull);
        caller.writeToReport("End of execution of APIM2_502");	
    }
    /**
     *  Business component APIM2_758.
     */
    /**
     *  Business component APIM2_758.
     */
    public final static void APIM2_758(final SeleniumTestBase caller) throws Exception {
        caller.writeToReport("Start of APIM2_758");
        //To ensure that pagination occurs correctly on publisher when APIs are deleted
        //Go to publisher browse page for check the order of APIs
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("3000");
        caller.checkSorting("APIPublisherHome.ele_lblAPISquare","string","alphabetically","ascending",false,"");
        //Retrive the names of created APIs
        String varAPINameOne = caller.retrieveString("key_APINameOne");
        String varAPINameTwo = caller.retrieveString("key_APINameTwo");
        //Verify the API_One is visible in the first page and API_Two is not visible in the first page before delete the API_One
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameOne,false,"");
        caller.checkObjectProperty("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameTwo,"ELEMENTPRESENT","false",false,"");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",varAPINameOne);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Verify API is searched successfully
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameOne,false,"");
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_deleteAPI","APIName_PARAM:" + varAPINameOne);
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_Yes");
        caller.pause("5000");
        caller.checkObjectProperty("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameOne,"ELEMENTPRESENT","false",false,"");
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("4000");
        //Verify that API_One is no longer visible in the first page
        caller.checkObjectProperty("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameOne,"ELEMENTPRESENT","false",false,"");
        //Verify that API_Two is visible in the first page
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameTwo,false,"");
        //Verify all the APIs in the first page is in the ascending order
        caller.checkSorting("APIPublisherHome.ele_lblAPISquare","string","alphabetically","ascending",false,"");
        //Go to next page
        caller.click("APIPublisherBrowse.ele_lblNextPage");
        //waiting for content load
        caller.pause("2000");
        //Verify all the APIs in the secound page is in the ascending order
        caller.checkSorting("APIPublisherHome.ele_lblAPISquare","string","alphabetically","ascending",false,"");
        caller.writeToReport("End of APIM2_758");	
    }
    /**
     *  Business component APIM2_505.
     */
    public final static void APIM2_505(final SeleniumTestBase caller, final String param_publisherURL, final String param_storeURL, final String param_APIName, final String param_APIContext, final String param_APIVersionOne, final String param_APIvisibility, final String param_APIImageName, final String param_TagName, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_prototypeEndpoint, final String param_APIVersionTwo, final String param_provider, final String param_numberOfUsersZero, final String param_statusPublished, final String param_serverNameOfDomainOne, final String param_applicationName, final String param_keyWordNo, final String param_keyWordYes, final String param_keyTypeProduction, final String param_buttonNamePost, final String param_postPayloadContext, final String param_postCustomerNameFromPayloadContext, final String param_ResponseCodeTwoHundred, final String param_postResponseHeaders, final String param_buttonNameGet, final String param_getCustomerName, final String param_getResponseHeaders, final String param_buttonNamePut, final String param_putCustomerName, final String param_ResponseBodyNoContent, final String param_getCustomerNameForPutVerification, final String param_getResponseHeadersForPutVerification, final String param_buttonNameDelete, final String param_deleteResponseHeaders, final String param_ResponseCodeTwoHundredAndFour, final String param_ResponseHeadersNull, final String param_keyTypeSandbox, final String param_sandboxEndpoint) throws Exception {
        caller.writeToReport("Start of execution of APIM2_505");
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"2000");
        lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke(caller, param_APIName,param_APIContext,param_APIVersionOne,param_APIvisibility,param_APIImageName,param_TagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        String var_APIProtoTypeParent = caller.retrieveString("key_APINameDesign");
        caller.click("APIPublisherBrowse.ele_lblPrototype");
        //wait for content load
        caller.pause("2000");
        //verify that the prorotype panel is expanded
        caller.checkElementPresent("APIPublisherBrowse.tf_prototypeEndpoint",false,"");
        caller.type("APIPublisherBrowse.tf_prototypeEndpoint",param_prototypeEndpoint);
        //wait for content load
        caller.pause("1000");
        caller.click("APIPublisherBrowse.btn_DeployAsPrototype");
        //wait for content load
        caller.pause("2000");
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(!caller.checkElementPresent("APIPublisherAdd.ele_lblLoadSpinner")){
        caller.checkElementPresent("APIPublisherBrowse.btn_Close",false,"");
        caller.click("APIPublisherBrowse.btn_Close");
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Load Time Was Above Fifteen Seconds");
        }
        //waiting for content load
        caller.pause("3000");
        }
        }
        lib_Common.bc_APIPublisherSearch(caller, var_APIProtoTypeParent,var_APIProtoTypeParent,param_APIVersionOne);
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + var_APIProtoTypeParent + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne + "_PARAM," + "param_APIName_PARAM:" + var_APIProtoTypeParent);
        caller.click("APIPublisherBrowse.lnk_Overview");
        //verify that the overview page contains the create button
        caller.checkElementPresent("Browse_Overview.btn_CreateNewVersion",false,"");
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Overview.btn_CreateNewVersion");
        //Wait for content load
        caller.pause("2000");
        //verify that to version tab has expanded successfully and its contents are available
        caller.checkElementPresent("Browse_Overview.tf_ToVersion",false,"");
        caller.checkElementPresent("Browse_Overview.chk_DefaultVersion",false,"");
        caller.checkElementPresent("Browse_Overview.btn_Done",false,"");
        //Type new version - version five
        caller.type("Browse_Overview.tf_ToVersion",param_APIVersionTwo);
        //Wait for content load
        caller.pause("1000");
        //Wait for content load
        caller.pause("1000");
        caller.click("Browse_Overview.btn_Done");
        //Cannot verify the new version added message due to application bug
        //Wait for content load
        caller.pause("2000");
        lib_Common.bc_APIPublisherSearch(caller, var_APIProtoTypeParent,var_APIProtoTypeParent,param_APIVersionTwo);
        caller.click("APIPublisherBrowse.lnk_ApiNameWithVersion","param_APIName_PARAM:" + var_APIProtoTypeParent + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionTwo + "_PARAM," + "param_APIName_PARAM:" + var_APIProtoTypeParent);
        caller.click("APIPublisherBrowse.lnk_Edit");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(!caller.checkElementPresent("APIPublisherAdd.ele_lblLoadSpinner")){
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Load Time Was Above Fifteen Seconds");
        }
        //waiting for content load
        caller.pause("3000");
        }
        }
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_prototypeEndpoint,param_keyWordYes,param_sandboxEndpoint,param_keyWordNo,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_keyWordNo,param_keyWordNo,"");
        //Wait for content load
        caller.pause("2000");
        lib_Common.bc_APIPublisherSearch(caller, var_APIProtoTypeParent,var_APIProtoTypeParent,param_APIVersionTwo);
        //verify that the correct api is available with appropriate details
        caller.checkElementPresent("APIPublisherBrowse.lnk_APINameOverall","param_APIName_PARAM:" + var_APIProtoTypeParent + "_PARAM," + "param_version_PARAM:" + param_APIVersionTwo + "_PARAM," + "param_provider_PARAM:" + param_provider + "_PARAM," + "param_numberOfUsers_PARAM:" + param_numberOfUsersZero + "_PARAM," + "param_status_PARAM:" + param_statusPublished,false,"");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameOfDomainOne);
        lib_Common.bc_APIStoreSearch(caller, var_APIProtoTypeParent,var_APIProtoTypeParent,param_APIVersionTwo);
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersionAndProvider","param_APIName_PARAM:" + var_APIProtoTypeParent + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionTwo + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + var_APIProtoTypeParent + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersionTwo,false,"");
        caller.click("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + var_APIProtoTypeParent + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersionTwo);
        lib_Common.bc_APIStore_APIs_SubscribeAPI(caller, var_APIProtoTypeParent,param_APIVersionTwo,param_applicationName,param_keyWordNo,"");
        lib_Common.bc_APIStore_MySubscription(caller, param_applicationName,var_APIProtoTypeParent,param_APIVersionTwo);
        lib_Common.bc_APIStore_InvokeAPI(caller, var_APIProtoTypeParent,param_APIVersionTwo,param_applicationName,param_keyTypeProduction,param_keyWordYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_ResponseCodeTwoHundred,param_postResponseHeaders,param_keyWordYes,param_buttonNameGet,param_getCustomerName,param_ResponseCodeTwoHundred,param_getResponseHeaders,param_keyWordYes,param_buttonNamePut,param_putCustomerName,param_ResponseBodyNoContent,param_ResponseCodeTwoHundred,param_buttonNameGet,param_getCustomerNameForPutVerification,param_ResponseCodeTwoHundred,param_getResponseHeadersForPutVerification,param_keyWordNo,"","","","",param_keyWordYes,param_buttonNameDelete,param_ResponseBodyNoContent,param_ResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGet,param_ResponseBodyNoContent,param_ResponseCodeTwoHundredAndFour,param_ResponseHeadersNull);
        lib_Common.bc_APIStore_MySubscription(caller, param_applicationName,var_APIProtoTypeParent,param_APIVersionTwo);
        lib_Common.bc_APIStore_InvokeAPI(caller, param_APIName,param_APIVersionTwo,param_applicationName,param_keyTypeSandbox,param_keyWordYes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_ResponseCodeTwoHundred,param_postResponseHeaders,param_keyWordYes,param_buttonNameGet,param_getCustomerName,param_ResponseCodeTwoHundred,param_getResponseHeaders,param_keyWordYes,param_buttonNamePut,param_putCustomerName,param_ResponseBodyNoContent,param_ResponseCodeTwoHundred,param_buttonNameGet,param_getCustomerNameForPutVerification,param_ResponseCodeTwoHundred,param_getResponseHeadersForPutVerification,param_keyWordNo,"","","","",param_keyWordYes,param_buttonNameDelete,param_ResponseBodyNoContent,param_ResponseCodeTwoHundred,param_deleteResponseHeaders,param_buttonNameGet,param_ResponseBodyNoContent,param_ResponseCodeTwoHundredAndFour,param_ResponseHeadersNull);
        caller.writeToReport("End of execution of APIM2_505");	
    }
    /**
     *  Business component APIM2_737.
     */
    public final static void APIM2_737(final SeleniumTestBase caller, final String param_publisherURL, final String param_publisherOneOfTenantOneOrAdmin, final String param_APIName, final String param_APIContext, final String param_APIVersionOne, final String param_APIvisibility, final String param_APIImageName, final String param_TagName, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_productionEndpoint, final String param_keyWordYes, final String param_sandboxEndpoint, final String param_keyWordNo, final String param_subscription, final String param_StoreOneOfTenantOneOrAdmin, final String param_ApplicationName, final String param_keyTypeSandbox, final String param_buttonNamePost, final String param_postPayloadContext, final String param_postCustomerNameFromPayloadContext, final String param_ResponseCodeTwoHundred, final String param_postResponseHeaders, final String param_buttonNameGet, final String param_getCustomerName, final String param_getResponseHeaders, final String param_buttonNamePut, final String param_putCustomerName, final String param_ResponseBodyNoContent, final String param_getCustomerNameForPutVerification, final String param_getResponseHeadersForPutVerification, final String param_buttonNameDelete, final String param_deleteResponseHeaders, final String param_ResponseCodeTwoHundredAndFour, final String param_ResponseHeadersNull, final String param_IsAPIDefault, final String param_IsSubscriptionsAvailable) throws Exception {
        //APIM2-737: Create an API exposing only the HTTP endpoint
        caller.writeToReport("Start of Execution of TC APIM2-737");
        /*
        //start of creation of parent API
        Call
         businessComponent=lib_Common.bc_PublisherLogin
         param_publisherURL=@param_publisherURL
         param_TenantOrAdmin=@param_publisherOneOfTenantOneOrAdmin
        Call
         businessComponent=lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke
         param_APIName=@param_APIName
         param_APIContext=@param_APIContext
         param_APIVersionOne=@param_APIVersionOne
         param_APIvisibility=@param_APIvisibility
         param_APIImageName=@param_APIImageName
         param_TagName=@param_TagName
         param_urlPatternForPostAndPut=@param_urlPatternForPostAndPut
         param_urlPatternForGetDeleteAndHead=@param_urlPatternForGetDeleteAndHead
        Retrieve
         key=key_APINameDesign
         var=varAPINameParent
         type=String
        Call
         businessComponent=lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke
         param_productionEndpoint=@param_productionEndpoint
         param_IsSandBoxURLRequired=@param_keyWordYes
         param_sandboxEndpoint=@param_sandboxEndpoint
         param_IsEndpointSecuritySchemeRequired=@param_keyWordNo
         param_textEndpointSecurityScheme=
        //verify that the manage page is loaded
        Loop
         expression=int TotalCount=5;TotalCount>0;TotalCount--
         If
          expression=caller.checkElementPresent("APIPublisherBrowse.ele_ddTierAvilability")
          Click
           object=APIPublisherBrowse.ele_ddTierAvilability
          EditVariable
           name=TotalCount
           paramValue=0
          Break
         Else
          If
           expression=TotalCount==1
           Fail
            message=Could not find the object 'APIPublisherBrowse.ele_ddTierAvilability'
          EndIf
        //waiting for content load
          Pause
           ms=3000
         EndIf
        EndLoop
        Click
         object=APIPublisherBrowse.chk_Unlimited
        //if the created API version is the default version
        If
         expression=@param_IsAPIDefault.equals("yes")
        //Create the new API with a default version
         Click
          object=APIPublisherBrowse.chk_ConfigurationDefaultVersion
        //waiting for content load
         Pause
          ms=1000
        Else
        //waiting for content load
         Pause
          ms=2000
        EndIf
        //if subscription is diffenet from current tenant which is default value
        If
         expression=@param_IsSubscriptionsAvailable.equals("yes")
         Select
          object=APIPublisherBrowse.ele_ddSubscription
          selectLocator=@param_subscription
        //waiting for content load
         Pause
          ms=2000
        Else
        //waiting for content load
         Pause
          ms=2000
        EndIf
        Click
         object=APIPublisherBrowse.btn_SaveManageAPI
        Loop
         expression=int TotalCount=5;TotalCount>0;TotalCount--
         If
          expression=!caller.checkElementPresent("APIPublisherAdd.ele_lblLoadSpinner")
          EditVariable
           name=TotalCount
           paramValue=0
          Break
         Else
          If
           expression=TotalCount==1
           Fail
            message=Load Time Was Above Fifteen Seconds
          EndIf
        //waiting for content load
          Pause
           ms=3000
         EndIf
        EndLoop
        //untick the HTTPS
        Click
         object=APIPublisherAdd.chk_Manage_HTTPS
        Click
         object=APIPublisherBrowse.btn_SaveAndPublish
        Loop
         expression=int TotalCount=5;TotalCount>0;TotalCount--
         If
          expression=!caller.checkElementPresent("APIPublisherAdd.ele_lblLoadSpinner")
          EditVariable
           name=TotalCount
           paramValue=0
          Break
         Else
          If
           expression=TotalCount==1
           Fail
            message=Load Time Was Above Fifteen Seconds
          EndIf
        //waiting for content load
          Pause
           ms=3000
         EndIf
        EndLoop
        //click on go to store
        Click
         object=APIPublisherAdd.btn_GoToAPIStore
        //waiting for content load
        Pause
         ms=2000
        //End of creation of original API
        //log in store user
        Call
         businessComponent=lib_Common.bc_StoreLogin
         param_TenanrOrAdmin=@param_StoreOneOfTenantOneOrAdmin
        Call
         businessComponent=lib_Common.bc_APIStore_APIs_SubscribeAPI
         param_APIName=@varAPINameParent
         param_versionNumber=@param_APIVersionOne
         param_applicationName=@param_ApplicationName
         param_IsTierTypeChanged=@param_keyWordNo
         param_tiertype=
        //end of subscription
        NavigateToURL
         url=APIPublisherLogin
         param_publisherURL=@param_publisherURL
         ms=2000
        Call
         businessComponent=lib_Common.bc_APIStore_MySubscription
         param_applicationName=@param_ApplicationName
         param_APIName=@varAPINameParent
         param_versionNumber=@param_APIVersionOne
        //invoke from HTTP
        Call
         businessComponent=lib_Common.bc_APIStore_InvokeAPI
         param_APIName=@varAPINameParent
         param_versionNumber=@param_APIVersionOne
         param_applicationName=@param_ApplicationName
         param_keyTypeToInvoke=@param_keyTypeSandbox
         param_IsPostExecuted=@param_keyWordYes
         param_buttonNamePost=@param_buttonNamePost
         param_postPayloadContext=@param_postPayloadContext
         param_postCustomerNameFromPayloadContext=@param_postCustomerNameFromPayloadContext
         param_postResponseCodeTwoHundred=@param_ResponseCodeTwoHundred
         param_postResponseHeaders=@param_postResponseHeaders
         param_IsGetExecuted=@param_keyWordYes
         param_buttonNameGet=@param_buttonNameGet
         param_getCustomerName=@param_getCustomerName
         param_getResponseCodeTwoHundred=@param_ResponseCodeTwoHundred
         param_getResponseHeaders=@param_getResponseHeaders
         param_IsPutExecuted=@param_keyWordYes
         param_buttonNamePut=@param_buttonNamePut
         param_putCustomerName=@param_putCustomerName
         param_putResponseBodyNoContent=@param_ResponseBodyNoContent
         param_putResponseCodeTwoHundred=@param_ResponseCodeTwoHundred
         param_buttonNameGetForPutVerification=@param_buttonNameGet
         param_getCustomerNameForPutVerification=@param_getCustomerNameForPutVerification
         param_getResponseCodeTwoHundredForPutVerification=@param_ResponseCodeTwoHundred
         param_getResponseHeadersForPutVerification=@param_getResponseHeadersForPutVerification
         param_IsHeadExecuted=@param_keyWordNo
         param_buttonNameHead=
         param_headResponseBodyNoContent=
         param_headResponseCodeTwoHundred=
         param_headResponseHeadersNull=
         param_IsDeleteExecuted=@param_keyWordYes
         param_buttonNameDelete=@param_buttonNameDelete
         param_deleteResponseBodyNoContent=@param_ResponseBodyNoContent
         param_deleteResponseCodeTwoHundred=@param_ResponseCodeTwoHundred
         param_deleteResponseHeaders=@param_deleteResponseHeaders
         param_buttonNameGetForDeleteVerification=@param_buttonNameGet
         param_getResponseBodyNoContentForDeleteVerification=@param_ResponseBodyNoContent
         param_getResponseCodeTwoHundredAndFourForDeleteVerification=@param_ResponseCodeTwoHundredAndFour
         param_getResponseHeadersNullForDeleteVerification=@param_ResponseHeadersNull

        //invoke from HTTPS
        Call
         businessComponent=lib_Common.bc_APIStore_InvokeAPI
         param_APIName=@param_APIName
         param_versionNumber=@param_APIVersionTwo
         param_applicationName=@param_applicationName
         param_keyTypeToInvoke=@param_keyTypeSandbox
         param_IsPostExecuted=@param_keyWordYes
         param_buttonNamePost=@param_buttonNamePost
         param_postPayloadContext=@param_postPayloadContext
         param_postCustomerNameFromPayloadContext=@param_postCustomerNameFromPayloadContext
         param_postResponseCodeTwoHundred=@param_ResponseCodeTwoHundred
         param_postResponseHeaders=@param_postResponseHeaders
         param_IsGetExecuted=@param_keyWordYes
         param_buttonNameGet=@param_buttonNameGet
         param_getCustomerName=@param_getCustomerName
         param_getResponseCodeTwoHundred=@param_ResponseCodeTwoHundred
         param_getResponseHeaders=@param_getResponseHeaders
         param_IsPutExecuted=@param_keyWordYes
         param_buttonNamePut=@param_buttonNamePut
         param_putCustomerName=@param_putCustomerName
         param_putResponseBodyNoContent=@param_ResponseBodyNoContent
         param_putResponseCodeTwoHundred=@param_ResponseCodeTwoHundred
         param_buttonNameGetForPutVerification=@param_buttonNameGet
         param_getCustomerNameForPutVerification=@param_getCustomerNameForPutVerification
         param_getResponseCodeTwoHundredForPutVerification=@param_ResponseCodeTwoHundred
         param_getResponseHeadersForPutVerification=@param_getResponseHeadersForPutVerification
         param_IsHeadExecuted=@param_keyWordNo
         param_buttonNameHead=
         param_headResponseBodyNoContent=
         param_headResponseCodeTwoHundred=
         param_headResponseHeadersNull=
         param_IsDeleteExecuted=@param_keyWordYes
         param_buttonNameDelete=@param_buttonNameDelete
         param_deleteResponseBodyNoContent=@param_ResponseBodyNoContent
         param_deleteResponseCodeTwoHundred=@param_ResponseCodeTwoHundred
         param_deleteResponseHeaders=@param_deleteResponseHeaders
         param_buttonNameGetForDeleteVerification=@param_buttonNameGet
         param_getResponseBodyNoContentForDeleteVerification=@param_ResponseBodyNoContent
         param_getResponseCodeTwoHundredAndFourForDeleteVerification=@param_ResponseCodeTwoHundredAndFour
         param_getResponseHeadersNullForDeleteVerification=@param_ResponseHeadersNull
        */	
    }
    /**
     *  Business component APIM2_688.
     */
    public final static void APIM2_688(final SeleniumTestBase caller, final String param_publisherURL, final String param_publisherOneOfTenantOrAdmin, final String param_jasonURL, final String param_APIName, final String param_APIContext, final String param_APIVersionOne, final String param_APIvisibility, final String param_APIImageName, final String param_TagName, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_productionEndpoint, final String param_keyWordYes, final String param_sandboxEndpoint, final String param_keyWordNo, final String param_IsSubscriptionsAvailableNo, final String param_subscriptiondd, final String param_IsAPIDefaultYes, final String param_cacheTimeForTimeOut, final String param_keyWordPut, final String param_keyWordPost, final String param_keyWordGet, final String param_keyWordHead, final String param_keyWordDelete, final String param_keyWordEnabled) throws Exception {
        caller.writeToReport("Start of execution of TC APIM2_688");
        lib_Common.bc_PublisherLogin(caller, param_publisherURL,param_publisherOneOfTenantOrAdmin);
        //click the add area and to check the object loaded
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(caller.checkElementPresent("APIPublisherHome.lnk_Add")){
        caller.click("APIPublisherHome.lnk_Add");
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Could not find the object 'APIPublisherHome.lnk_Add'");
        }
        //waiting for content load
        caller.pause("2000");
        }
        }
        caller.click("APIPublisherAdd.rdo_iHaveAnExistingAPI");
        //waiting for panel to expand
        caller.pause("2000");
        caller.click("APIPublisherAdd.rdo_iHaveAnExistingAPI_swaggerURL");
        caller.type("APIPublisherAdd.tf_iHaveAnExistingAPI_swaggerURL_textField",param_jasonURL);
        //waiting for panel to expand
        caller.pause("3000");
        caller.click("APIPublisherAdd.btn_iHaveAnExistingAPI_startCreating");
        //waiting for content load
        caller.pause("2000");
        //genarate api name
        String APIName = param_APIName+"_"+caller.generateData("int",3);
        caller.store("key_APINameDesign","String",APIName);
        //Type API Name
        caller.type("APIPublisherAdd.tf_APIName",APIName);
        //Type API context
        String APIcontext = "{version}"+"/"+APIName;
        caller.type("APIPublisherAdd.tf_APIContext",APIcontext);
        //Type API version as default
        caller.type("APIPublisherAdd.tf_APIVersion",param_APIVersionOne);
        caller.store("key_APIVersion","String",param_APIVersionOne);
        //waiting for content load
        caller.pause("2000");
        caller.select("APIPublisherBrowse.ele_ddVisibility",param_APIvisibility);
        //waiting for content load
        caller.pause("2000");
        //uploading image optional
        //Genarate Tag Name
        String TagName = param_TagName+"_"+caller.generateData("int",3);
        //Type API tag
        caller.type("APIPublisherAdd.tf_Tags",TagName);
        //waiting for content load
        caller.pause("1000");
        caller.fireEvent("KEY%key=\n","2000");
        //waiting for content load
        caller.pause("2000");
        //check the button availability
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(caller.checkElementPresent("APIPublisherAdd.btn_Save")){
        //click save and verify warning
        caller.click("APIPublisherAdd.btn_Save");
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Could not find the object 'APIPublisherAdd.btn_Save'");
        }
        //waiting for content load
        caller.pause("2000");
        }
        }
        //waiting for content load and
        //check the load time
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(!caller.checkElementPresent("APIPublisherAdd.ele_lblLoadSpinner")){
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Load Time Was Above Fifteen Seconds");
        }
        //waiting for content load
        caller.pause("3000");
        }
        }
        //check the popup availability
        caller.click("APIPublisherAdd.lnk_NextImplement");
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(!caller.checkElementPresent("APIPublisherAdd.ele_lblLoadSpinner")){
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Load Time Was Above Fifteen Seconds");
        }
        //waiting for content load
        caller.pause("3000");
        }
        }
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_keyWordYes,param_sandboxEndpoint,param_keyWordNo,"");
        //verify manage section
        //*****************
        //verify that the manage page is loaded
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(caller.checkElementPresent("APIPublisherBrowse.ele_ddTierAvilability")){
        caller.click("APIPublisherBrowse.ele_ddTierAvilability");
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Could not find the object 'APIPublisherBrowse.ele_ddTierAvilability'");
        }
        //waiting for content load
        caller.pause("3000");
        }
        }
        caller.click("APIPublisherBrowse.chk_Unlimited");
        //if the created API version is the default version
        if(param_IsAPIDefaultYes.equals("yes")){
        //Create the new API with a default version
        caller.click("APIPublisherBrowse.chk_ConfigurationDefaultVersion");
        //waiting for content load
        caller.pause("1000");
        } else {
        //waiting for content load
        caller.pause("2000");
        }
        //if subscription is diffenet from current tenant which is default value
        if(param_IsSubscriptionsAvailableNo.equals("yes")){
        caller.select("APIPublisherBrowse.ele_ddSubscription",param_subscriptiondd);
        //waiting for content load
        caller.pause("2000");
        } else {
        //waiting for content load
        caller.pause("2000");
        }
        caller.type("APIPublisherBrowse.ele_ddResponseCaching",param_keyWordEnabled);
        //waiting for content load
        caller.pause("2000");
        //verify that the cache timeout has expanded
        caller.checkElementPresent("APIPublisherBrowse.tf_APIMange_cacheTimeout",false,"");
        caller.type("APIPublisherBrowse.tf_APIMange_cacheTimeout",param_cacheTimeForTimeOut);
        //waiting for content load
        caller.pause("2000");
        //verify that the added resources are available
        caller.checkElementPresent("APIPublisherBrowse.ele_lblAPIManage_ResourcesVerificationPutAndPost","param_invokeCommand_PARAM:" + param_keyWordPut,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblAPIManage_ResourcesVerificationPutAndPost","param_invokeCommand_PARAM:" + param_keyWordPost,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblAPIManage_ResourcesVerificationGetHeadAndDelete","param_invokeCommand_PARAM:" + param_keyWordGet,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblAPIManage_ResourcesVerificationGetHeadAndDelete","param_invokeCommand_PARAM:" + param_keyWordHead,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblAPIManage_ResourcesVerificationGetHeadAndDelete","param_invokeCommand_PARAM:" + param_keyWordDelete,false,"");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_SaveManageAPI");
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(!caller.checkElementPresent("APIPublisherAdd.ele_lblLoadSpinner")){
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Load Time Was Above Fifteen Seconds");
        }
        //waiting for content load
        caller.pause("3000");
        }
        }
        caller.click("APIPublisherBrowse.btn_SaveAndPublish");
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(!caller.checkElementPresent("APIPublisherAdd.ele_lblLoadSpinner")){
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Load Time Was Above Fifteen Seconds");
        }
        //waiting for content load
        caller.pause("3000");
        }
        }
        caller.checkElementPresent("APIPublisherBrowse.btn_Close",false,"");
        //waiting for content load
        caller.pause("1000");
        caller.click("APIPublisherBrowse.btn_Close");
        //waiting for content load
        caller.pause("3000");
        caller.writeToReport("End of execution of TC APIM2_688");	
    }
    /**
     *  Business component APIM2_3.
     */
    public final static void APIM2_3(final SeleniumTestBase caller, final String param_publisherURL, final String param_publisherOneOfTenantOneOrAdmin, final String param_APIName, final String param_APIVersion, final String param_APIvisibility, final String param_APIImageName, final String param_TagName, final String param_WSDLUrl, final String param_productionEndpoint, final String param_IsSandBoxURLRequired, final String param_sandboxEndpoint, final String param_IsEndpointSecuritySchemeRequired, final String param_textEndpointSecurityScheme, final String param_IsAPIDefault, final String param_IsSubscriptionsAvailable, final String param_subscription, final String param_storeURL, final String param_TenantOrAdmin, final String param_TenantOneOrAdminStoreOne, final String param_ApplicationName, final String param_tierType, final String param_buttonNamePost, final String param_postPayloadContext, final String param_postResponseCodeTwoHundred, final String param_soapAction) throws Exception {
        //Add API with a SOAP endpoint
        caller.writeToReport("Start of executing test case APIM2_3");
        lib_Common.bc_PublisherLogin(caller, param_publisherURL,param_publisherOneOfTenantOneOrAdmin);
        //Creation of API
        //Loging to the publisher using the created credentials
        //click the add area and to check the object loaded
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(caller.checkElementPresent("APIPublisherHome.lnk_Add")){
        caller.click("APIPublisherHome.lnk_Add");
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Could not find the object 'APIPublisherHome.lnk_Add'");
        }
        //waiting for content load
        caller.pause("2000");
        }
        }
        caller.pause("2000");
        caller.click("APIPublisherAdd.rdo_IHaveSoapEndpoint");
        caller.pause("1000");
        caller.checkElementPresent("APIPublisherAdd.ele_lblProvideWSDLUrl",false,"");
        caller.type("APIPublisherAdd.tf_WsdlUrl",param_WSDLUrl);
        caller.pause("2000");
        caller.click("APIPublisherAdd.btn_StartCreatingSoapEndPoint");
        caller.pause("2000");
        //genarate api name
        String APIName = param_APIName+"_"+caller.generateData("int",5);
        caller.store("key_APINameDesign","String",APIName);
        //Type API Name
        caller.type("APIPublisherAdd.tf_APIName",APIName);
        //Type API context
        String APIcontext = "{version}"+"/"+APIName;
        caller.type("APIPublisherAdd.tf_APIContext",APIcontext);
        //Type API version as default
        caller.type("APIPublisherAdd.tf_APIVersion",param_APIVersion);
        caller.store("key_APIVersion","String",param_APIVersion);
        //waiting for content load
        caller.pause("2000");
        caller.select("APIPublisherBrowse.ele_ddVisibility",param_APIvisibility);
        //waiting for content load
        caller.pause("2000");
        //uploading image optional
        /*
        //Type valid image path
        SetVariable
         name=java.io.File file
         type=java.io.File file
         paramValue=new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator +param_APIImageName)
        SetVariable
         name=entirePath
         type=String
         paramValue=file.getAbsolutePath()

        //Select the location of the image
        Type
         object=APIPublisherAdd.btn_BrowseImage
         text=@entirePath
        */
        //Genarate Tag Name
        String TagName = param_TagName+"_"+caller.generateData("int",3);
        //Type API tag
        caller.type("APIPublisherAdd.tf_Tags",TagName);
        //waiting for content load
        caller.pause("1000");
        caller.fireEvent("KEY%key=\n","2000");
        //waiting for content load
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherAdd.ele_lblAPIDefinitionURL","WSDLUrl_PARAM:" + param_WSDLUrl,false,"");
        //check the button availability
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(caller.checkElementPresent("APIPublisherAdd.btn_Save")){
        //click save and verify warning
        caller.click("APIPublisherAdd.btn_Save");
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Could not find the object 'APIPublisherAdd.btn_Save'");
        }
        //waiting for content load
        caller.pause("2000");
        }
        }
        //Click on next implement button
        caller.click("APIPublisherAdd.lnk_NextImplement");
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(!caller.checkElementPresent("APIPublisherAdd.ele_lblLoadSpinner")){
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Load Time Was Above Fifteen Seconds");
        }
        //waiting for content load
        caller.pause("3000");
        }
        }
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_IsSandBoxURLRequired,param_sandboxEndpoint,param_IsEndpointSecuritySchemeRequired,param_textEndpointSecurityScheme);
        //verify that the manage page is loaded
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(caller.checkElementPresent("APIPublisherBrowse.ele_ddTierAvilability")){
        caller.click("APIPublisherBrowse.ele_ddTierAvilability");
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Could not find the object 'APIPublisherBrowse.ele_ddTierAvilability'");
        }
        //waiting for content load
        caller.pause("3000");
        }
        }
        caller.click("APIPublisherBrowse.chk_Unlimited");
        //if the created API version is the default version
        if(param_IsAPIDefault.equals("yes")){
        //Create the new API with a default version
        caller.click("APIPublisherBrowse.chk_ConfigurationDefaultVersion");
        //waiting for content load
        caller.pause("1000");
        } else {
        //waiting for content load
        caller.pause("2000");
        }
        //if subscription is diffenet from current tenant which is default value
        if(param_IsSubscriptionsAvailable.equals("yes")){
        caller.select("APIPublisherBrowse.ele_ddSubscription",param_subscription);
        //waiting for content load
        caller.pause("2000");
        } else {
        //waiting for content load
        caller.pause("2000");
        }
        caller.click("APIPublisherBrowse.btn_SaveManageAPI");
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(!caller.checkElementPresent("APIPublisherAdd.ele_lblLoadSpinner")){
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Load Time Was Above Fifteen Seconds");
        }
        //waiting for content load
        caller.pause("3000");
        }
        }
        caller.click("APIPublisherAdd.chk_Manage_HTTPS");
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_SaveAndPublish");
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(!caller.checkElementPresent("APIPublisherAdd.ele_lblLoadSpinner")){
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Load Time Was Above Fifteen Seconds");
        }
        //waiting for content load
        caller.pause("3000");
        }
        }
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherBrowse.btn_GoToOverview",false,"");
        caller.checkElementPresent("APIPublisherBrowse.btn_keepEditting",false,"");
        caller.checkElementPresent("APIPublisherBrowse.btn_gotoAPIStore",false,"");
        caller.pause("1000");
        caller.click("APIPublisherBrowse.btn_gotoAPIStore");
        caller.pause("2000");
        caller.selectWindow("Browse_Doc.window");
        //Go to My Subcription window to Generate keys
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + APIName);
        if(!caller.checkElementPresent("APIStoreAPIs.btn_Subscribe")){
        }
        //verify the availability of api2 url
        caller.checkElementPresent("APIStoreAPIs.ele_lblProductionUrlGeneral","param_rearUrlPattern_PARAM:" + param_APIVersion+"/"+APIName,false,"");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_TenantOneOrAdminStoreOne);
        //API Subcription
        //Go to My Subcription window to Generate keys
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + APIName);
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_ApplicationName);
        caller.select("APIStoreAPIs.ele_ddtierToSubscribe",param_tierType);
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        caller.click("APIStoreHome.lnk_MySubcription");
        //verify that the landed page is My Subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_ddApplicationWithSubscription",false,"");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        //wait for content load
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        }
        //wait for content load
        caller.pause("1000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        //verify that the api is visible under subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsPublished","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersion,false,"");
        //////////////////////////////////////////////////
        caller.click("APIStoreMySubcription.ele_lblSubcribedAPIsPublished","param_APIName_PARAM:" + APIName + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersion);
        //wait for content load
        caller.pause("2000");
        //check the availability of api console tab in API
        caller.checkElementPresent("APIStoreAPIs.ele_tabAPIConsole",false,"");
        caller.click("APIStoreAPIs.ele_tabAPIConsole");
        //wait for content load
        caller.pause("2000");
        //verify that the landed page is relavent api
        caller.checkElementPresent("APIStoreAPIConsole.ele_lblAPIName","param_APIName_PARAM:" + APIName,false,"");
        caller.pause("1000");
        //Invoking the commands depending on user inputs
        //Execution and verification of post command
        caller.click("APIStoreAPIConsole.btn_mainCommandButtons","param_buttonName_PARAM:" + param_buttonNamePost);
        //wait for content load
        caller.pause("1000");
        //verify that the view is expanded
        caller.checkElementPresent("APIStoreAPIConsole.tf_SoapRequest",false,"");
        caller.type("APIStoreAPIConsole.tf_SoapRequest",param_postPayloadContext);
        //wait for content load
        caller.pause("2000");
        caller.type("APIStoreAPIConsole.tf_SoapAction",param_soapAction);
        caller.click("APIStoreAPIConsole.btn_tryItOutSoap");
        //wait for content load
        caller.pause("1000");
        //store and retreive the customer id to verify
        //verify the response code
        caller.checkElementPresent("APIStoreAPIConsole.ele_lblResponseCodeSoap","param_respondCode_PARAM:" + param_postResponseCodeTwoHundred,false,"");
        ////////////////////////////////////////////////
        caller.pause("3000");
        caller.writeToReport("End of executing test case APIM2_3");	
    }
    /**
     *  Business component APIM2_1010.
     */
    public final static void APIM2_1010(final SeleniumTestBase caller, final String param_docName, final String param_fileToUpload, final String param_DocVisibilitySameAsAPI, final String param_other, final String param_editContent, final String param_publisherURL, final String param_Domain, final String param_storeURL) throws Exception {
        //Edit an change a document which is type : "Samples & SDK" and Source : File to Type : Other and Source :In-line.
        caller.writeToReport("Start of Test case APIM2_1010");
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("3000");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("2000");
        //Adding new document
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameOne = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameOne);
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.rdo_SampleAndSDK",false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_SampleAndSDK");
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_File");
        caller.pause("5000");
        //Type valid file path
         java.io.File fileTwo = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator + param_fileToUpload);
        String entirePathTwo = fileTwo.getAbsolutePath();
        caller.type("Browse_Doc.tf_BrowseFile",entirePathTwo);
        caller.pause("4000");
        //Set visibility level same as API
        caller.select("Browse_Doc.ele_ddVisibility",param_DocVisibilitySameAsAPI);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        //Check for added document
        caller.checkElementPresent("Browse_Doc.ele_lblSamples","param_docName_PARAM:" + DocNameOne,false,"");
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.lnk_open","param_docName_PARAM:" + DocNameOne,false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocNameOne);
        //check edit document page visibility
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_Other");
        caller.type("Browse_Doc.tf_Other",param_other);
        caller.pause("1000");
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        //wait for content load
        caller.checkElementPresent("Browse_Doc.ele_lblOther","param_docName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_Delete","param_DocName_PARAM:" + DocNameOne,false,"");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocNameOne);
        //Wait for content load
        caller.pause("2000");
        caller.selectWindow("Browse_Doc.newWindow1");
        caller.pause("2000");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + APIVersion,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblDocNameEditContent","param_docName_PARAM:" + DocNameOne,false,"");
        caller.selectFrame("Browse_Doc.frame1");
        caller.pause("4000");
        caller.click("Browse_Doc.tf_EditContent1");
        caller.checkElementPresent("Browse_Doc.tf_EditContent1",false,"");
        caller.pause("500");
        caller.type("Browse_Doc.tf_EditContent1",param_editContent);
        caller.pause("4000");
        caller.fireEvent("KEY%key=\t|key=\t|key=\n","5000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lblOther","param_docName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_Delete","param_DocName_PARAM:" + DocNameOne,false,"");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocNameOne);
        caller.pause("2000");
        caller.selectWindow("Browse_Doc.newWindow1");
        caller.pause("2000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        lib_Common.bc_StoreLogin(caller, param_Domain);
        caller.pause("3000");
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_Other");
        caller.pause("6000");
        caller.checkElementPresent("APIStoreDocumentation.ele_lblDocumentName","param_docName_PARAM:" + DocNameOne,false,"");
        caller.click("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + DocNameOne);
        caller.pause("4000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("4000");
        caller.checkElementPresent("APIStoreDocumentation.ele_documentViewText","param_text_PARAM:" + param_editContent + "_PARAM," + "param_docName_PARAM:" + DocNameOne,false,"");
        caller.pause("6000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        //Navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.writeToReport("End of Test case APIM2_1010");	
    }
    /**
     *  Business component APIM2_690.
     */
    public final static void APIM2_690(final SeleniumTestBase caller, final String param_publisherURL, final String param_publisherOneOfTenantOrAdmin, final String param_jasonFileName, final String param_APIName, final String param_APIContext, final String param_APIVersionOne, final String param_APIvisibility, final String param_APIImageName, final String param_TagName, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_productionEndpoint, final String param_keyWordYes, final String param_sandboxEndpoint, final String param_keyWordNo, final String param_IsAPIDefaultYes, final String param_IsSubscriptionsAvailableNo, final String param_subscription, final String param_cacheTimeForTimeOut, final String param_keyWordPut, final String param_keyWordPost, final String param_keyWordGet, final String param_keyWordHead, final String param_storeURL, final String param_StoreOneOfTenanrOrAdmin, final String param_serverNameDomainOne, final String param_keyWordDelete, final String param_keywordEnabled) throws Exception {
        caller.writeToReport("Start of execution of TC APIM2_690");
        lib_Common.bc_PublisherLogin(caller, param_publisherURL,param_publisherOneOfTenantOrAdmin);
        //click the add area and to check the object loaded
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(caller.checkElementPresent("APIPublisherHome.lnk_Add")){
        caller.click("APIPublisherHome.lnk_Add");
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Could not find the object 'APIPublisherHome.lnk_Add'");
        }
        //waiting for content load
        caller.pause("2000");
        }
        }
        caller.click("APIPublisherAdd.rdo_iHaveAnExistingAPI");
        //waiting for panel to expand
        caller.pause("2000");
        caller.click("APIPublisherAdd.rdo_iHaveAnExistingAPI_swaggerFile");
        //Import the the jason file from repository
         java.io.File file = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "data"+ java.io.File.separator +param_jasonFileName);
        String entirePath = file.getAbsolutePath();
        caller.type("APIPublisherAdd.btn_iHaveAnExistingAPI_swaggerFile_browse",entirePath);
        //waiting for panel to expand
        caller.pause("3000");
        caller.click("APIPublisherAdd.btn_iHaveAnExistingAPI_startCreating");
        //waiting for content load
        caller.pause("2000");
        //genarate api name
        String APIName = param_APIName+"_"+caller.generateData("int",3);
        caller.store("key_APINameDesign","String",APIName);
        //Type API Name
        caller.type("APIPublisherAdd.tf_APIName",APIName);
        //Type API context
        String APIcontext = "{version}"+"/"+APIName;
        caller.type("APIPublisherAdd.tf_APIContext",APIcontext);
        //Type API version as default
        caller.type("APIPublisherAdd.tf_APIVersion",param_APIVersionOne);
        caller.store("key_APIVersion","String",param_APIVersionOne);
        //waiting for content load
        caller.pause("2000");
        caller.select("APIPublisherBrowse.ele_ddVisibility",param_APIvisibility);
        //waiting for content load
        caller.pause("2000");
        //uploading image optional
        //Genarate Tag Name
        String TagName = param_TagName+"_"+caller.generateData("int",3);
        //Type API tag
        caller.type("APIPublisherAdd.tf_Tags",TagName);
        //waiting for content load
        caller.pause("1000");
        caller.fireEvent("KEY%key=\n","2000");
        //waiting for content load
        caller.pause("2000");
        //Type the URL pattern for post and put
        caller.type("APIPublisherAdd.tf_URLPattern",param_urlPatternForPostAndPut);
        //waiting for content load
        caller.pause("1000");
        //check the availability of post and put check boxes
        caller.checkElementPresent("APIPublisherAdd.chk_Post",false,"");
        caller.checkElementPresent("APIPublisherAdd.chk_Put",false,"");
        caller.click("APIPublisherAdd.chk_Post");
        caller.click("APIPublisherAdd.chk_Put");
        //waiting for content load
        caller.pause("1000");
        //add the soap url
        caller.click("APIPublisherAdd.btn_Add");
        //waiting for content load
        caller.pause("2000");
        //Type the URL pattern for post and put
        caller.type("APIPublisherAdd.tf_URLPattern",param_urlPatternForGetDeleteAndHead);
        //waiting for content load
        caller.pause("1000");
        //check the availability of get,delete&head check boxes
        caller.checkElementPresent("APIPublisherAdd.chk_Get",false,"");
        caller.checkElementPresent("APIPublisherAdd.chk_Delete",false,"");
        caller.checkElementPresent("APIPublisherAdd.chk_Head",false,"");
        caller.click("APIPublisherAdd.chk_Get");
        caller.click("APIPublisherAdd.chk_Delete");
        caller.click("APIPublisherAdd.chk_Head");
        //waiting for content load
        caller.pause("1000");
        //add the soap url
        caller.click("APIPublisherAdd.btn_Add");
        //verify the added soap commands get,delete,head and the url pattern
        //check the button availability
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(caller.checkElementPresent("APIPublisherAdd.btn_Save")){
        //click save and verify warning
        caller.click("APIPublisherAdd.btn_Save");
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Could not find the object 'APIPublisherAdd.btn_Save'");
        }
        //waiting for content load
        caller.pause("2000");
        }
        }
        //waiting for content load and
        //check the load time
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(!caller.checkElementPresent("APIPublisherAdd.ele_lblLoadSpinner")){
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Load Time Was Above Fifteen Seconds");
        }
        //waiting for content load
        caller.pause("3000");
        }
        }
        //check the popup availability
        caller.click("APIPublisherAdd.lnk_NextImplement");
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(!caller.checkElementPresent("APIPublisherAdd.ele_lblLoadSpinner")){
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Load Time Was Above Fifteen Seconds");
        }
        //waiting for content load
        caller.pause("3000");
        }
        }
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_keyWordYes,param_sandboxEndpoint,param_keyWordNo,"");
        //verify manage section
        //verify that the manage page is loaded
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(caller.checkElementPresent("APIPublisherBrowse.ele_ddTierAvilability")){
        caller.click("APIPublisherBrowse.ele_ddTierAvilability");
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Could not find the object 'APIPublisherBrowse.ele_ddTierAvilability'");
        }
        //waiting for content load
        caller.pause("3000");
        }
        }
        caller.click("APIPublisherBrowse.chk_Unlimited");
        //if the created API version is the default version
        if(param_IsAPIDefaultYes.equals("yes")){
        //Create the new API with a default version
        caller.click("APIPublisherBrowse.chk_ConfigurationDefaultVersion");
        //waiting for content load
        caller.pause("1000");
        } else {
        //waiting for content load
        caller.pause("2000");
        }
        //if subscription is diffenet from current tenant which is default value
        if(param_IsSubscriptionsAvailableNo.equals("yes")){
        caller.select("APIPublisherBrowse.ele_ddSubscription",param_subscription);
        //waiting for content load
        caller.pause("2000");
        } else {
        //waiting for content load
        caller.pause("2000");
        }
        caller.select("APIPublisherBrowse.ele_ddResponseCaching",param_keywordEnabled);
        //waiting for content load
        caller.pause("2000");
        //verify that the cache timeout has expanded
        caller.checkElementPresent("APIPublisherBrowse.tf_APIMange_cacheTimeout",false,"");
        caller.type("APIPublisherBrowse.tf_APIMange_cacheTimeout",param_cacheTimeForTimeOut);
        //waiting for content load
        caller.pause("2000");
        //verify that the added resources are available
        caller.checkElementPresent("APIPublisherBrowse.ele_lblAPIManage_ResourcesVerificationPutAndPost","param_invokeCommand_PARAM:" + param_keyWordPut,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblAPIManage_ResourcesVerificationPutAndPost","param_invokeCommand_PARAM:" + param_keyWordPost,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblAPIManage_ResourcesVerificationGetHeadAndDelete","param_invokeCommand_PARAM:" + param_keyWordGet,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblAPIManage_ResourcesVerificationGetHeadAndDelete","param_invokeCommand_PARAM:" + param_keyWordHead,false,"");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblAPIManage_ResourcesVerificationGetHeadAndDelete","param_invokeCommand_PARAM:" + param_keyWordDelete,false,"");
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_SaveManageAPI");
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(!caller.checkElementPresent("APIPublisherAdd.ele_lblLoadSpinner")){
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Load Time Was Above Fifteen Seconds");
        }
        //waiting for content load
        caller.pause("3000");
        }
        }
        caller.click("APIPublisherBrowse.btn_SaveAndPublish");
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(!caller.checkElementPresent("APIPublisherAdd.ele_lblLoadSpinner")){
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Load Time Was Above Fifteen Seconds");
        }
        //waiting for content load
        caller.pause("3000");
        }
        }
        caller.checkElementPresent("APIPublisherBrowse.btn_Close",false,"");
        //waiting for content load
        caller.pause("1000");
        caller.click("APIPublisherBrowse.btn_Close");
        //waiting for content load
        caller.pause("3000");
        //End of creation of API
        //Obtain swagger url from the created API
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameDomainOne);
        lib_Common.bc_StoreLogin(caller, param_StoreOneOfTenanrOrAdmin);
        String var_APINameForSwaggerFile = caller.retrieveString("key_APINameDesign");
        caller.type("APIStoreHome.tf_APISearchStore",var_APINameForSwaggerFile);
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_APINameStoreWithVersion","param_APIName_PARAM:" + var_APINameForSwaggerFile + "_PARAM," + "param_versionNumber_PARAM:" + param_APIVersionOne);
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.ele_tabAPIConsole");
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreAPIConsole.lnk_swaggerJason");
        //wait for content load
        caller.pause("2000");
        caller.selectWindow("Browse_Doc.window");
        //wait for content load
        caller.pause("2000");
        //retrive the url
        String var_jasonURL = caller.getDriver().getCurrentUrl();
        caller.store("key_jasonURL","String",var_jasonURL);
        caller.writeToReport("End of execution of TC APIM2_690");	
    }
    /**
     *  Business component APIM2_1009.
     */
    public final static void APIM2_1009(final SeleniumTestBase caller, final String param_docName, final String param_fileToUpload, final String param_DocVisibilitySameAsAPI, final String param_url, final String param_Domain, final String param_publisherURL, final String param_storeURL) throws Exception {
        //Edit and change a document which is type: "Samples & SDK" and Source: "File" to Type: "How To" and Source : "URL"
        caller.writeToReport("Start of Test case APIM2_1009");
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("3000");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("2000");
        //Adding new document
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameOne = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameOne);
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.rdo_HowTo",false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_HowTo");
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_File");
        caller.pause("5000");
        //Type valid file path
         java.io.File fileTwo = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator + param_fileToUpload);
        String entirePathTwo = fileTwo.getAbsolutePath();
        caller.type("Browse_Doc.tf_BrowseFile",entirePathTwo);
        caller.pause("4000");
        //Set visibility level same as API
        caller.select("Browse_Doc.ele_ddVisibility",param_DocVisibilitySameAsAPI);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        //Check for added document
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocNameOne,false,"");
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.lnk_open","param_docName_PARAM:" + DocNameOne,false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocNameOne);
        //check edit document page visibility
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_PublicForum");
        caller.pause("2000");
        caller.type("Browse_Doc.tf_URL",param_url);
        caller.pause("1000");
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        //wait for content load
        caller.checkElementPresent("Browse_Doc.ele_lblPublicForum","param_docName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_View","param_docName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_Delete","param_DocName_PARAM:" + DocNameOne,false,"");
        caller.click("Browse_Doc.btn_View","param_docName_PARAM:" + DocNameOne);
        caller.pause("3000");
        //Wait for content load
        caller.selectWindow("Browse_Doc.newWindow1");
        caller.pause("2000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.checkElementPresent("Browse_Doc.ele_lblPublicForum","param_docName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_View","param_docName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_Delete","param_DocName_PARAM:" + DocNameOne,false,"");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        lib_Common.bc_StoreLogin(caller, param_Domain);
        caller.pause("3000");
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_PublicForum");
        caller.pause("1000");
        caller.checkElementPresent("APIStoreDocumentation.ele_lblDocumentName","param_docName_PARAM:" + DocNameOne,false,"");
        caller.click("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocNameOne + "_PARAM," + "param_URLLink_PARAM:" + param_url);
        caller.pause("4000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("4000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        //Navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.writeToReport("End of Test case APIM2_1009");	
    }
    /**
     *  Business component APIM2_475.
     */
    public final static void APIM2_475(final SeleniumTestBase caller, final String param_docName, final String param_fileToUpload, final String param_DocVisibilitySameAsAPI, final String param_fileToUploadTwo, final String param_downImage, final String param_DownloadFilePath, final String param_Domain, final String param_publisherURL, final String param_storeURL, final String param_summery) throws Exception {
        //Edit and change file uploaded in an existing document of an API.
        caller.writeToReport("Start of Test case APIM2_475");
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("3000");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("2000");
        //Adding new document
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameOne = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameOne);
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.rdo_HowTo",false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_HowTo");
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_File");
        caller.pause("5000");
        //Type valid file path
         java.io.File fileTwo = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator + param_fileToUpload);
        String entirePathTwo = fileTwo.getAbsolutePath();
        caller.type("Browse_Doc.tf_BrowseFile",entirePathTwo);
        caller.pause("4000");
        //Set visibility level same as API
        caller.select("Browse_Doc.ele_ddVisibility",param_DocVisibilitySameAsAPI);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        //Check for added document
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocNameOne,false,"");
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.lnk_open","param_docName_PARAM:" + DocNameOne,false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocNameOne);
        //check edit document page visibility
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_HowTo");
        caller.pause("2000");
        caller.type("Browse_Doc.tf_Summary",param_summery);
        //Type valid file path
         java.io.File fileOne = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator + param_fileToUploadTwo);
        String entirePath = fileTwo.getAbsolutePath();
        caller.type("Browse_Doc.tf_BrowseFile",entirePath);
        caller.pause("1000");
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        //wait for content load
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_open","param_docName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_Delete","param_DocName_PARAM:" + DocNameOne,false,"");
        caller.click("Browse_Doc.lnk_open","param_docName_PARAM:" + DocNameOne);
        caller.pause("2000");
        //Handling popup for fire fox browser
        String downImagePopup3 = param_downImage;
        if(caller.checkImagePresent(downImagePopup3,false)){
        caller.fireEvent("KEY%key=alt+s","2000");
        caller.fireEvent("KEY%key=alt+a","2000");
        caller.fireEvent("KEY%key=\n","1000");
        }
        //Check downloaded file
        caller.checkFileInfo(param_DownloadFilePath,"EXIST",false,"");
        caller.pause("3000");
        //wait for content load
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_open","param_docName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_Delete","param_DocName_PARAM:" + DocNameOne,false,"");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        lib_Common.bc_StoreLogin(caller, param_Domain);
        caller.pause("3000");
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_HowTo");
        caller.pause("1000");
        caller.checkElementPresent("APIStoreDocumentation.ele_lblDocumentName","param_docName_PARAM:" + DocNameOne,false,"");
        caller.click("APIStoreDocumentation.lnk_Download","param_docName_PARAM:" + DocNameOne);
        //Handling popup for fire fox browser
        String downImagePopup1 = param_downImage;
        if(caller.checkImagePresent(downImagePopup1,false)){
        caller.fireEvent("KEY%key=alt+s","2000");
        caller.fireEvent("KEY%key=alt+a","2000");
        caller.fireEvent("KEY%key=\n","1000");
        }
        //Check downloaded file
        caller.checkFileInfo(param_DownloadFilePath,"EXIST",false,"");
        //Navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.writeToReport("End of Test case APIM2_475");	
    }
    /**
     *  Business component APIM2_1005.
     */
    public final static void APIM2_1005(final SeleniumTestBase caller, final String param_docName, final String param_url, final String param_DocVisibilitySameAsAPI, final String param_fileToUpload, final String param_downImage, final String param_DownloadFilePath, final String param_Domain, final String param_storeURL, final String param_publisherURL, final String param_summery, final String downImagePopup1) throws Exception {
        //Edit and change a document which is type: "Public Forum" and Source: "URL" to Type: "Samples & SDK" and Source : "File".
        caller.writeToReport("Start of Test case APIM2_1005");
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("3000");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("2000");
        //Adding new document
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameOne = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameOne);
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.rdo_PublicForum",false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_PublicForum");
        caller.pause("2000");
        caller.type("Browse_Doc.tf_URL",param_url);
        caller.pause("5000");
        //Set visibility level same as API
        caller.select("Browse_Doc.ele_ddVisibility",param_DocVisibilitySameAsAPI);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        //wait for content load
        caller.checkElementPresent("Browse_Doc.ele_lblPublicForum","param_docName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_View","param_docName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_Delete","param_DocName_PARAM:" + DocNameOne,false,"");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocNameOne);
        //check edit document page visibility
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        caller.pause("3000");
        caller.type("Browse_Doc.tf_Summary",param_summery);
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_SampleAndSDK");
        caller.pause("1000");
        caller.click("Browse_Doc.rdo_File");
        caller.pause("2000");
        //Type valid file path
         java.io.File fileTwo = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator + param_fileToUpload);
        String entirePathTwo = fileTwo.getAbsolutePath();
        caller.type("Browse_Doc.tf_BrowseFile",entirePathTwo);
        caller.pause("1000");
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        //wait for content load
        caller.checkElementPresent("Browse_Doc.ele_lblSamples","param_docName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_open","param_docName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_Delete","param_DocName_PARAM:" + DocNameOne,false,"");
        caller.click("Browse_Doc.lnk_open","param_docName_PARAM:" + DocNameOne);
        caller.pause("2000");
        //Handling popup for fire fox browser
        String downImagePopup4 = param_downImage;
        if(caller.checkImagePresent(downImagePopup4,false)){
        caller.fireEvent("KEY%key=alt+s","2000");
        caller.fireEvent("KEY%key=alt+a","2000");
        caller.fireEvent("KEY%key=\n","1000");
        }
        //Check downloaded file
        caller.checkFileInfo(param_DownloadFilePath,"EXIST",false,"");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        lib_Common.bc_StoreLogin(caller, param_Domain);
        caller.pause("3000");
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_Samples");
        caller.pause("1000");
        caller.checkElementPresent("APIStoreDocumentation.ele_lblDocumentName","param_docName_PARAM:" + DocNameOne,false,"");
        caller.click("APIStoreDocumentation.lnk_Download","param_docName_PARAM:" + DocNameOne);
        //Handling popup for fire fox browser
        String downImagePopup2 = param_downImage;
        if(caller.checkImagePresent(downImagePopup2,false)){
        caller.fireEvent("KEY%key=alt+s","2000");
        caller.fireEvent("KEY%key=alt+a","2000");
        caller.fireEvent("KEY%key=\n","1000");
        }
        //Check downloaded file
        caller.checkFileInfo(param_DownloadFilePath,"EXIST",false,"");
        //Navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.writeToReport("End of Test case APIM2_1005");	
    }
    /**
     *  Business component APIM2_114.
     */
    public final static void APIM2_114(final SeleniumTestBase caller, final String param_docName, final String param_DocVisibilitySameAsAPI, final String param_summery, final String param_url, final String param_storeURL, final String param_Domain, final String param_publisherURL, final String param_summeryTwo, final String param_DocVisibilityPrivate, final String param_fileToUpload, final String param_DocVisibilityMyDomain, final String param_fileToUploadTwo, final String param_downImage, final String param_DownloadFilePath) throws Exception {
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("3000");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("2000");
        //Adding new document
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameOne = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameOne);
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.rdo_HowTo",false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_HowTo");
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_Inline");
        caller.pause("2000");
        //Set visibility level same as API
        caller.select("Browse_Doc.ele_ddVisibility",param_DocVisibilitySameAsAPI);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        //wait for content load
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocNameOne,false,"");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocNameOne);
        //check edit document page visibility
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        caller.pause("2000");
        caller.type("Browse_Doc.tf_Summary",param_summery);
        caller.click("Browse_Doc.rdo_SampleAndSDK");
        caller.pause("2000");
        caller.type("Browse_Doc.tf_URL",param_url);
        //Set visibility level same as API
        caller.select("Browse_Doc.ele_ddVisibility",param_DocVisibilitySameAsAPI);
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        caller.pause("3000");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        lib_Common.bc_StoreLogin(caller, param_Domain);
        caller.pause("3000");
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_Samples");
        caller.checkElementPresent("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocNameOne + "_PARAM," + "param_URLLink_PARAM:" + param_url,false,"");
        //Navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        /*
        Click
         object=APIPublisherHome.lnk_Browse
        Pause
         ms=3000
        CheckElementPresent
         object=APIPublisherHome.tf_APISearch
         stopOnFailure=false
         customErrorMessage=
        Type
         object=APIPublisherHome.tf_APISearch
         text=@APIName
        Click
         object=APIPublisherHome.btn_Search
        Pause
         ms=2000
        //Search for API name
        CheckElementPresent
         object=APIPublisherBrowse.lnk_APIName
         param_APIName=@APIName
         stopOnFailure=false
         customErrorMessage=
        Click
         object=APIPublisherBrowse.lnk_APIName
         param_APIName=@APIName
        Pause
         ms=2000
        CheckElementPresent
         object=APIPublisherBrowse.lnk_Overview
         stopOnFailure=false
         customErrorMessage=
        Click
         object=Browse_Doc.lnk_Doc
        Pause
         ms=2000
        Click
         object=Browse_Doc.btn_Update
         param_DocName=@DocNameOne
        //check edit document page visibility
        CheckElementPresent
         object=Browse_Doc.ele_lblType
         stopOnFailure=false
         customErrorMessage=
        CheckElementPresent
         object=Browse_Doc.ele_lblSource
         stopOnFailure=false
         customErrorMessage=
        Pause
         ms=2000
        Type
         object=Browse_Doc.tf_Summary
         text=@param_summeryTwo
        Click
         object=Browse_Doc.rdo_Inline
        Pause
         ms=2000
        //Set visibility leve Private
        Select
         object=Browse_Doc.ele_ddVisibility
         selectLocator=@param_DocVisibilityPrivate
        Pause
         ms=1000
        Click
         object=Browse_Doc.btn_UpdateCreatedDoc
        Pause
         ms=2000
        //Navigate to the store
        NavigateToURL
         url=APIStoreLogin
         param_storeURL=@param_storeURL
         ms=3000
        Call
         businessComponent=lib_Common.bc_SelectServer
         param_TenantOrAdmin=@param_Domain
        Call
         businessComponent=lib_Common.bc_StoreLogin
         param_TenanrOrAdmin=@param_Domain
        Pause
         ms=3000
        //Search for the API name
        CheckElementPresent
         object=APIStoreHome.tf_APISearchStore
         stopOnFailure=false
         customErrorMessage=
        Type
         object=APIStoreHome.tf_APISearchStore
         text=@APIName
        Pause
         ms=2000
        Click
         object=APIStoreHome.btn_SearchButtonStore
        Pause
         ms=2000
        Click
         object=APIStoreHome.lnk_PublishedAPI
         param_APIName=@APIName
         param_version=@APIVersion
        Click
         object=APIStoreAPIs.lnk_Documentations
        Pause
         ms=3000
        Click
         object=APIStoreDocumentation.lnk_Samples
        Pause
         ms=1000
        CheckElementPresent
         object=APIStoreDocumentation.ele_lblDocumentName
         param_docName=@DocNameOne
         stopOnFailure=false
         customErrorMessage=
        CheckElementPresent
         object=APIStoreDocumentation.lnk_ViewContent
         param_DocName=@DocNameOne
         stopOnFailure=false
         customErrorMessage=
        CheckElementPresent
         object=APIStoreDocumentation.ele_lblDocumentSummary
         param_docSummery=@param_summeryTwo
         stopOnFailure=false
         customErrorMessage=
        //Navigate to publisher
        NavigateToURL
         url=APIPublisherLogin
         param_publisherURL=@param_publisherURL
         ms=3000
        */
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("2000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocNameOne);
        //check edit document page visibility
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        caller.type("Browse_Doc.tf_Summary",param_summeryTwo);
        caller.click("Browse_Doc.rdo_File");
        //Type valid file path
         java.io.File fileTwo = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator + param_fileToUpload);
        String entirePathTwo = fileTwo.getAbsolutePath();
        caller.type("Browse_Doc.tf_BrowseFile",entirePathTwo);
        caller.pause("1000");
        //Set visibility level Visible to my domain
        caller.select("Browse_Doc.ele_ddVisibility",param_DocVisibilityMyDomain);
        caller.pause("1000");
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        caller.pause("2000");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        lib_Common.bc_StoreLogin(caller, param_Domain);
        caller.pause("3000");
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_Samples");
        caller.pause("1000");
        caller.checkElementPresent("APIStoreDocumentation.ele_lblDocumentName","param_docName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("APIStoreDocumentation.lnk_Download","param_docName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("APIStoreDocumentation.ele_lblDocumentSummary","param_docSummery_PARAM:" + param_summeryTwo,false,"");
        //Navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("2000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocNameOne);
        //check edit document page visibility
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        caller.type("Browse_Doc.tf_Summary",param_summery);
        caller.pause("1000");
        caller.click("Browse_Doc.rdo_PublicForum");
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_File");
        //Type valid file path
         java.io.File fileOne = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator + param_fileToUploadTwo);
        String entirePath = fileTwo.getAbsolutePath();
        caller.type("Browse_Doc.tf_BrowseFile",entirePath);
        caller.pause("1000");
        //Set visibility level same as API
        caller.select("Browse_Doc.ele_ddVisibility",param_DocVisibilitySameAsAPI);
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        caller.pause("3000");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        lib_Common.bc_StoreLogin(caller, param_Domain);
        caller.pause("3000");
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_PublicForum");
        caller.pause("1000");
        caller.checkElementPresent("APIStoreDocumentation.ele_lblDocumentName","param_docName_PARAM:" + DocNameOne,false,"");
        caller.click("APIStoreDocumentation.lnk_Download","param_docName_PARAM:" + DocNameOne);
        //Handling popup for fire fox browser
        String downImagePopup1 = param_downImage;
        if(caller.checkImagePresent(downImagePopup1,false)){
        caller.fireEvent("KEY%key=alt+s","2000");
        caller.fireEvent("KEY%key=alt+a","2000");
        caller.fireEvent("KEY%key=\n","1000");
        }
        //Check downloaded file
        caller.checkFileInfo(param_DownloadFilePath,"EXIST",false,"");
        //Navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("2000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocNameOne);
        //check edit document page visibility
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        caller.pause("2000");
        caller.type("Browse_Doc.tf_Summary",param_summeryTwo);
        caller.click("Browse_Doc.rdo_SupportForum");
        caller.pause("2000");
        caller.type("Browse_Doc.tf_URL",param_url);
        //Set visibility level Private
        caller.select("Browse_Doc.ele_ddVisibility",param_DocVisibilityPrivate);
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        caller.pause("3000");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        lib_Common.bc_StoreLogin(caller, param_Domain);
        caller.pause("3000");
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_SupportForum");
        caller.pause("1000");
        caller.checkElementPresent("APIStoreDocumentation.ele_lblDocumentSummary","param_docSummery_PARAM:" + param_summeryTwo,false,"");
        caller.checkElementPresent("APIStoreDocumentation.ele_lblDocumentName","param_docName_PARAM:" + DocNameOne,false,"");
        caller.click("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocNameOne + "_PARAM," + "param_URLLink_PARAM:" + param_url);
        caller.pause("4000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("4000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        //Navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");	
    }
    /**
     *  Business component APIM2_474.
     */
    public final static void APIM2_474(final SeleniumTestBase caller, final String param_docName, final String param_fileToUpload, final String param_DocVisibilitySameAsAPI, final String param_editContent, final String param_storeURL, final String param_Domain, final String param_publisherURL, final String param_url, final String param_other) throws Exception {
        //Edit an change a document which is type : "How To" and Source : File to Type : Other and Source : In-line.
        caller.writeToReport("Start of Test case APIM2_474");
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("3000");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("2000");
        //Adding new document
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameOne = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameOne);
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.rdo_HowTo",false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_HowTo");
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_File");
        caller.pause("5000");
        //Type valid file path
         java.io.File fileTwo = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator + param_fileToUpload);
        String entirePathTwo = fileTwo.getAbsolutePath();
        caller.pause("2000");
        caller.type("Browse_Doc.tf_BrowseFile",entirePathTwo);
        caller.pause("4000");
        //Set visibility level same as API
        caller.select("Browse_Doc.ele_ddVisibility",param_DocVisibilitySameAsAPI);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        //Check for added document
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocNameOne,false,"");
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.lnk_open","param_docName_PARAM:" + DocNameOne,false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocNameOne);
        //check edit document page visibility
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        caller.click("Browse_Doc.rdo_Other");
        caller.pause("2000");
        caller.type("Browse_Doc.tf_Other",param_other);
        caller.pause("1000");
        caller.click("Browse_Doc.rdo_Inline");
        caller.pause("2000");
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        caller.pause("1000");
        //wait for content load
        caller.checkElementPresent("Browse_Doc.ele_lblOther","param_docName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_Delete","param_DocName_PARAM:" + DocNameOne,false,"");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocNameOne);
        //Wait for content load
        caller.pause("2000");
        caller.selectWindow("Browse_Doc.newWindow1");
        caller.pause("2000");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + APIVersion,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblDocNameEditContent","param_docName_PARAM:" + DocNameOne,false,"");
        caller.selectFrame("Browse_Doc.frame1");
        caller.pause("4000");
        caller.click("Browse_Doc.tf_EditContent1");
        caller.checkElementPresent("Browse_Doc.tf_EditContent1",false,"");
        caller.pause("500");
        caller.type("Browse_Doc.tf_EditContent1",param_editContent);
        caller.pause("4000");
        caller.fireEvent("KEY%key=\t|key=\t|key=\n","5000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("2000");
        caller.checkElementPresent("Browse_Doc.ele_lblOther","param_docName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_Delete","param_DocName_PARAM:" + DocNameOne,false,"");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        lib_Common.bc_StoreLogin(caller, param_Domain);
        caller.pause("3000");
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_Other");
        caller.pause("6000");
        caller.checkElementPresent("APIStoreDocumentation.ele_lblDocumentName","param_docName_PARAM:" + DocNameOne,false,"");
        caller.click("APIStoreDocumentation.lnk_ViewContent","param_DocName_PARAM:" + DocNameOne);
        caller.pause("4000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("4000");
        caller.checkElementPresent("APIStoreDocumentation.ele_documentViewText","param_text_PARAM:" + param_editContent + "_PARAM," + "param_docName_PARAM:" + DocNameOne,false,"");
        caller.pause("6000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        //Navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.writeToReport("End of Test case APIM2_474");	
    }
    /**
     *  Business component APIM2_419.
     */
    public final static void APIM2_419(final SeleniumTestBase caller, final String param_docName, final String param_fileToUpload, final String param_DocVisibilitySameAsAPI, final String param_storeURL, final String param_Domain, final String param_url, final String param_publisherURL) throws Exception {
        //Edit and change a document which is type: "How To" and Source: "File" to Type: "Public forum" and Source : "URL".
        caller.writeToReport("Start of Test case APIM2_419");
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("3000");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("2000");
        //Adding new document
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameOne = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameOne);
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.rdo_HowTo",false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_HowTo");
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_File");
        caller.pause("5000");
        //Type valid file path
         java.io.File fileTwo = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator + param_fileToUpload);
        String entirePathTwo = fileTwo.getAbsolutePath();
        caller.pause("2000");
        caller.type("Browse_Doc.tf_BrowseFile",entirePathTwo);
        caller.pause("4000");
        //Set visibility level same as API
        caller.select("Browse_Doc.ele_ddVisibility",param_DocVisibilitySameAsAPI);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        //Check for added document
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocNameOne,false,"");
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.lnk_open","param_docName_PARAM:" + DocNameOne,false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocNameOne);
        //check edit document page visibility
        caller.checkElementPresent("Browse_Doc.ele_lblType",false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblSource",false,"");
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_PublicForum");
        caller.pause("1000");
        caller.type("Browse_Doc.tf_URL",param_url);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        caller.pause("3000");
        caller.click("Browse_Doc.btn_View","param_docName_PARAM:" + DocNameOne);
        caller.pause("3000");
        //Wait for content load
        caller.selectWindow("Browse_Doc.newWindow1");
        caller.pause("2000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.checkElementPresent("Browse_Doc.ele_lblPublicForum","param_docName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_View","param_docName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_Delete","param_DocName_PARAM:" + DocNameOne,false,"");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        lib_Common.bc_StoreLogin(caller, param_Domain);
        caller.pause("3000");
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_PublicForum");
        caller.pause("1000");
        caller.checkElementPresent("APIStoreDocumentation.ele_lblDocumentName","param_docName_PARAM:" + DocNameOne,false,"");
        caller.click("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocNameOne + "_PARAM," + "param_URLLink_PARAM:" + param_url);
        caller.pause("4000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("4000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        //Navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.writeToReport("End of Test case APIM2_419");	
    }
    /**
     *  Business component APIM2_997.
     */
    public final static void APIM2_997(final SeleniumTestBase caller, final String param_docName, final String param_summery, final String param_DocVisibilitySameAsAPI, final String param_storeURL, final String param_Domain, final String param_url, final String param_publisherURL) throws Exception {
        //Edit and change source of a 'How to' type API document to URL.
        caller.writeToReport("Start of Test case APIM2_997");
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("3000");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("2000");
        //Adding new document
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameOne = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameOne);
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.rdo_HowTo",false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_HowTo");
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_Inline");
        caller.pause("2000");
        caller.type("Browse_Doc.tf_Summary",param_summery);
        caller.pause("2000");
        //Set visibility level same as API
        caller.select("Browse_Doc.ele_ddVisibility",param_DocVisibilitySameAsAPI);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("3000");
        //wait for content load
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocNameOne,false,"");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocNameOne);
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_URL");
        caller.pause("1000");
        caller.type("Browse_Doc.tf_URL",param_url);
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        caller.pause("3000");
        caller.click("Browse_Doc.btn_View","param_docName_PARAM:" + DocNameOne);
        caller.pause("3000");
        //Wait for content load
        caller.selectWindow("Browse_Doc.newWindow1");
        caller.pause("2000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_View","param_docName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_Delete","param_DocName_PARAM:" + DocNameOne,false,"");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        lib_Common.bc_StoreLogin(caller, param_Domain);
        caller.pause("3000");
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_HowTo");
        caller.pause("1000");
        caller.checkElementPresent("APIStoreDocumentation.ele_lblDocumentName","param_docName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("APIStoreDocumentation.ele_lblDocumentSummary","param_docSummery_PARAM:" + param_summery,false,"");
        caller.click("APIStoreDocumentation.lnk_URL","param_docName_PARAM:" + DocNameOne + "_PARAM," + "param_URLLink_PARAM:" + param_url);
        caller.pause("4000");
        caller.selectWindow("Browse_Doc.window");
        caller.pause("4000");
        caller.fireEvent("KEY%key=ctrl+w","2000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        //Navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.writeToReport("End of Test case APIM2_997");	
    }
    /**
     *  Business component APIM2_1002.
     */
    public final static void APIM2_1002(final SeleniumTestBase caller, final String param_docName, final String param_summery, final String param_DocVisibilitySameAsAPI, final String param_fileToUpload, final String param_downImage, final String param_DownloadFilePath, final String param_storeURL, final String param_Domain, final String param_publisherURL) throws Exception {
        //Edit and change source of a "How to" type Inline document to 'File'
        caller.writeToReport("Start of Test case APIM2_1002");
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("3000");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("2000");
        //Adding new document
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameOne = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameOne);
        caller.pause("3000");
        caller.checkElementPresent("Browse_Doc.rdo_HowTo",false,"");
        caller.pause("3000");
        caller.click("Browse_Doc.rdo_HowTo");
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_Inline");
        caller.pause("2000");
        caller.type("Browse_Doc.tf_Summary",param_summery);
        caller.pause("2000");
        //Set visibility level same as API
        caller.select("Browse_Doc.ele_ddVisibility",param_DocVisibilitySameAsAPI);
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("1000");
        caller.pause("3000");
        //wait for content load
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocNameOne,false,"");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocNameOne);
        caller.pause("2000");
        caller.type("Browse_Doc.tf_Summary",param_summery);
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_File");
        caller.pause("2000");
        //Type valid file path
         java.io.File fileTwo = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator + param_fileToUpload);
        String entirePathTwo = fileTwo.getAbsolutePath();
        caller.pause("2000");
        caller.type("Browse_Doc.tf_BrowseFile",entirePathTwo);
        caller.pause("1000");
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        //wait for content load
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_open","param_docName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_Update","param_DocName_PARAM:" + DocNameOne,false,"");
        caller.checkElementPresent("Browse_Doc.btn_Delete","param_DocName_PARAM:" + DocNameOne,false,"");
        caller.click("Browse_Doc.lnk_open","param_docName_PARAM:" + DocNameOne);
        caller.pause("2000");
        //Handling popup for fire fox browser
        String downImagePopup2 = param_downImage;
        if(caller.checkImagePresent(downImagePopup2,false)){
        caller.fireEvent("KEY%key=alt+s","2000");
        caller.fireEvent("KEY%key=alt+a","2000");
        caller.fireEvent("KEY%key=\n","1000");
        }
        //Check downloaded file
        caller.checkFileInfo(param_DownloadFilePath,"EXIST",false,"");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_Domain);
        lib_Common.bc_StoreLogin(caller, param_Domain);
        caller.pause("3000");
        //Search for the API name
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",APIName);
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_PublishedAPI","param_APIName_PARAM:" + APIName + "_PARAM," + "param_version_PARAM:" + APIVersion);
        caller.click("APIStoreAPIs.lnk_Documentations");
        caller.pause("3000");
        caller.click("APIStoreDocumentation.lnk_HowTo");
        caller.checkElementPresent("APIStoreDocumentation.ele_lblDocumentName","param_docName_PARAM:" + DocNameOne,false,"");
        caller.click("APIStoreDocumentation.lnk_Download","param_docName_PARAM:" + DocNameOne);
        //Handling popup for fire fox browser
        String downImagePopup1 = param_downImage;
        if(caller.checkImagePresent(downImagePopup1,false)){
        caller.fireEvent("KEY%key=alt+s","2000");
        caller.fireEvent("KEY%key=alt+a","2000");
        caller.fireEvent("KEY%key=\n","1000");
        }
        //Check downloaded file
        caller.checkFileInfo(param_DownloadFilePath,"EXIST",false,"");
        //Navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.writeToReport("End of Test case APIM2_1002");	
    }
    /**
     *  Business component APIM2_100.
     */
    public final static void APIM2_100(final SeleniumTestBase caller, final String param_docName, final String param_Summery, final String param_publisherURL) throws Exception {
        //System should not allow to select 'in-line' source type given 'support forum' as the type
        caller.writeToReport("Start of Test case APIM2_100");
        //Retrieve the  stored API name && the Version
        String APIName = caller.retrieveString("var_APIName");
        String APIVersion = caller.retrieveString("var_APIVersion");
        caller.pause("3000");
        //Search for API Name
        caller.click("APIPublisherHome.lnk_Browse");
        caller.pause("3000");
        caller.checkElementPresent("APIPublisherHome.tf_APISearch",false,"");
        caller.type("APIPublisherHome.tf_APISearch",APIName);
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //Search for API name
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + APIName);
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.lnk_Overview",false,"");
        caller.click("Browse_Doc.lnk_Doc");
        caller.pause("2000");
        //Adding new document
        caller.click("Browse_Doc.btn_AddNewDocument");
        caller.pause("2000");
        //Generate Doc Name
        String DocNameOne = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocNameOne);
        caller.pause("3000");
        caller.type("Browse_Doc.tf_Summary",param_Summery);
        caller.pause("1000");
        caller.click("Browse_Doc.rdo_PublicForum");
        caller.pause("1000");
        caller.checkElementPresent("Browse_Doc.btn_InlineButtonDisabled",false,"");
        //Navigate to publisher
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_publisherURL,"3000");
        caller.writeToReport("End of Test case APIM2_100");	
    }
    /**
     *  Business component APIM2_1011.
     */
    public final static void APIM2_1011(final SeleniumTestBase caller, final String param_publisherURL, final String param_publisherOneOfTenentOneOrAdmin, final String param_keyWordDoc, final String param_searchTearmMissing, final String param_storeURL, final String param_serverNameOfTenantOrAdmin, final String param_storeOneOfTenanrOneOrAdmin, final String param_APIName, final String param_APIContext, final String param_APIVersionOne, final String param_APIvisibility, final String param_APIImageName, final String param_TagName, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_productionEndpoint, final String param_keyWordNo) throws Exception {
        caller.writeToReport("Start of execution of TC APIM2_1011");
        lib_Common.bc_PublisherLogin(caller, param_publisherURL,param_publisherOneOfTenentOneOrAdmin);
        //an api should be available for the search bar to appear
        //creation of API
        lib_Common.bc_APIPublisher_AddAPI_DesignPhase_WitoutAutoGenAPINameAndContext(caller, param_APIName,param_APIContext,param_APIVersionOne,param_APIvisibility,param_APIImageName,param_TagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_keyWordNo,"",param_keyWordNo,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_keyWordNo,param_keyWordNo,"");
        //end of creation of API
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherHome.lnk_Browse");
        //wait for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",param_keyWordDoc);
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblSearchTermIsMissing","param_errorSearchTearmMissing_PARAM:" + param_searchTearmMissing,false,"");
        //Navigate to store URL
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameOfTenantOrAdmin);
        caller.type("APIStoreHome.tf_APISearchStore",param_keyWordDoc);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.ele_lblSearchTermIsMissing","param_searchTermIsMissing_PARAM:" + param_searchTearmMissing,false,"");
        caller.writeToReport("End of execution of TC APIM2_1011");	
    }
    /**
     *  Business component APIM2_1036.
     */
    public final static void APIM2_1036(final SeleniumTestBase caller, final String param_storeURL, final String param_serverName, final String param_userName, final String param_password) throws Exception {
        //Display error messages when mandatory fields are not filled in
        caller.writeToReport("Start  Executing APIM2_1036");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + param_serverName);
        caller.click("APIStoreHome.btn_SignUp");
        String varSelfSignUpUserName = param_userName+caller.generateData("int",3);
        //storing API name
        caller.store("keySelfSignUpUserName","String",varSelfSignUpUserName);
        //type user name
        caller.type("APIStoreSignUp.tf_UserName",varSelfSignUpUserName);
        caller.type("APIStoreSignUp.tf_Password",param_password);
        caller.type("APIStoreSignUp.tf_ReTypePassword",param_password);
        caller.click("APIStoreSignUp.btn_Submit");
        //Waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreSignUp.ele_lblFirstNameRequired",false,"");
        caller.checkElementPresent("APIStoreSignUp.ele_lblLastNameRequired",false,"");
        caller.checkElementPresent("APIStoreSignUp.ele_lblEmailNameRequired",false,"");
        caller.writeToReport("End  Executing APIM2_1036");	
    }
    /**
     *  Business component APIM2_1050.
     */
    public final static void APIM2_1050(final SeleniumTestBase caller, final String param_publisherURL, final String param_storeURL, final String param_publisherOneOfTenentOneOrAdmin, final String param_serverNameOfTenantOrAdmin, final String param_storeOneOfTenanrOneOrAdmin, final String param_apiName, final String param_apiContext, final String param_apiVersionOne, final String param_apiVisibilityPublic, final String param_apiImage, final String param_apiTagName, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_productionEndpoint, final String param_keyYes, final String param_sandboxEndpoint, final String param_keyWordNo, final String param_docNameDocOne, final String param_docSummeryDocOne, final String param_docOneContent, final String param_docNameDocFour, final String param_doc4PathToUpload, final String param_docNameDocEight, final String param_doc8PathToUpload, final String param_docNameDocTwo, final String param_docTwoContent, final String param_docNameDocFive, final String param_doc5PathToUpload, final String param_docNameDocSeven, final String param_doc7PathToUpload, final String param_docNameDocThree, final String param_doc3PathToUpload, final String param_docNameDocSix, final String param_doc6PathToUpload, final String param_searchForDocumentKeyWordOne, final String param_searchForDocumentKeyWordFour, final String param_searchForDocumentKeyWordTen, final String param_keyWordViewContent, final String param_provider, final String param_keyWordDownload) throws Exception {
        caller.writeToReport("Start of execution of TC APIM2_1050");
        caller.writeToReport("Start of precondition");
        lib_Common.bc_PublisherLogin(caller, param_publisherURL,param_publisherOneOfTenentOneOrAdmin);
        //start of creation of api 1
        lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke(caller, param_apiName,param_apiContext,param_apiVersionOne,param_apiVisibilityPublic,param_apiImage,param_apiTagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        String var_APINameOne = caller.retrieveString("key_APINameDesign");
        caller.store("key_APIOne","String",var_APINameOne);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_keyYes,param_sandboxEndpoint,param_keyWordNo,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_keyWordNo,param_keyWordNo,"");
        //end of creation of api 1
        //start of creation of api 2
        lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke(caller, param_apiName,param_apiContext,param_apiVersionOne,param_apiVisibilityPublic,param_apiImage,param_apiTagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        String var_APINameTwo = caller.retrieveString("key_APINameDesign");
        caller.store("key_APITwo","String",var_APINameTwo);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_keyYes,param_sandboxEndpoint,param_keyWordNo,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_keyWordNo,param_keyWordNo,"");
        //end of creation of api 2
        //start of creation of api 3
        lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke(caller, param_apiName,param_apiContext,param_apiVersionOne,param_apiVisibilityPublic,param_apiImage,param_apiTagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        String var_APINameThree = caller.retrieveString("key_APINameDesign");
        caller.store("key_APIThree","String",var_APINameThree);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_keyYes,param_sandboxEndpoint,param_keyWordNo,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_keyWordNo,param_keyWordNo,"");
        //end of creation of api 3
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherHome.lnk_Browse");
        //wait for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",var_APINameOne);
        //wait for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + var_APINameOne);
        //wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        //wait for content load
        caller.pause("2000");
        //API1 document 1
        caller.click("Browse_Doc.btn_AddNewDocument");
        //wait for content load
        caller.pause("1000");
        caller.type("Browse_Doc.tf_DocName",param_docNameDocOne);
        //Insert summery for document one
        caller.type("Browse_Doc.tf_Summary",param_docSummeryDocOne);
        //wait for content load
        caller.pause("1000");
        /*
        Click
         object=Browse_Doc.btn_EditContent
         param_DocName=@param_docNameDocOne
        */
        //wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_AddDocument");
        //wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + param_docNameDocOne);
        //wait for content load
        caller.pause("2000");
        caller.selectWindow("Browse_Doc.newWindow1");
        //wait for content load
        caller.pause("2000");
        caller.selectFrame("Browse_Doc.frame1");
        //wait for content load
        caller.pause("2000");
        caller.type("Browse_Doc.tf_EditContent1",param_docOneContent);
        caller.pause("4000");
        caller.fireEvent("KEY%key=\t|key=\t|key=\n","5000");
        caller.switchUser("default");
        //wait for content load
        caller.pause("1000");
        caller.selectWindow("Browse_Doc.defaultWindow");
        //wait for content load
        caller.pause("2000");
        //Add API1 document 4
        caller.click("Browse_Doc.btn_AddNewDocument");
        //wait for content load
        caller.pause("2000");
        caller.type("Browse_Doc.tf_DocName",param_docNameDocFour);
        //wait for content load
        caller.pause("1000");
        caller.checkElementPresent("Browse_Doc.rdo_HowTo",false,"");
        caller.click("Browse_Doc.rdo_HowTo");
        //wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_File");
        //wait for content load
        caller.pause("5000");
        //Type valid file path
         java.io.File doc4path = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator + param_doc4PathToUpload);
        String entirePathDoc4 = doc4path.getAbsolutePath();
        //wait for content load
        caller.pause("2000");
        caller.type("Browse_Doc.tf_BrowseFile",entirePathDoc4);
        //wait for content load
        caller.pause("4000");
        caller.click("Browse_Doc.btn_AddDocument");
        //wait for content load
        caller.pause("2000");
        //Check for added document
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + param_docNameDocFour,false,"");
        //Add API1 document 8
        caller.click("Browse_Doc.btn_AddNewDocument");
        //wait for content load
        caller.pause("2000");
        caller.type("Browse_Doc.tf_DocName",param_docNameDocEight);
        //wait for content load
        caller.pause("1000");
        caller.checkElementPresent("Browse_Doc.rdo_HowTo",false,"");
        caller.click("Browse_Doc.rdo_HowTo");
        //wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_File");
        //wait for content load
        caller.pause("5000");
        //Type valid file path
         java.io.File doc8path = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator + param_doc8PathToUpload);
        String entirePathDoc8 = doc8path.getAbsolutePath();
        //wait for content load
        caller.pause("2000");
        caller.type("Browse_Doc.tf_BrowseFile",entirePathDoc8);
        //wait for content load
        caller.pause("4000");
        caller.click("Browse_Doc.btn_AddDocument");
        //wait for content load
        caller.pause("2000");
        //Check for added document
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + param_docNameDocEight,false,"");
        //Navigate back to add documents with API2
        caller.click("APIPublisherHome.lnk_Browse");
        //wait for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",var_APINameTwo);
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + var_APINameTwo);
        //wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        //API2 document 2
        caller.click("Browse_Doc.btn_AddNewDocument");
        //wait for content load
        caller.pause("1000");
        caller.type("Browse_Doc.tf_DocName",param_docNameDocTwo);
        //wait for content load
        caller.pause("1000");
        caller.click("Browse_Doc.btn_AddDocument");
        /*
        Click
         object=Browse_Doc.btn_EditContent
         param_DocName=@param_docNameDocTwo
        //wait for content load
        Pause
         ms=2000
        Click
         object=Browse_Doc.btn_AddDocument
        */
        //wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + param_docNameDocTwo);
        //wait for content load
        caller.pause("2000");
        caller.selectWindow("Browse_Doc.newWindow1");
        //wait for content load
        caller.pause("2000");
        caller.selectFrame("Browse_Doc.frame1");
        //wait for content load
        caller.pause("2000");
        caller.type("Browse_Doc.tf_EditContent1",param_docTwoContent);
        caller.pause("4000");
        caller.fireEvent("KEY%key=\t|key=\t|key=\n","5000");
        caller.switchUser("default");
        //wait for content load
        caller.pause("1000");
        caller.selectWindow("Browse_Doc.defaultWindow");
        //wait for content load
        caller.pause("2000");
        //Add API2 document 5
        caller.click("Browse_Doc.btn_AddNewDocument");
        //wait for content load
        caller.pause("2000");
        caller.type("Browse_Doc.tf_DocName",param_docNameDocFive);
        //wait for content load
        caller.pause("1000");
        caller.checkElementPresent("Browse_Doc.rdo_HowTo",false,"");
        caller.click("Browse_Doc.rdo_HowTo");
        //wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_File");
        //wait for content load
        caller.pause("5000");
        //Type valid file path
         java.io.File doc5path = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator + param_doc5PathToUpload);
        String entirePathDoc5 = doc5path.getAbsolutePath();
        //wait for content load
        caller.pause("2000");
        caller.type("Browse_Doc.tf_BrowseFile",entirePathDoc5);
        //wait for content load
        caller.pause("4000");
        caller.click("Browse_Doc.btn_AddDocument");
        //wait for content load
        caller.pause("2000");
        //Check for added document
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + param_docNameDocFive,false,"");
        //Add API2 document 7
        caller.click("Browse_Doc.btn_AddNewDocument");
        //wait for content load
        caller.pause("2000");
        caller.type("Browse_Doc.tf_DocName",param_docNameDocSeven);
        //wait for content load
        caller.pause("1000");
        caller.checkElementPresent("Browse_Doc.rdo_HowTo",false,"");
        caller.click("Browse_Doc.rdo_HowTo");
        //wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_File");
        //wait for content load
        caller.pause("5000");
        //Type valid file path
         java.io.File doc7path = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator + param_doc7PathToUpload);
        String entirePathDoc7 = doc7path.getAbsolutePath();
        //wait for content load
        caller.pause("2000");
        caller.type("Browse_Doc.tf_BrowseFile",entirePathDoc7);
        //wait for content load
        caller.pause("4000");
        caller.click("Browse_Doc.btn_AddDocument");
        //wait for content load
        caller.pause("2000");
        //Check for added document
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + param_docNameDocSeven,false,"");
        //Navigate back to add documents with API3
        caller.click("APIPublisherHome.lnk_Browse");
        //wait for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",var_APINameThree);
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + var_APINameThree);
        //wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        //Add API3 document 3
        caller.click("Browse_Doc.btn_AddNewDocument");
        //wait for content load
        caller.pause("2000");
        caller.type("Browse_Doc.tf_DocName",param_docNameDocThree);
        //wait for content load
        caller.pause("1000");
        caller.checkElementPresent("Browse_Doc.rdo_HowTo",false,"");
        caller.click("Browse_Doc.rdo_HowTo");
        //wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_File");
        //wait for content load
        caller.pause("5000");
        //Type valid file path
         java.io.File doc3path = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator + param_doc3PathToUpload);
        String entirePathDoc3 = doc3path.getAbsolutePath();
        //wait for content load
        caller.pause("2000");
        caller.type("Browse_Doc.tf_BrowseFile",entirePathDoc3);
        //wait for content load
        caller.pause("4000");
        caller.click("Browse_Doc.btn_AddDocument");
        //wait for content load
        caller.pause("2000");
        //Check for added document
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + param_docNameDocThree,false,"");
        //Add API3 document 6
        caller.click("Browse_Doc.btn_AddNewDocument");
        //wait for content load
        caller.pause("2000");
        caller.type("Browse_Doc.tf_DocName",param_docNameDocSix);
        //wait for content load
        caller.pause("1000");
        caller.checkElementPresent("Browse_Doc.rdo_HowTo",false,"");
        caller.click("Browse_Doc.rdo_HowTo");
        //wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_File");
        //wait for content load
        caller.pause("5000");
        //Type valid file path
         java.io.File doc6path = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator + param_doc6PathToUpload);
        String entirePathDoc6 = doc6path.getAbsolutePath();
        //wait for content load
        caller.pause("2000");
        caller.type("Browse_Doc.tf_BrowseFile",entirePathDoc6);
        //wait for content load
        caller.pause("4000");
        caller.click("Browse_Doc.btn_AddDocument");
        //wait for content load
        caller.pause("2000");
        //Check for added document
        caller.checkElementPresent("Browse_Doc.ele_lblHowTo","param_docName_PARAM:" + param_docNameDocSix,false,"");
        caller.writeToReport("End of precondition");
        //wait for content load
        caller.pause("2000");
        //search using document keyword
        caller.click("APIPublisherHome.lnk_Browse");
        //wait for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",param_searchForDocumentKeyWordOne);
        //wait for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("2000");
        //verify the search results in publisher for key word One
        //verify Document One name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_DocumentName","param_documentName_PARAM:" + param_docNameDocOne,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_viewContent","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_keyWordViewContent_PARAM:" + param_keyWordViewContent,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APIName","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_APIName_PARAM:" + var_APINameOne,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APINameWithVersion","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_versionOfAPI_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //verify Document Two name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_DocumentName","param_documentName_PARAM:" + param_docNameDocTwo,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_viewContent","param_documentName_PARAM:" + param_docNameDocTwo + "_PARAM," + "param_keyWordViewContent_PARAM:" + param_keyWordViewContent,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APIName","param_documentName_PARAM:" + param_docNameDocTwo + "_PARAM," + "param_APIName_PARAM:" + var_APINameTwo,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APINameWithVersion","param_documentName_PARAM:" + param_docNameDocTwo + "_PARAM," + "param_APIName_PARAM:" + var_APINameTwo + "_PARAM," + "param_versionOfAPI_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocTwo + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //verify Document Three name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_DocumentName","param_documentName_PARAM:" + param_docNameDocThree,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_download","param_documentName_PARAM:" + param_docNameDocThree + "_PARAM," + "param_keyWordDownload_PARAM:" + param_keyWordDownload,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APIName","param_documentName_PARAM:" + param_docNameDocThree + "_PARAM," + "param_APIName_PARAM:" + var_APINameThree,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APINameWithVersion","param_documentName_PARAM:" + param_docNameDocThree + "_PARAM," + "param_APIName_PARAM:" + var_APINameThree + "_PARAM," + "param_versionOfAPI_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocThree + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //verify Document Four name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_DocumentName","param_documentName_PARAM:" + param_docNameDocFour,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_download","param_documentName_PARAM:" + param_docNameDocFour + "_PARAM," + "param_keyWordDownload_PARAM:" + param_keyWordDownload,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APIName","param_documentName_PARAM:" + param_docNameDocFour + "_PARAM," + "param_APIName_PARAM:" + var_APINameOne,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APINameWithVersion","param_documentName_PARAM:" + param_docNameDocFour + "_PARAM," + "param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_versionOfAPI_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocFour + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //verify Document Five name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_DocumentName","param_documentName_PARAM:" + param_docNameDocFive,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_download","param_documentName_PARAM:" + param_docNameDocFive + "_PARAM," + "param_keyWordDownload_PARAM:" + param_keyWordDownload,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APIName","param_documentName_PARAM:" + param_docNameDocFive + "_PARAM," + "param_APIName_PARAM:" + var_APINameTwo,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APINameWithVersion","param_documentName_PARAM:" + param_docNameDocFive + "_PARAM," + "param_APIName_PARAM:" + var_APINameTwo + "_PARAM," + "param_versionOfAPI_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocFive + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //wait for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.btn_Search");
        //verify Document Six name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_DocumentName","param_documentName_PARAM:" + param_docNameDocSix,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_download","param_documentName_PARAM:" + param_docNameDocSix + "_PARAM," + "param_keyWordDownload_PARAM:" + param_keyWordDownload,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APIName","param_documentName_PARAM:" + param_docNameDocSix + "_PARAM," + "param_APIName_PARAM:" + var_APINameThree,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APINameWithVersion","param_documentName_PARAM:" + param_docNameDocSix + "_PARAM," + "param_APIName_PARAM:" + var_APINameThree + "_PARAM," + "param_versionOfAPI_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocSix + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //verify Document Seven name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_DocumentName","param_documentName_PARAM:" + param_docNameDocSeven,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_download","param_documentName_PARAM:" + param_docNameDocSeven + "_PARAM," + "param_keyWordDownload_PARAM:" + param_keyWordDownload,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APIName","param_documentName_PARAM:" + param_docNameDocSeven + "_PARAM," + "param_APIName_PARAM:" + var_APINameTwo,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APINameWithVersion","param_documentName_PARAM:" + param_docNameDocSeven + "_PARAM," + "param_APIName_PARAM:" + var_APINameTwo + "_PARAM," + "param_versionOfAPI_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocSeven + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //verify Document Eight name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_DocumentName","param_documentName_PARAM:" + param_docNameDocEight,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_download","param_documentName_PARAM:" + param_docNameDocEight + "_PARAM," + "param_keyWordDownload_PARAM:" + param_keyWordDownload,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APIName","param_documentName_PARAM:" + param_docNameDocEight + "_PARAM," + "param_APIName_PARAM:" + var_APINameOne,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APINameWithVersion","param_documentName_PARAM:" + param_docNameDocEight + "_PARAM," + "param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_versionOfAPI_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocEight + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //End of verification of the search for the results in publisher for key word One
        //Navigate to store URL
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameOfTenantOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_storeOneOfTenanrOneOrAdmin);
        //wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",param_searchForDocumentKeyWordOne);
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait for search content load
        caller.pause("2000");
        //verify the search results in store for key word One
        //verify Document One name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_documentName","param_documentName_PARAM:" + param_docNameDocOne,false,"");
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_documentSummary","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_summaryContent_PARAM:" + param_docSummeryDocOne,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_viewContent","param_documentName_PARAM:" + param_docNameDocOne,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_APINameOrVersion_PARAM:" + var_APINameOne,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_APINameOrVersion_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //verify Document Two name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_documentName","param_documentName_PARAM:" + param_docNameDocTwo,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_viewContent","param_documentName_PARAM:" + param_docNameDocTwo,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocTwo + "_PARAM," + "param_APINameOrVersion_PARAM:" + var_APINameTwo,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocTwo + "_PARAM," + "param_APINameOrVersion_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocTwo + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //verify Document Three name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_documentName","param_documentName_PARAM:" + param_docNameDocThree,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_download","param_documentName_PARAM:" + param_docNameDocThree,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocThree + "_PARAM," + "param_APINameOrVersion_PARAM:" + var_APINameThree,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocThree + "_PARAM," + "param_APINameOrVersion_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocThree + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //verify Document Four name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_documentName","param_documentName_PARAM:" + param_docNameDocFour,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_download","param_documentName_PARAM:" + param_docNameDocFour,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocFour + "_PARAM," + "param_APINameOrVersion_PARAM:" + var_APINameOne,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocFour + "_PARAM," + "param_APINameOrVersion_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocFour + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //verify Document Five name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_documentName","param_documentName_PARAM:" + param_docNameDocFive,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_download","param_documentName_PARAM:" + param_docNameDocFive,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocFive + "_PARAM," + "param_APINameOrVersion_PARAM:" + var_APINameTwo,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocFive + "_PARAM," + "param_APINameOrVersion_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocFive + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //verify Document Six name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_documentName","param_documentName_PARAM:" + param_docNameDocSix,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_download","param_documentName_PARAM:" + param_docNameDocSix,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocSix + "_PARAM," + "param_APINameOrVersion_PARAM:" + var_APINameThree,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocSix + "_PARAM," + "param_APINameOrVersion_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocSix + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //verify Document Seven name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_documentName","param_documentName_PARAM:" + param_docNameDocSeven,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_download","param_documentName_PARAM:" + param_docNameDocSeven,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocSeven + "_PARAM," + "param_APINameOrVersion_PARAM:" + var_APINameTwo,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocSeven + "_PARAM," + "param_APINameOrVersion_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocSeven + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //verify Document Eight name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_documentName","param_documentName_PARAM:" + param_docNameDocEight,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_download","param_documentName_PARAM:" + param_docNameDocEight,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocEight + "_PARAM," + "param_APINameOrVersion_PARAM:" + var_APINameOne,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocEight + "_PARAM," + "param_APINameOrVersion_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocEight + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //End of verification of the search for the results in store for key word One
        //navigate to publisher to search using different keyword
        lib_Common.bc_PublisherLogin(caller, param_publisherURL,param_publisherOneOfTenentOneOrAdmin);
        //search using document keyword
        caller.click("APIPublisherHome.lnk_Browse");
        //wait for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",param_searchForDocumentKeyWordFour);
        //wait for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("2000");
        //verify the search results in publisher for key word Four
        //verify Document three name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_DocumentName","param_documentName_PARAM:" + param_docNameDocThree,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_download","param_documentName_PARAM:" + param_docNameDocThree + "_PARAM," + "param_keyWordDownload_PARAM:" + param_keyWordDownload,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APIName","param_documentName_PARAM:" + param_docNameDocThree + "_PARAM," + "param_APIName_PARAM:" + var_APINameThree,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APINameWithVersion","param_documentName_PARAM:" + param_docNameDocThree + "_PARAM," + "param_APIName_PARAM:" + var_APINameThree + "_PARAM," + "param_versionOfAPI_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocThree + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //verify Document Four name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_DocumentName","param_documentName_PARAM:" + param_docNameDocFour,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_download","param_documentName_PARAM:" + param_docNameDocFour + "_PARAM," + "param_keyWordDownload_PARAM:" + param_keyWordDownload,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APIName","param_documentName_PARAM:" + param_docNameDocFour + "_PARAM," + "param_APIName_PARAM:" + var_APINameOne,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APINameWithVersion","param_documentName_PARAM:" + param_docNameDocFour + "_PARAM," + "param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_versionOfAPI_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocFour + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //verify Document Five name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_DocumentName","param_documentName_PARAM:" + param_docNameDocFive,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_download","param_documentName_PARAM:" + param_docNameDocFive + "_PARAM," + "param_keyWordDownload_PARAM:" + param_keyWordDownload,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APIName","param_documentName_PARAM:" + param_docNameDocFive + "_PARAM," + "param_APIName_PARAM:" + var_APINameTwo,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APINameWithVersion","param_documentName_PARAM:" + param_docNameDocFive + "_PARAM," + "param_APIName_PARAM:" + var_APINameTwo + "_PARAM," + "param_versionOfAPI_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocFive + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //End of verification of the search for the results in publisher for key word Four
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameOfTenantOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_storeOneOfTenanrOneOrAdmin);
        //wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",param_searchForDocumentKeyWordFour);
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait for search content load
        caller.pause("2000");
        //verify the search results in store for key word Four
        //verify Document Three name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_documentName","param_documentName_PARAM:" + param_docNameDocThree,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_download","param_documentName_PARAM:" + param_docNameDocThree,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocThree + "_PARAM," + "param_APINameOrVersion_PARAM:" + var_APINameThree,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocThree + "_PARAM," + "param_APINameOrVersion_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocThree + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //verify Document Four name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_documentName","param_documentName_PARAM:" + param_docNameDocFour,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_download","param_documentName_PARAM:" + param_docNameDocFour,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocFour + "_PARAM," + "param_APINameOrVersion_PARAM:" + var_APINameOne,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocFour + "_PARAM," + "param_APINameOrVersion_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocFour + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //verify Document Five name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_documentName","param_documentName_PARAM:" + param_docNameDocFive,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_download","param_documentName_PARAM:" + param_docNameDocFive,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocFive + "_PARAM," + "param_APINameOrVersion_PARAM:" + var_APINameTwo,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocFive + "_PARAM," + "param_APINameOrVersion_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocFive + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //End of verification of the search for the results in store for key word Four
        //navigate to publisher to search using different keyword
        lib_Common.bc_PublisherLogin(caller, param_publisherURL,param_publisherOneOfTenentOneOrAdmin);
        //search using document keyword
        caller.click("APIPublisherHome.lnk_Browse");
        //wait for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",param_searchForDocumentKeyWordTen);
        //wait for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("2000");
        //verify Document Eight name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_DocumentName","param_documentName_PARAM:" + param_docNameDocEight,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_download","param_documentName_PARAM:" + param_docNameDocEight + "_PARAM," + "param_keyWordDownload_PARAM:" + param_keyWordDownload,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APIName","param_documentName_PARAM:" + param_docNameDocEight + "_PARAM," + "param_APIName_PARAM:" + var_APINameOne,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APINameWithVersion","param_documentName_PARAM:" + param_docNameDocEight + "_PARAM," + "param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_versionOfAPI_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocEight + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //End of verification of the search for the results in publisher for key word One
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameOfTenantOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_storeOneOfTenanrOneOrAdmin);
        //wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.type("APIStoreHome.tf_APISearchStore",param_searchForDocumentKeyWordTen);
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait for search content load
        caller.pause("2000");
        //verify Document Eight name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_documentName","param_documentName_PARAM:" + param_docNameDocEight,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_download","param_documentName_PARAM:" + param_docNameDocEight,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocEight + "_PARAM," + "param_APINameOrVersion_PARAM:" + var_APINameOne,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocEight + "_PARAM," + "param_APINameOrVersion_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocEight + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //End of verification of the search for the results in store for key word One
        caller.writeToReport("End of execution of TC APIM2_1050");	
    }
    /**
     *  Business component APIM2_1034.
     */
    public final static void APIM2_1034(final SeleniumTestBase caller, final String param_storeURL, final String param_serverName, final String param_userName, final String param_passwordShort, final String param_passwordLong, final String param_longPasswordError, final String param_shortPasswordError) throws Exception {
        //Verify the limitation of the password length during the user signup in store
        caller.writeToReport("Start  Executing APIM2_1034");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + param_serverName);
        caller.click("APIStoreHome.btn_SignUp");
        String varSelfSignUpUserName = param_userName+caller.generateData("int",3);
        //storing API name
        caller.store("keySelfSignUpUserName","String",varSelfSignUpUserName);
        //type user name
        caller.type("APIStoreSignUp.tf_UserName",varSelfSignUpUserName);
        caller.type("APIStoreSignUp.tf_Password",param_passwordShort);
        caller.pause("2000");
        caller.checkElementPresent("APIStoreSignUp.ele_lblErrorMsgPassword","param_ErrorMessage_PARAM:" + param_shortPasswordError,false,"");
        caller.type("APIStoreSignUp.tf_Password",param_passwordLong);
        caller.pause("2000");
        caller.checkElementPresent("APIStoreSignUp.ele_lblErrorMsgPassword","param_ErrorMessage_PARAM:" + param_longPasswordError,false,"");
        caller.writeToReport("End  Executing APIM2_1034");	
    }
    /**
     *  Business component APIM2_1032.
     */
    public final static void APIM2_1032(final SeleniumTestBase caller, final String param_storeURL, final String param_adminOrTenantOne, final String param_userName, final String param_password, final String param_firstName, final String param_lastName, final String param_email, final String param_organizationName, final String param_address, final String param_country, final String param_landPhone, final String param_mobilePhone, final String param_IM, final String param_URL) throws Exception {
        caller.writeToReport("Start of APIM2_1032");
        //APIM2_661: A User should be able to provide required information and sign up in to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_adminOrTenantOne);
        //Wait for Content load
        caller.pause("3000");
        String varSignUpUserNameOne = param_userName+caller.generateData("int",4);
        //storing API name
        caller.store("key_SignUpUserNameOne","String",varSignUpUserNameOne);
        lib_Common.bc_StoreSignUpUserWithMoreDetails(caller, varSignUpUserNameOne,param_password,param_firstName,param_lastName,param_email,param_organizationName,param_address,param_country,param_landPhone,param_mobilePhone,param_IM,param_URL);
        //Wait for Content load
        caller.pause("3000");
        caller.type("APIStoreSignUp.tf_userNameLogIn",varSignUpUserNameOne);
        caller.type("APIStoreSignUp.tf_PasswordLogIn",param_password);
        caller.click("APIStoreSignUp.lnk_Login");
        //Waiting for content load
        caller.pause("2000");
        lib_Common.bc_SelectServer(caller, param_adminOrTenantOne);
        //Waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreHome.lnk_APIs",false,"");
        caller.writeToReport("End of APIM2_1032");	
    }
    /**
     *  Business component APIM2_1051.
     */
    public final static void APIM2_1051(final SeleniumTestBase caller, final String param_storeURL, final String param_serverNameOfTenantOrAdmin, final String param_storeOneOfTenanrOneOrAdmin, final String param_searchForDocumentKeyWordTest, final String param_docNameDocOne, final String param_docSummeryDocOne, final String param_APINameOneRetrived, final String param_apiVersionOne, final String param_provider, final String param_statusCreated, final String param_noMatchingResults, final String param_publisherOneOfTenentOneOrAdmin, final String param_publisherURL) throws Exception {
        caller.writeToReport("Start of execution of TC APIM2_1051");
        //Navigate to store URL
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameOfTenantOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_storeOneOfTenanrOneOrAdmin);
        //wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        //search documents for key word test
        caller.type("APIStoreHome.tf_APISearchStore",param_searchForDocumentKeyWordTest);
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait for search content load
        caller.pause("2000");
        //verify the search results in store for key word One
        //verify Document One name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_documentName","param_documentName_PARAM:" + param_docNameDocOne,false,"");
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_documentSummary","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_summaryContent_PARAM:" + param_docSummeryDocOne,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_viewContent","param_documentName_PARAM:" + param_docNameDocOne,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_APINameOrVersion_PARAM:" + param_APINameOneRetrived,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_APINameOrVersion_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        lib_Common.bc_PublisherLogin(caller, param_publisherURL,param_publisherOneOfTenentOneOrAdmin);
        //Verify redirected to browse page
        caller.checkElementPresent("APIPublisherHome.lnk_Browse",false,"");
        caller.click("APIPublisherHome.lnk_Browse");
        lib_Common.bc_APIPublisherSearch(caller, param_APINameOneRetrived,param_APINameOneRetrived,param_apiVersionOne);
        //Verify the api details in browse page
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + param_APINameOneRetrived,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + param_APINameOneRetrived);
        //Wait for content load
        caller.pause("2000");
        //verify the availability of Lifestyle tab
        caller.checkElementPresent("APIPublisherBrowse.btn_Lifecycle",false,"");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //Wait for content load
        caller.pause("2000");
        caller.select("browseLifecycle.ele_ddSelectState",param_statusCreated);
        //Wait for content load
        caller.pause("2000");
        caller.click("browseLifecycle.btn_Update");
        caller.checkElementPresent("browseLifecycle.ele_lblUpdateSuccessMessage",false,"");
        //Wait for content load
        caller.pause("2000");
        //Navigate to store URL
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameOfTenantOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_storeOneOfTenanrOneOrAdmin);
        //wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        //search documents for key word test
        caller.type("APIStoreHome.tf_APISearchStore",param_APINameOneRetrived);
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait for search content load
        caller.pause("2000");
        //verify the non-availability of the perticular API
        caller.checkObjectProperty("APIStoreAPIs.lnk_APIName","param_APIName_PARAM:" + param_APINameOneRetrived,"ELEMENTPRESENT","false",false,"");
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        //search documents for key word test
        caller.type("APIStoreHome.tf_APISearchStore",param_searchForDocumentKeyWordTest);
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait for search content load
        caller.pause("2000");
        //verify the non-availability of document one
        caller.checkObjectProperty("APIStoreHome.ele_lblDocumentSearchResult_documentName","param_documentName_PARAM:" + param_docNameDocOne,"ELEMENTPRESENT","false",false,"");
        //verifu that No Matching Results message appears
        caller.checkElementPresent("APIStoreHome.ele_lblSearchTermIsMissing","param_searchTermIsMissing_PARAM:" + param_noMatchingResults,false,"");
        caller.writeToReport("End of execution of TC APIM2_1051");	
    }
    /**
     *  Business component APIM2_1031.
     */
    public final static void APIM2_1031(final SeleniumTestBase caller, final String param_storeURL, final String param_serverName, final String param_userNameShort) throws Exception {
        caller.writeToReport("Start  Executing APIM2_1031");
        //Verify the limitation of the password length during the user signup in store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //Waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.img_APIStoreAvailableServer","param_serverName_PARAM:" + param_serverName);
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        caller.click("APIStoreHome.btn_Logout");
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SignUp");
        String varSelfSignUpUserName = param_userNameShort+caller.generateData("int",2);
        //storing API name
        caller.store("keySelfSignUpUserName","String",varSelfSignUpUserName);
        //type user name
        caller.type("APIStoreSignUp.tf_UserName",varSelfSignUpUserName);
        caller.click("APIStoreSignUp.tf_Password");
        caller.pause("2000");
        caller.checkElementPresent("APIStoreSignUp.ele_lblUserNameError",false,"");
        caller.writeToReport("End of executing APIM2_1031");	
    }
    /**
     *  Business component APIM2_1055.
     */
    public final static void APIM2_1055(final SeleniumTestBase caller, final String param_publisherURL, final String param_storeURL, final String param_publisherOneOfTenentOneOrAdmin, final String param_searchForDocumentKeyWordHello, final String param_APINameOneRetrived, final String param_apiVersionOne, final String param_statusPublished, final String param_docNameDocOne, final String param_optionVisibleToMyDomain, final String param_keyWordViewContent, final String param_provider, final String param_noMatchingResults, final String param_serverNameOfTenantOrAdmin, final String param_serverNameOfTenantTwoOrAdmin, final String param_storeOneOfTenanrOneOrAdmin, final String param_storeTwoOfTenantOneOrAdmin) throws Exception {
        caller.writeToReport("Start of execution of TC APIM2_1055");
        lib_Common.bc_PublisherLogin(caller, param_publisherURL,param_publisherOneOfTenentOneOrAdmin);
        //wait for content load
        caller.pause("2000");
        //Verify redirected to browse page
        caller.checkElementPresent("APIPublisherHome.lnk_Browse",false,"");
        caller.click("APIPublisherHome.lnk_Browse");
        lib_Common.bc_APIPublisherSearch(caller, param_APINameOneRetrived,param_APINameOneRetrived,param_apiVersionOne);
        caller.click("APIPublisherHome.btn_Search");
        //Verify the api details in browse page
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + param_APINameOneRetrived,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + param_APINameOneRetrived);
        //Wait for content load
        caller.pause("2000");
        //verify the availability of Lifestyle tab
        caller.checkElementPresent("APIPublisherBrowse.btn_Lifecycle",false,"");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //Wait for content load
        caller.pause("2000");
        caller.select("browseLifecycle.ele_ddSelectState",param_statusPublished);
        //Wait for content load
        caller.pause("2000");
        caller.click("browseLifecycle.btn_Update");
        caller.checkElementPresent("browseLifecycle.ele_lblUpdateSuccessMessage",false,"");
        //Wait for content load
        caller.pause("2000");
        //retrived api is set to public
        caller.click("Browse_Doc.lnk_Doc");
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_Update","param_DocName_PARAM:" + param_docNameDocOne);
        //Wait for content load
        caller.pause("2000");
        caller.select("Browse_Doc.ele_ddVisibility",param_optionVisibleToMyDomain);
        //Wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.btn_UpdateCreatedDoc");
        //search using document keyword
        caller.click("APIPublisherHome.lnk_Browse");
        //wait for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",param_searchForDocumentKeyWordHello);
        //wait for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("2000");
        //verify the search results in publisher for key word Hello
        //verify Document one name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_DocumentName","param_documentName_PARAM:" + param_docNameDocOne,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_viewContent","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_keyWordViewContent_PARAM:" + param_keyWordViewContent,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APIName","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_APIName_PARAM:" + param_APINameOneRetrived,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APINameWithVersion","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_APIName_PARAM:" + param_APINameOneRetrived + "_PARAM," + "param_versionOfAPI_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //End of verification for document keyword search hello
        //Navigate to store URL
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameOfTenantOrAdmin);
        /*
        Call
         businessComponent=lib_Common.bc_StoreLogin
         param_TenanrOrAdmin=@param_storeOneOfTenanrOneOrAdmin
        */
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        //search documents for key word test
        caller.type("APIStoreHome.tf_APISearchStore",param_searchForDocumentKeyWordHello);
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait for search content load
        caller.pause("2000");
        //verify that No Matching Results message appears
        caller.checkElementPresent("APIStoreHome.ele_lblSearchTermIsMissing","param_searchTermIsMissing_PARAM:" + param_noMatchingResults,false,"");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameOfTenantTwoOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_storeTwoOfTenantOneOrAdmin);
        //wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        //search documents for key word test
        caller.type("APIStoreHome.tf_APISearchStore",param_searchForDocumentKeyWordHello);
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait for search content load
        caller.pause("2000");
        //verify that No Matching Results message appears
        caller.checkElementPresent("APIStoreHome.ele_lblSearchTermIsMissing","param_searchTermIsMissing_PARAM:" + param_noMatchingResults,false,"");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameOfTenantOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_storeOneOfTenanrOneOrAdmin);
        //wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        //wait for content load
        caller.pause("2000");
        //search documents for key word test
        caller.type("APIStoreHome.tf_APISearchStore",param_searchForDocumentKeyWordHello);
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait for search content load
        caller.pause("2000");
        //verify Document One name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_documentName","param_documentName_PARAM:" + param_docNameDocOne,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_viewContent","param_documentName_PARAM:" + param_docNameDocOne,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_APINameOrVersion_PARAM:" + param_APINameOneRetrived,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_APINameOrVersion_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //end of verification
        caller.writeToReport("End of execution of TC APIM2_1055");	
    }
    /**
     *  Business component APIM2_1052.
     */
    public final static void APIM2_1052(final SeleniumTestBase caller, final String param_publisherURL, final String param_publisherOneOfTenentOneOrAdmin, final String param_apiName, final String param_apiContext, final String param_apiVersionOne, final String param_apiVisibilityPublic, final String param_apiImage, final String param_apiTagName, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_productionEndpoint, final String param_keyYes, final String param_sandboxEndpoint, final String param_keyWordNo, final String param_docName, final String param_docSummery, final String param_DocVisibilityPrivate, final String param_editContent, final String param_keyWordViewContent, final String param_serverNameOfTenantOrAdmin, final String param_storeOneOfTenanrOneOrAdmin, final String param_searchForDocumentKeyWordOne, final String param_storeURL, final String param_DefaultApplication, final String param_TenantOrAdmin) throws Exception {
        caller.writeToReport("Start of execution of TC APIM2_1052");
        caller.writeToReport("Start of precondition");
        lib_Common.bc_PublisherLogin(caller, param_publisherURL,param_publisherOneOfTenentOneOrAdmin);
        //start of creation of api 1
        lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke(caller, param_apiName,param_apiContext,param_apiVersionOne,param_apiVisibilityPublic,param_apiImage,param_apiTagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        String var_APINameOne = caller.retrieveString("key_APINameDesign");
        String var_APIVersion = caller.retrieveString("key_APIVersion");
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_keyYes,param_sandboxEndpoint,param_keyWordNo,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_keyWordNo,param_keyWordNo,"");
        //end of creation of api 1
        caller.pause("2000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",var_APINameOne);
        //wait for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + var_APINameOne);
        //wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        //wait for content load
        caller.pause("2000");
        //API1 document 1
        caller.click("Browse_Doc.btn_AddNewDocument");
        //wait for content load
        caller.pause("1000");
        //genarate docName & Summery
        String DocName = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocName);
        //Insert summery for document one
        String DocSummery = param_docSummery+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_Summary",DocSummery);
        caller.pause("2000");
        //Set visibility level private
        caller.select("Browse_Doc.ele_ddVisibility",param_DocVisibilityPrivate);
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("2000");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocName);
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.newWindow1");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + var_APIVersion,false,"");
        caller.selectFrame("Browse_Doc.frame1");
        caller.pause("4000");
        caller.click("Browse_Doc.tf_EditContent1");
        caller.pause("500");
        caller.type("Browse_Doc.tf_EditContent1",param_editContent);
        caller.pause("4000");
        caller.fireEvent("KEY%key=\t|key=\n","10");
        caller.pause("4000");
        caller.click("Browse_Doc.tf_EditContent1");
        caller.pause("500");
        caller.type("Browse_Doc.tf_EditContent1",param_editContent);
        caller.pause("4000");
        caller.fireEvent("KEY%key=\t|key=\t|key=\n","5000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("2000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",param_searchForDocumentKeyWordOne);
        //wait for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //verify the search results in publisher for key word One
        //verify Document One name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_DocumentName","param_documentName_PARAM:" + DocName,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_viewContent","param_documentName_PARAM:" + DocName + "_PARAM," + "param_keyWordViewContent_PARAM:" + param_keyWordViewContent,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APIName","param_documentName_PARAM:" + DocName + "_PARAM," + "param_APIName_PARAM:" + var_APINameOne,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APINameWithVersion","param_documentName_PARAM:" + DocName + "_PARAM," + "param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_versionOfAPI_PARAM:" + var_APIVersion,false,"");
        //End of verification of the search for the results in publisher for key word One
        //Navigate to store URL
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameOfTenantOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_storeOneOfTenanrOneOrAdmin);
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",param_searchForDocumentKeyWordOne);
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait for search content load
        caller.pause("2000");
        //verify the search results in store for key word One
        caller.checkElementPresent("APIStoreHome.ele_lblNoMatchingAPI",false,"");
        lib_Common.bc_DeleteAllApplicationsAndAPIs(caller, param_storeURL,param_TenantOrAdmin,param_storeOneOfTenanrOneOrAdmin,param_publisherURL,param_publisherOneOfTenentOneOrAdmin,param_DefaultApplication);
        caller.writeToReport("End of execution of TC APIM2_1052");	
    }
    /**
     *  Business component APIM2_1056.
     */
    public final static void APIM2_1056(final SeleniumTestBase caller, final String param_publisherURL, final String param_publisherOneOfTenentOneOrAdmin, final String param_searchForDocumentKeyWordHello, final String param_docNameDocOne, final String param_keyWordViewContent, final String param_APINameOneRetrived, final String param_apiVersionOne, final String param_provider, final String param_storeURL, final String param_serverNameOfTenantOrAdmin, final String param_storeOneOfTenanrOneOrAdmin, final String param_statusBlocked, final String param_noMatchingResults) throws Exception {
        caller.writeToReport("Start of execution of TC APIM2_1056");
        lib_Common.bc_PublisherLogin(caller, param_publisherURL,param_publisherOneOfTenentOneOrAdmin);
        //wait for content load
        caller.pause("2000");
        //Verify redirected to browse page
        caller.checkElementPresent("APIPublisherHome.lnk_Browse",false,"");
        caller.type("APIPublisherHome.tf_APISearch",param_searchForDocumentKeyWordHello);
        //wait for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("2000");
        //verify the search results in publisher for key word Hello
        //verify Document one name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_DocumentName","param_documentName_PARAM:" + param_docNameDocOne,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_viewContent","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_keyWordViewContent_PARAM:" + param_keyWordViewContent,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APIName","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_APIName_PARAM:" + param_APINameOneRetrived,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APINameWithVersion","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_APIName_PARAM:" + param_APINameOneRetrived + "_PARAM," + "param_versionOfAPI_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //End of verification for document keyword search hello
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameOfTenantOrAdmin);
        //wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        //wait for content load
        caller.pause("2000");
        //search documents for key word test
        caller.type("APIStoreHome.tf_APISearchStore",param_searchForDocumentKeyWordHello);
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait for search content load
        caller.pause("2000");
        //verify Document One name, Link to view / download, API name, API version, API provider  for annonimous store user
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_documentName","param_documentName_PARAM:" + param_docNameDocOne,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_viewContent","param_documentName_PARAM:" + param_docNameDocOne,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_APINameOrVersion_PARAM:" + param_APINameOneRetrived,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_APINameOrVersion_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //end of verification
        lib_Common.bc_PublisherLogin(caller, param_publisherURL,param_publisherOneOfTenentOneOrAdmin);
        //Verify redirected to browse page
        caller.checkElementPresent("APIPublisherHome.lnk_Browse",false,"");
        caller.click("APIPublisherHome.lnk_Browse");
        lib_Common.bc_APIPublisherSearch(caller, param_APINameOneRetrived,param_APINameOneRetrived,param_apiVersionOne);
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherHome.btn_Search");
        //Verify the api details in browse page
        caller.checkElementPresent("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + param_APINameOneRetrived,false,"");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + param_APINameOneRetrived);
        //Wait for content load
        caller.pause("2000");
        //verify the availability of Lifestyle tab
        caller.checkElementPresent("APIPublisherBrowse.btn_Lifecycle",false,"");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //Wait for content load
        caller.pause("2000");
        caller.select("browseLifecycle.ele_ddSelectState",param_statusBlocked);
        //Wait for content load
        caller.pause("2000");
        caller.click("browseLifecycle.btn_Update");
        caller.checkElementPresent("browseLifecycle.ele_lblUpdateSuccessMessage",false,"");
        //Wait for content load
        caller.pause("2000");
        //verify the presence of the link
        caller.checkElementPresent("APIPublisherHome.lnk_Browse",false,"");
        //wait for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.lnk_Browse");
        //wait for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",param_searchForDocumentKeyWordHello);
        //wait for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("2000");
        //verify the search results in publisher for key word Hello
        //verify Document one name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_DocumentName","param_documentName_PARAM:" + param_docNameDocOne,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_viewContent","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_keyWordViewContent_PARAM:" + param_keyWordViewContent,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APIName","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_APIName_PARAM:" + param_APINameOneRetrived,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APINameWithVersion","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_APIName_PARAM:" + param_APINameOneRetrived + "_PARAM," + "param_versionOfAPI_PARAM:" + param_apiVersionOne,false,"");
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_provider","param_documentName_PARAM:" + param_docNameDocOne + "_PARAM," + "param_provider_PARAM:" + param_provider,false,"");
        //End of verification for document keyword search hello
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameOfTenantOrAdmin);
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.lnk_LogOutDropDown");
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_Logout");
        //wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        //wait for content load
        caller.pause("2000");
        //search documents for key word test
        caller.type("APIStoreHome.tf_APISearchStore",param_searchForDocumentKeyWordHello);
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait for search content load
        caller.pause("2000");
        //verify that No Matching Results message appears
        caller.checkElementPresent("APIStoreHome.ele_lblSearchTermIsMissing","param_searchTermIsMissing_PARAM:" + param_noMatchingResults,false,"");
        caller.writeToReport("End of execution of TC APIM2_1056");	
    }
    /**
     *  Business component APIM2_891.
     */
    public final static void APIM2_891(final SeleniumTestBase caller, final String param_APIName, final String param_APIContext, final String param_APIVersionOne, final String param_APIvisibility, final String param_tagName, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_ProductionEndPoint, final String param_yes, final String param_no, final String param_SandBoxEndpoint, final String param_storeURL, final String param_TenantOrAdmin, final String param_TenantOrAdminStoreOne, final String param_defaultApplication, final String param_keyTypeToInvoke, final String param_buttonNamePost, final String param_postPayloadContext, final String param_postCustomerNameFromPayloadContext, final String param_postResponseCodeERROR900901, final String param_postResponseHeaders) throws Exception {
        caller.writeToReport("Start of executing APIM2_891");
        //Create new API up to Published state
        lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke(caller, param_APIName,param_APIContext,param_APIVersionOne,param_APIvisibility,"",param_tagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_ProductionEndPoint,param_yes,param_SandBoxEndpoint,param_no,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_no,param_no,"");
        //Navigate to store for subsription and generate keys for sandbox and production end points
        String varAPINameDesign = caller.retrieveString("key_APINameDesign");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"4000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //waiting for content load
        caller.pause("2000");
        lib_Common.bc_StoreLogin(caller, param_TenantOrAdminStoreOne);
        //waiting for content load
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",varAPINameDesign);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + varAPINameDesign);
        //waiting for content load
        caller.pause("3000");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_defaultApplication);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        //waiting for content load
        caller.pause("4000");
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        //waiting for content load
        caller.pause("3000");
        //Generate Keys for the Subscription
        caller.click("APIStoreHome.lnk_MySubcription");
        //wait for page load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_ddApplicationWithSubscription",false,"");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsPublished","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne,false,"");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_defaultApplication);
        //wait for page load
        caller.pause("4000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        }
        //wait for content load
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        }
        //wait for content load
        caller.pause("3000");
        //Start invoking
        lib_Common.bc_APIStore_InvokeAPI(caller, param_APIName,param_APIVersionOne,param_defaultApplication,param_keyTypeToInvoke,param_yes,param_buttonNamePost,param_postPayloadContext,param_postCustomerNameFromPayloadContext,param_postResponseCodeERROR900901,param_postResponseHeaders,param_no,"","","","",param_no,"","","","","","","","",param_no,"","","","",param_no,"","","","","","","","");	
    }
    /**
     *  Business component APIM2_905.
     */
    public final static void APIM2_905(final SeleniumTestBase caller, final String param_APIName, final String param_APIContext, final String param_APIVersionOne, final String param_APIvisibility, final String param_tagName, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_ProductionEndPoint, final String param_sandboxEndpoint, final String param_yes, final String param_no, final String param_storeURL, final String param_TenantOrAdmin, final String param_TenantOrAdminStoreOne, final String param_defaultApplication, final String param_PublisherURL, final String param_APIStateBlocked, final String param_keyTypeToInvoke, final String param_buttonNamePost, final String param_postPayloadContext, final String param_postCustomerNameFromPayloadContext, final String param_postResponseCode700700, final String param_postResponseHeaders, final String param_APIStateBlockedSimple) throws Exception {
        caller.writeToReport("Start of executing APIM2_905");
        //Create new API up to Published state
        lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke(caller, param_APIName,param_APIContext,param_APIVersionOne,param_APIvisibility,"",param_tagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_ProductionEndPoint,param_yes,param_sandboxEndpoint,param_no,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_no,param_no,"");
        //Navigate to store for subsription and generate keys for sandbox and production end points
        String varAPINameDesign = caller.retrieveString("key_APINameDesign");
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"4000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //waiting for content load
        caller.pause("2000");
        lib_Common.bc_StoreLogin(caller, param_TenantOrAdminStoreOne);
        //waiting for content load
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",varAPINameDesign);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + varAPINameDesign);
        //waiting for content load
        caller.pause("3000");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_defaultApplication);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        //waiting for content load
        caller.pause("4000");
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        //waiting for content load
        caller.pause("3000");
        //Generate Keys for the Subscription
        caller.click("APIStoreHome.lnk_MySubcription");
        //wait for page load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_ddApplicationWithSubscription",false,"");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsPublished","param_APIName_PARAM:" + varAPINameDesign + "_PARAM," + "param_APIVersion_PARAM:" + param_APIVersionOne,false,"");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_defaultApplication);
        //wait for page load
        caller.pause("4000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        }
        //wait for content load
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        }
        //wait for content load
        caller.pause("3000");
        //Navigate to publisher for change the state of the API in to deprecated
        caller.navigateToURL("<param_publisherURL>","param_publisherURL_PARAM:" + param_PublisherURL,"3000");
        //wait for content load
        caller.pause("2000");
        //Change state in to deprecated
        caller.click("APIPublisherHome.lnk_Browse");
        //wait for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",varAPINameDesign);
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("4000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPINameDesign);
        //wait for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //wait for content load
        caller.pause("2000");
        caller.select("APIPublisherBrowse.ele_ddState",param_APIStateBlocked);
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.btn_UpdateState");
        //wait for content load
        caller.pause("4000");
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStateChangeMessage",false,"");
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("3000");
        caller.type("APIPublisherHome.tf_APISearch",varAPINameDesign);
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("3000");
        //Navigate To store to verify the API is not visible in the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"4000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //waiting for content load
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",varAPINameDesign);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("2000");
        //Verify the inactive Status of the API on the MYSubscriptiptions page
        caller.click("APIStoreHome.lnk_MySubcription");
        //waiting for content load
        caller.pause("3000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsBlocked","param_Blocked_PARAM:" + param_APIStateBlockedSimple,false,"");
        caller.click("APIStoreMySubcription.ele_lblAPINameBlocked","param_APINameBlocked_PARAM:" + varAPINameDesign);
        //wait for content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreMySubcription.ele_lblErrorNoAPI",false,"");
        caller.writeToReport("End of executing APIM2_905");	
    }
    /**
     *  Business component APIM2_1053.
     */
    public final static void APIM2_1053(final SeleniumTestBase caller, final String param_serverNameTwo, final String param_storeTwoOfTenantOne, final String param_DocVisibilitySameAsApi, final String param_publisherURL, final String param_publisherOneOfTenentOneOrAdmin, final String param_apiName, final String param_apiContext, final String param_apiVersionOne, final String param_apiVisibilityPublic, final String param_apiImage, final String param_apiTagName, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_productionEndpoint, final String param_keyYes, final String param_sandboxEndpoint, final String param_keyWordNo, final String param_docName, final String param_docSummery, final String param_editContent, final String param_keyWordViewContent, final String param_serverNameOfTenantOrAdmin, final String param_storeOneOfTenanrOneOrAdmin, final String param_searchForDocumentKeyWordOne, final String param_storeURL, final String param_DefaultApplication, final String param_TenantOrAdmin, final String param_serverNameTwoOfTenantOrAdmin) throws Exception {
        caller.writeToReport("Start of execution of TC APIM2_1052");
        caller.writeToReport("Start of precondition");
        lib_Common.bc_PublisherLogin(caller, param_publisherURL,param_publisherOneOfTenentOneOrAdmin);
        //start of creation of api 1
        lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke(caller, param_apiName,param_apiContext,param_apiVersionOne,param_apiVisibilityPublic,param_apiImage,param_apiTagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        String var_APINameOne = caller.retrieveString("key_APINameDesign");
        String var_APIVersion = caller.retrieveString("key_APIVersion");
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_keyYes,param_sandboxEndpoint,param_keyWordNo,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_keyWordNo,param_keyWordNo,"");
        //end of creation of api 1
        caller.pause("2000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",var_APINameOne);
        //wait for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + var_APINameOne);
        //wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        //wait for content load
        caller.pause("2000");
        //API1 document 1
        caller.click("Browse_Doc.btn_AddNewDocument");
        //wait for content load
        caller.pause("1000");
        //genarate docName & Summery
        String DocName = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocName);
        //Insert summery for document one
        String DocSummery = param_docSummery+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_Summary",DocSummery);
        caller.pause("2000");
        //Set visibility level private
        caller.select("Browse_Doc.ele_ddVisibility",param_DocVisibilitySameAsApi);
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("2000");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocName);
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.newWindow1");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + var_APIVersion,false,"");
        caller.selectFrame("Browse_Doc.frame1");
        caller.pause("4000");
        caller.click("Browse_Doc.tf_EditContent1");
        caller.pause("500");
        caller.type("Browse_Doc.tf_EditContent1",param_editContent);
        caller.pause("4000");
        caller.fireEvent("KEY%key=\t|key=\n","10");
        caller.pause("4000");
        caller.click("Browse_Doc.tf_EditContent1");
        caller.pause("500");
        caller.type("Browse_Doc.tf_EditContent1",param_editContent);
        caller.pause("4000");
        caller.fireEvent("KEY%key=\t|key=\t|key=\n","5000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("2000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",param_searchForDocumentKeyWordOne);
        //wait for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //verify the search results in publisher for key word One
        //verify Document One name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_DocumentName","param_documentName_PARAM:" + DocName,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_viewContent","param_documentName_PARAM:" + DocName + "_PARAM," + "param_keyWordViewContent_PARAM:" + param_keyWordViewContent,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APIName","param_documentName_PARAM:" + DocName + "_PARAM," + "param_APIName_PARAM:" + var_APINameOne,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APINameWithVersion","param_documentName_PARAM:" + DocName + "_PARAM," + "param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_versionOfAPI_PARAM:" + var_APIVersion,false,"");
        //End of verification of the search for the results in publisher for key word One
        //Navigate to store URL
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameOfTenantOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_storeOneOfTenanrOneOrAdmin);
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",param_searchForDocumentKeyWordOne);
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait for search content load
        caller.pause("2000");
        //verify the search results in store for key word One
        //verify Document One name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_documentName","param_documentName_PARAM:" + DocName,false,"");
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_documentSummary","param_documentName_PARAM:" + DocName + "_PARAM," + "param_summaryContent_PARAM:" + DocSummery,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_viewContent","param_documentName_PARAM:" + DocName,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + DocName + "_PARAM," + "param_APINameOrVersion_PARAM:" + var_APINameOne,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + DocName + "_PARAM," + "param_APINameOrVersion_PARAM:" + var_APIVersion,false,"");
        //Navigate to store URL
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameTwoOfTenantOrAdmin);
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",param_searchForDocumentKeyWordOne);
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait for search content load
        caller.pause("2000");
        caller.checkElementPresent("APIStoreHome.ele_lblNoMatchingAPI",false,"");
        lib_Common.bc_DeleteAllApplicationsAndAPIs(caller, param_storeURL,param_TenantOrAdmin,param_storeOneOfTenanrOneOrAdmin,param_publisherURL,param_publisherOneOfTenentOneOrAdmin,param_DefaultApplication);
        caller.writeToReport("End of execution of TC APIM2_1052");	
    }
    /**
     *  Business component APIM2_1054.
     */
    public final static void APIM2_1054(final SeleniumTestBase caller, final String param_publisherURL, final String param_publisherOneOfTenentOneOrAdmin, final String param_APIName, final String param_APIVersionOne, final String param_APIvisibilityRestricted, final String param_TagName, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_productionEndpoint, final String param_keyYes, final String param_sandboxEndpoint, final String param_keyWordNo, final String param_docName, final String param_docSummery, final String param_DocVisibilitySameAsAPI, final String param_editContent, final String param_searchForDocumentKeyWordOne, final String param_keyWordViewContent, final String param_storeURL, final String param_serverNameOfTenantOrAdmin, final String param_TenantOneStoreTwo, final String param_TenantOneStoreOne, final String param_AdminStoreOne, final String param_AdminStoreTwo, final String param_serverNameTwoOfTenantOrAdmin, final String param_DefaultApplication, final String param_storeOneOfTenanrOneOrAdmin, final String param_TenantOrAdmin) throws Exception {
        caller.writeToReport("Start of execution of TC APIM2_1054");
        caller.writeToReport("Start of precondition");
        //Retriving Roles
        String PublisherRoleForNonRestrict = caller.retrieveString("KeyVisibilityRole");
        String AdminRoleForNonRestrict = caller.retrieveString("KeyVisibilityRoleAdmin");
        lib_Common.bc_PublisherLogin(caller, param_publisherURL,param_publisherOneOfTenentOneOrAdmin);
        //Creation of API
        //Loging to the publisher using the created credentials
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(caller.checkElementPresent("APIPublisherHome.lnk_Add")){
        caller.click("APIPublisherHome.lnk_Add");
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Could not find the object 'APIPublisherHome.lnk_Add'");
        }
        //waiting for content load
        caller.pause("2000");
        }
        }
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.pause("1000");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //genarate api name
        String APIName = param_APIName+"_"+caller.generateData("int",3);
        caller.store("key_APINameDesign","String",APIName);
        //Type API Name
        caller.type("APIPublisherAdd.tf_APIName",APIName);
        //Type API context
        String APIcontext = "{version}"+"/"+APIName;
        caller.type("APIPublisherAdd.tf_APIContext",APIcontext);
        //Type API version as default
        caller.type("APIPublisherAdd.tf_APIVersion",param_APIVersionOne);
        caller.store("key_APIVersion","String",param_APIVersionOne);
        //waiting for content load
        caller.pause("2000");
        caller.select("APIPublisherBrowse.ele_ddVisibility",param_APIvisibilityRestricted);
        //waiting for content load
        caller.pause("2000");
        //Adding a visibility role
        if(param_publisherOneOfTenentOneOrAdmin.equals("TenantOnePublisherOne")){
        caller.type("APIPublisherBrowse.tf_VisibilityToRole",PublisherRoleForNonRestrict);
        } else {
        caller.type("APIPublisherBrowse.tf_VisibilityToRole",AdminRoleForNonRestrict);
        }
        //Genarate Tag Name
        String TagName = param_TagName+"_"+caller.generateData("int",3);
        //Type API tag
        caller.type("APIPublisherAdd.tf_Tags",TagName);
        //waiting for content load
        caller.pause("1000");
        caller.fireEvent("KEY%key=\n","2000");
        //waiting for content load
        caller.pause("2000");
        //Type the URL pattern for post and put
        caller.type("APIPublisherAdd.tf_URLPattern",param_urlPatternForPostAndPut);
        //waiting for content load
        caller.pause("1000");
        //check the availability of post and put check boxes
        caller.checkElementPresent("APIPublisherAdd.chk_Post",false,"");
        caller.checkElementPresent("APIPublisherAdd.chk_Put",false,"");
        caller.click("APIPublisherAdd.chk_Post");
        caller.click("APIPublisherAdd.chk_Put");
        //waiting for content load
        caller.pause("1000");
        //add the soap url
        caller.click("APIPublisherAdd.btn_Add");
        //waiting for content load
        caller.pause("2000");
        //Type the URL pattern for post and put
        caller.type("APIPublisherAdd.tf_URLPattern",param_urlPatternForGetDeleteAndHead);
        //waiting for content load
        caller.pause("1000");
        //check the availability of get,delete&head check boxes
        caller.checkElementPresent("APIPublisherAdd.chk_Get",false,"");
        caller.checkElementPresent("APIPublisherAdd.chk_Delete",false,"");
        caller.checkElementPresent("APIPublisherAdd.chk_Head",false,"");
        caller.click("APIPublisherAdd.chk_Get");
        caller.click("APIPublisherAdd.chk_Delete");
        caller.click("APIPublisherAdd.chk_Head");
        //waiting for content load
        caller.pause("1000");
        //add the soap url
        caller.click("APIPublisherAdd.btn_Add");
        //verify the added soap commands get,delete,head and the url pattern
        //check the button availability
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(caller.checkElementPresent("APIPublisherAdd.btn_Save")){
        //click save and verify warning
        caller.click("APIPublisherAdd.btn_Save");
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Could not find the object 'APIPublisherAdd.btn_Save'");
        }
        //waiting for content load
        caller.pause("2000");
        }
        }
        //waiting for content load and
        //check the load time
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(!caller.checkElementPresent("APIPublisherAdd.ele_lblLoadSpinner")){
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Load Time Was Above Fifteen Seconds");
        }
        //waiting for content load
        caller.pause("3000");
        }
        }
        //check the popup availability
        caller.click("APIPublisherAdd.lnk_NextImplement");
        for(int TotalCount=5;TotalCount>0;TotalCount--){
        if(!caller.checkElementPresent("APIPublisherAdd.ele_lblLoadSpinner")){
        TotalCount = 0;
        break;
        } else {
        if(TotalCount==1){
        caller.fail("Load Time Was Above Fifteen Seconds");
        }
        //waiting for content load
        caller.pause("3000");
        }
        }
        String var_APINameOne = caller.retrieveString("key_APINameDesign");
        String var_APIVersion = caller.retrieveString("key_APIVersion");
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_keyYes,param_sandboxEndpoint,param_keyWordNo,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_keyWordNo,param_keyWordNo,"");
        //end of creation of api 1
        caller.pause("2000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",var_APINameOne);
        //wait for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + var_APINameOne);
        //wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        //wait for content load
        caller.pause("2000");
        //API1 document 1
        caller.click("Browse_Doc.btn_AddNewDocument");
        //wait for content load
        caller.pause("1000");
        //genarate docName & Summery
        String DocName = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocName);
        //Insert summery for document one
        String DocSummery = param_docSummery+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_Summary",DocSummery);
        caller.pause("2000");
        //Set visibility level private
        caller.select("Browse_Doc.ele_ddVisibility",param_DocVisibilitySameAsAPI);
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("2000");
        caller.click("Browse_Doc.btn_EditContent","param_DocName_PARAM:" + DocName);
        caller.pause("3000");
        caller.selectWindow("Browse_Doc.newWindow1");
        //Verify API Version
        caller.checkElementPresent("Browse_Doc.ele_lblApiVersionInEditContent","param_APIVersion_PARAM:" + var_APIVersion,false,"");
        caller.selectFrame("Browse_Doc.frame1");
        caller.pause("4000");
        caller.click("Browse_Doc.tf_EditContent1");
        caller.pause("500");
        caller.type("Browse_Doc.tf_EditContent1",param_editContent);
        caller.pause("4000");
        caller.fireEvent("KEY%key=\t|key=\n","10");
        caller.pause("4000");
        caller.click("Browse_Doc.tf_EditContent1");
        caller.pause("500");
        caller.type("Browse_Doc.tf_EditContent1",param_editContent);
        caller.pause("4000");
        caller.fireEvent("KEY%key=\t|key=\t|key=\n","5000");
        caller.switchUser("default");
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.pause("2000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",param_searchForDocumentKeyWordOne);
        //wait for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //verify the search results in publisher for key word One
        //verify Document One name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_DocumentName","param_documentName_PARAM:" + DocName,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_viewContent","param_documentName_PARAM:" + DocName + "_PARAM," + "param_keyWordViewContent_PARAM:" + param_keyWordViewContent,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APIName","param_documentName_PARAM:" + DocName + "_PARAM," + "param_APIName_PARAM:" + var_APINameOne,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APINameWithVersion","param_documentName_PARAM:" + DocName + "_PARAM," + "param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_versionOfAPI_PARAM:" + var_APIVersion,false,"");
        //End of verification of the search for the results in publisher for key word One
        //Navigate to store URL
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameTwoOfTenantOrAdmin);
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",param_searchForDocumentKeyWordOne);
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait for search content load
        caller.pause("2000");
        //verify the search results in store for key word One
        caller.checkElementPresent("APIStoreHome.ele_lblNoMatchingAPI",false,"");
        //login Using restricted role
        //Navigate to store URL
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameOfTenantOrAdmin);
        if(param_serverNameOfTenantOrAdmin.equals("carbon.super")){
        lib_Common.bc_StoreLogin(caller, param_AdminStoreTwo);
        } else if(param_serverNameOfTenantOrAdmin.equals("TenantOne")){
        lib_Common.bc_StoreLogin(caller, param_TenantOneStoreTwo);
        }
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",param_searchForDocumentKeyWordOne);
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait for search content load
        caller.pause("2000");
        //verify the search results in store for key word One
        caller.checkElementPresent("APIStoreHome.ele_lblNoMatchingAPI",false,"");
        //Login Using allowed user
        //Navigate to store URL
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameOfTenantOrAdmin);
        if(param_serverNameOfTenantOrAdmin.equals("Admin")){
        lib_Common.bc_StoreLogin(caller, param_AdminStoreOne);
        } else if(param_serverNameOfTenantOrAdmin.equals("TenantOne")){
        lib_Common.bc_StoreLogin(caller, param_TenantOneStoreOne);
        }
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",param_searchForDocumentKeyWordOne);
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait for search content load
        caller.pause("2000");
        //verify the search results in store for key word One
        //verify Document One name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_documentName","param_documentName_PARAM:" + DocName,false,"");
        caller.checkElementPresent("APIStoreHome.ele_lblDocumentSearchResult_documentSummary","param_documentName_PARAM:" + DocName + "_PARAM," + "param_summaryContent_PARAM:" + DocSummery,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_viewContent","param_documentName_PARAM:" + DocName,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + DocName + "_PARAM," + "param_APINameOrVersion_PARAM:" + var_APINameOne,false,"");
        caller.checkElementPresent("APIStoreHome.lnk_documentSearchResult_APINameOrVersion","param_documentName_PARAM:" + DocName + "_PARAM," + "param_APINameOrVersion_PARAM:" + var_APIVersion,false,"");
        lib_Common.bc_DeleteAllApplicationsAndAPIs(caller, param_storeURL,param_TenantOrAdmin,param_storeOneOfTenanrOneOrAdmin,param_publisherURL,param_publisherOneOfTenentOneOrAdmin,param_DefaultApplication);
        caller.writeToReport("End of execution of TC APIM2_1054");	
    }
    /**
     *  Business component APIM2_1059.
     */
    public final static void APIM2_1059(final SeleniumTestBase caller, final String param_publisherURL, final String param_publisherOneOfTenentOneOrAdmin, final String param_apiName, final String param_apiVersionOne, final String param_apiContext, final String param_apiVisibilityPublic, final String param_apiImage, final String param_apiTagName, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_productionEndpoint, final String param_keyYes, final String param_sandboxEndpoint, final String param_keyWordNo, final String param_statusDeprecate, final String param_fileToUpload, final String param_DocVisibilitySameAsApi, final String param_TenantOrAdmin, final String param_TenantOneOrAdminStoreOne, final String param_ApplicationName, final String param_tierType, final String param_searchForDocumentKeyWordOne, final String param_searchForDocumentKeyWordTwo, final String param_AdminStoreOne, final String param_TenantOneStoreOne, final String param_AdminStoreTwo, final String param_TenantOneStoreTwo, final String param_storeURL, final String param_serverNameOfTenantOrAdmin, final String param_docName, final String param_docSummery, final String param_keyWordViewContent, final String param_serverNameTwoOfTenantOrAdmin, final String param_storeOneOfTenanrOneOrAdmin, final String param_DefaultApplication) throws Exception {
        caller.writeToReport("Start of execution of TC APIM2_1059");
        caller.writeToReport("Start of precondition");
        lib_Common.bc_PublisherLogin(caller, param_publisherURL,param_publisherOneOfTenentOneOrAdmin);
        //start of creation of api 1
        lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke(caller, param_apiName,param_apiContext,param_apiVersionOne,param_apiVisibilityPublic,param_apiImage,param_apiTagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        String var_APINameOne = caller.retrieveString("key_APINameDesign");
        String var_APIVersion = caller.retrieveString("key_APIVersion");
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_keyYes,param_sandboxEndpoint,param_keyWordNo,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_keyWordNo,param_keyWordNo,"");
        //end of creation of api 1
        caller.pause("2000");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_TenantOneOrAdminStoreOne);
        //Subcribe the API
        //Go to My Subcription window to Generate keys
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",var_APINameOne);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + var_APINameOne);
        //waiting for content load
        caller.pause("3000");
        caller.select("APIStoreAPIs.ele_ddSelectAplicationToSubscribe",param_ApplicationName);
        caller.select("APIStoreAPIs.ele_ddtierToSubscribe",param_tierType);
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_Subscribe");
        caller.pause("2000");
        caller.click("APIStoreAPIs.btn_GoToMySubscriptions");
        caller.click("APIStoreHome.lnk_MySubcription");
        //verify that the landed page is My Subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_ddApplicationWithSubscription",false,"");
        caller.select("APIStoreMySubcription.ele_ddApplicationWithSubscription",param_ApplicationName);
        //wait for content load
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_generateKeyProduction")){
        caller.click("APIStoreMySubcription.btn_generateKeyProduction");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateProduction")){
        caller.click("APIStoreMySubcription.btn_RegenarateProduction");
        }
        //wait for content load
        caller.pause("2000");
        if(caller.checkElementPresent("APIStoreMySubcription.btn_GenarateKeySandBox")){
        caller.click("APIStoreMySubcription.btn_GenarateKeySandBox");
        //wait for content load
        caller.pause("1000");
        } else if(caller.checkElementPresent("APIStoreMySubcription.btn_RegenarateSandBox")){
        caller.click("APIStoreMySubcription.btn_RegenarateSandBox");
        }
        //wait for content load
        caller.pause("2000");
        //wait for content load
        caller.pause("1000");
        lib_Common.bc_PublisherLogin(caller, param_publisherURL,param_publisherOneOfTenentOneOrAdmin);
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",var_APINameOne);
        //wait for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + var_APINameOne);
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Lifecycle");
        //wait for content load
        caller.pause("5000");
        //Select the Published Status
        caller.select("APIPublisherBrowse.ele_ddState",param_statusDeprecate);
        caller.pause("2000");
        caller.pause("2000");
        //Click on update button
        caller.click("APIPublisherBrowse.btn_UpdateState");
        //check the successfull message
        caller.checkElementPresent("APIPublisherBrowse.ele_lblStateChangeMessage",false,"");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_TenantOneOrAdminStoreOne);
        //Subcribe the API
        //Go to My Subcription window to Generate keys
        caller.click("APIStoreHome.lnk_MySubcription");
        caller.pause("3000");
        if(caller.checkElementPresent("APIStoreHome.ele_lblPaginationVisible")){
        caller.click("APIStoreHome.ele_lblPagination");
        caller.pause("2000");
        }
        //verify that the api is visible under subscriptions
        caller.checkElementPresent("APIStoreMySubcription.ele_lblSubcribedAPIsDeprecated","param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_APIVersion_PARAM:" + var_APIVersion,false,"");
        lib_Common.bc_PublisherLogin(caller, param_publisherURL,param_publisherOneOfTenentOneOrAdmin);
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",var_APINameOne);
        //wait for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + var_APINameOne);
        caller.pause("3000");
        //wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        //wait for content load
        caller.pause("2000");
        //API1 document 1
        caller.click("Browse_Doc.btn_AddNewDocument");
        //wait for content load
        caller.pause("1000");
        //genarate docName & Summery
        String DocName = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocName);
        //Insert summery for document one
        String DocSummery = param_docSummery+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_Summary",DocSummery);
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_File");
        caller.pause("2000");
        //Type valid file path
         java.io.File fileTwo = new java.io.File("src" +java.io.File.separator + "main" + java.io.File.separator + "resources" + java.io.File.separator + "Images"+ java.io.File.separator + param_fileToUpload);
        String entirePathTwo = fileTwo.getAbsolutePath();
        caller.pause("2000");
        caller.type("Browse_Doc.tf_BrowseFile",entirePathTwo);
        caller.pause("1000");
        //Set visibility level SameAsApiVisibility
        caller.select("Browse_Doc.ele_ddVisibility",param_DocVisibilitySameAsApi);
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("2000");
        lib_Common.bc_PublisherLogin(caller, param_publisherURL,param_publisherOneOfTenentOneOrAdmin);
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",param_searchForDocumentKeyWordOne);
        //wait for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //verify the search results in publisher for key word One
        //verify Document One name, Link to view / download, API name, API version, API provider
        caller.checkElementPresent("Browse_Doc.ele_lblDocumentSearchResult_DocumentName","param_documentName_PARAM:" + DocName,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_download","param_documentName_PARAM:" + DocName + "_PARAM," + "param_keyWordDownload_PARAM:" + param_keyWordViewContent,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APIName","param_documentName_PARAM:" + DocName + "_PARAM," + "param_APIName_PARAM:" + var_APINameOne,false,"");
        caller.checkElementPresent("Browse_Doc.lnk_documentSearchResult_APINameWithVersion","param_documentName_PARAM:" + DocName + "_PARAM," + "param_APIName_PARAM:" + var_APINameOne + "_PARAM," + "param_versionOfAPI_PARAM:" + var_APIVersion,false,"");
        //End of verification of the search for the results in publisher for key word One
        //Navigate to store URL
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameTwoOfTenantOrAdmin);
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",param_searchForDocumentKeyWordOne);
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait for search content load
        caller.pause("2000");
        //verify the search results in store for key word One
        caller.checkElementPresent("APIStoreHome.ele_lblNoMatchingAPI",false,"");
        //login Using restricted role
        //Navigate to store URL
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameOfTenantOrAdmin);
        if(param_serverNameOfTenantOrAdmin.equals("Admin")){
        lib_Common.bc_StoreLogin(caller, param_AdminStoreTwo);
        } else if(param_serverNameOfTenantOrAdmin.equals("TenantOne")){
        lib_Common.bc_StoreLogin(caller, param_TenantOneStoreTwo);
        }
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",param_searchForDocumentKeyWordTwo);
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait for search content load
        caller.pause("2000");
        //verify the search results in store for key word One
        caller.checkElementPresent("APIStoreHome.ele_lblNoMatchingAPI",false,"");
        //Login Using allowed user
        //Navigate to store URL
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameOfTenantOrAdmin);
        if(param_serverNameOfTenantOrAdmin.equals("Admin")){
        lib_Common.bc_StoreLogin(caller, param_AdminStoreOne);
        } else if(param_serverNameOfTenantOrAdmin.equals("TenantOne")){
        lib_Common.bc_StoreLogin(caller, param_TenantOneStoreOne);
        }
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",param_searchForDocumentKeyWordTwo);
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait for search content load
        caller.pause("2000");
        //verify the search results in store for key word One
        caller.checkElementPresent("APIStoreHome.ele_lblNoMatchingAPI",false,"");
        lib_Common.bc_DeleteAllApplicationsAndAPIs(caller, param_storeURL,param_TenantOrAdmin,param_storeOneOfTenanrOneOrAdmin,param_publisherURL,param_publisherOneOfTenentOneOrAdmin,param_DefaultApplication);
        caller.writeToReport("End of execution of TC APIM2_1059");	
    }
    /**
     *  Business component APIM2_1060.
     */
    public final static void APIM2_1060(final SeleniumTestBase caller, final String param_publisherURL, final String param_publisherOneOfTenentOneOrAdmin, final String param_apiName, final String param_apiContext, final String param_apiVersionOne, final String param_apiVisibilityPublic, final String param_apiImage, final String param_apiTagName, final String param_urlPatternForPostAndPut, final String param_urlPatternForGetDeleteAndHead, final String param_productionEndpoint, final String param_keyYes, final String param_sandboxEndpoint, final String param_keyWordNo, final String param_docName, final String param_docSummery, final String param_DocVisibilitySameAsApi, final String param_searchForDocumentKeyWordOne, final String param_serverNameTwoOfTenantOrAdmin, final String param_TenantOrAdmin, final String param_TenantOneOrAdminStoreOne, final String param_url, final String param_storeURL, final String param_storeOneOfTenanrOneOrAdmin, final String param_DefaultApplication) throws Exception {
        caller.writeToReport("Start of execution of TC APIM2_1060");
        caller.writeToReport("Start of precondition");
        lib_Common.bc_PublisherLogin(caller, param_publisherURL,param_publisherOneOfTenentOneOrAdmin);
        //start of creation of api 1
        lib_Common.bc_APIPublisher_AddAPI_DesignPhaseToInvoke(caller, param_apiName,param_apiContext,param_apiVersionOne,param_apiVisibilityPublic,param_apiImage,param_apiTagName,param_urlPatternForPostAndPut,param_urlPatternForGetDeleteAndHead);
        String var_APINameOne = caller.retrieveString("key_APINameDesign");
        String var_APIVersion = caller.retrieveString("key_APIVersion");
        lib_Common.bc_APIPublisher_AddAPI_ImplementationPhaseToInvoke(caller, param_productionEndpoint,param_keyYes,param_sandboxEndpoint,param_keyWordNo,"");
        lib_Common.bc_APIPublisher_AddAPI_ManageToInvoke(caller, param_keyWordNo,param_keyWordNo,"");
        //end of creation of api 1
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",var_APINameOne);
        //wait for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.btn_Search");
        //wait for content load
        caller.pause("2000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + var_APINameOne);
        caller.pause("3000");
        //wait for content load
        caller.pause("2000");
        caller.click("Browse_Doc.lnk_Doc");
        //wait for content load
        caller.pause("2000");
        //API1 document 1
        caller.click("Browse_Doc.btn_AddNewDocument");
        //wait for content load
        caller.pause("1000");
        //genarate docName & Summery
        String DocName = param_docName+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_DocName",DocName);
        //Insert summery for document one
        String DocSummery = param_docSummery+"_"+caller.generateData("int",4);
        caller.type("Browse_Doc.tf_Summary",DocSummery);
        caller.pause("2000");
        caller.click("Browse_Doc.rdo_URL");
        caller.type("Browse_Doc.tf_URL",param_url);
        caller.pause("1000");
        //Set visibility level SameAsApiVisibility
        caller.select("Browse_Doc.ele_ddVisibility",param_DocVisibilitySameAsApi);
        caller.click("Browse_Doc.btn_AddDocument");
        caller.pause("2000");
        caller.click("APIPublisherHome.lnk_Browse");
        caller.type("APIPublisherHome.tf_APISearch",param_searchForDocumentKeyWordOne);
        //wait for content load
        caller.pause("1000");
        caller.click("APIPublisherHome.btn_Search");
        caller.pause("2000");
        //verify the search results in store for key word One
        caller.checkElementPresent("APIPublisherBrowse.ele_lblNoMachingAPI",false,"");
        //Navigate to store URL
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"2000");
        lib_Common.bc_SelectServer(caller, param_serverNameTwoOfTenantOrAdmin);
        caller.checkElementPresent("APIStoreHome.tf_APISearchStore",false,"");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",param_searchForDocumentKeyWordOne);
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait for search content load
        caller.pause("2000");
        //verify the search results in store for key word One
        caller.checkElementPresent("APIStoreHome.ele_lblNoMatchingAPI",false,"");
        //Navigate to the store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        lib_Common.bc_StoreLogin(caller, param_TenantOneOrAdminStoreOne);
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",param_searchForDocumentKeyWordOne);
        //wait for content load
        caller.pause("2000");
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //wait for search content load
        caller.pause("2000");
        //verify the search results in store for key word One
        caller.checkElementPresent("APIStoreHome.ele_lblNoMatchingAPI",false,"");
        lib_Common.bc_DeleteAllApplicationsAndAPIs(caller, param_storeURL,param_TenantOrAdmin,param_storeOneOfTenanrOneOrAdmin,param_publisherURL,param_publisherOneOfTenentOneOrAdmin,param_DefaultApplication);
        caller.writeToReport("End of execution of TC APIM2_1060");	
    }
    /**
     *  Business component APIM2_800.
     */
    public final static void APIM2_800(final SeleniumTestBase caller, final String param_APIName, final String paramAPIContest, final String param_tag, final String param_ProductionEndPoint, final String param_storeURL, final String param_TenantOrAdmin, final String param_TenantOneOrAdminStoreOne, final String param_FaceBookUserName, final String param_FaceBookPassword) throws Exception {
        //User who is not logged in to the the system should not be able to access api store > applications page
        caller.writeToReport("Start  Executing APIM-800");
        //create API
        caller.click("APIPublisherHome.lnk_Add");
        caller.click("APIPublisherAdd.rdo_DesignNewAPI");
        caller.click("APIPublisherAdd.btn_StartCreating");
        //waiting for content load
        caller.pause("2000");
        //Type API Name
        String varAPIName = param_APIName+caller.generateData("int",2);
        caller.type("APIPublisherAdd.tf_APIName",varAPIName);
        //Store API name in to variables
        caller.store("keyAPIName","String",varAPIName);
        //auto generate contest
        //Type API contest
        String APIcontest = paramAPIContest+caller.generateData("int",2);
        caller.type("APIPublisherAdd.tf_APIContext",APIcontest);
        //Setting variable for API version
        String varAPIversion = "v1.0."+caller.generateData("int",1);
        //Type API Version
        caller.type("APIPublisherAdd.tf_APIVersion",varAPIversion);
        String APItag = param_tag+caller.generateData("int",3);
        //Type API tags
        caller.type("APIPublisherAdd.tf_Tags",APItag);
        caller.pause("2000");
        caller.fireEvent("KEY%key=\n","2000");
        caller.click("APIPublisherAdd.btn_Save");
        //waite for content load
        caller.pause("3000");
        caller.click("APIPublisherBrowse.btn_Yes");
        //waite for content load
        caller.pause("5000");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        //API Manage Section
        caller.pause("8000");
        //Go to browse page
        caller.click("APIPublisherHome.lnk_Browse");
        //waiting for content load
        caller.pause("2000");
        caller.type("APIPublisherHome.tf_APISearch",varAPIName);
        //waiting for content load
        caller.pause("2000");
        caller.click("APIPublisherHome.btn_Search");
        //waiting for content load
        caller.pause("1000");
        caller.click("APIPublisherBrowse.lnk_APIName","param_APIName_PARAM:" + varAPIName);
        caller.click("APIPublisherBrowse.lnk_Edit");
        caller.click("APIPublisherAdd.lnk_NextImplement");
        caller.click("APIPublisherBrowse.ele_lblManagedAPI");
        caller.type("APIPublisherBrowse.tf_ProductionEndPoint",param_ProductionEndPoint);
        caller.click("APIPublisherBrowse.btn_SaveManagedAPI");
        //waiting for content load
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_NextManage");
        //waiting for content load
        caller.pause("2000");
        lib_Common.bc_SelectTiers(caller);
        caller.click("APIPublisherBrowse.btn_SaveAndPublish");
        caller.pause("5000");
        caller.click("APIPublisherBrowse.btn_Close");
        caller.pause("4000");
        //Navigate to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + param_storeURL,"3000");
        //waite for content load
        caller.pause("3000");
        //Select the domain
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        caller.pause("3000");
        lib_Common.bc_StoreLogin(caller, param_TenantOneOrAdminStoreOne);
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",varAPIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + varAPIName);
        //waiting for content load
        caller.pause("3000");
        //click facebook icon to share
        caller.click("APIStoreHome.img_facebook");
        caller.selectWindow("Browse_Doc.newWindow1");
        //verify page is loaded
        caller.checkElementPresent("socialNetwork.tf_FaceBookUserName",false,"");
        //tye FB username
        caller.type("socialNetwork.tf_FaceBookUserName",param_FaceBookUserName);
        //type FB password
        caller.type("socialNetwork.tf_FaceBookPassword",param_FaceBookPassword);
        //click on login
        caller.click("socialNetwork.btn_LoginFaceBook");
        caller.click("socialNetwork.btn_ShareFaceBook");
        caller.checkObjectProperty("socialNetwork.ele_lblFaceBookFailureMessage","ELEMENTPRESENT","false",false,"There is a bug in facebook sharing because of that test case will fail");
        //select default window
        caller.selectWindow("Browse_Doc.defaultWindow");
        caller.writeToReport("End of execution of TC APIM2_800");	
    }
    /**
     *  Business component APIM2_801.
     */
    public final static void APIM2_801(final SeleniumTestBase caller, final String param_TwitterUserName, final String param_TwitterPassword, final String paramStoreURL, final String param_TenantOrAdmin) throws Exception {
        caller.writeToReport("Start of execution of TC APIM2_801");
        //Retriew API Name
        String varAPIName = caller.retrieveString("keyAPIName");
        //Navigate to store
        caller.navigateToURL("<param_storeURL>","param_storeURL_PARAM:" + paramStoreURL,"2000");
        //Select the domain
        lib_Common.bc_SelectServer(caller, param_TenantOrAdmin);
        //Click on created API
        caller.click("APIStoreHome.lnk_APIs");
        caller.pause("2000");
        caller.type("APIStoreHome.tf_APISearchStore",varAPIName);
        caller.click("APIStoreHome.btn_SearchButtonStore");
        //waiting for content load
        caller.pause("3000");
        caller.click("APIStoreHome.lnk_APINameStore","param_APIName_PARAM:" + varAPIName);
        //waiting for content load
        caller.pause("3000");
        //click on twitter icon to share
        caller.click("APIStoreHome.img_Twitter");
        //select second window
        caller.selectWindow("Browse_Doc.newWindowTwo");
        //verify page is twitter loaded
        caller.checkElementPresent("socialNetwork.tf_TwitterUserName",false,"");
        //type twitter user name
        caller.type("socialNetwork.tf_TwitterUserName",param_TwitterUserName);
        //type twitter password
        caller.type("socialNetwork.tf_TwitterPassWord",param_TwitterPassword);
        //click logging
        caller.click("socialNetwork.btn_LoginAndTweet");
        caller.checkObjectProperty("socialNetwork.ele_lblFaceBookFailureMessage","ELEMENTPRESENT","false",false,"There is a bug in twitter sharing because of that test case will fail");
        caller.writeToReport("End of execution of TC APIM2_801");	
    }
}
